{
    "openapi": "3.0.0",
    "servers": [
        {
            "url": "https://appmesh.amazonaws.com/"
        },
        {
            "url": "http://appmesh.amazonaws.com/"
        }
    ],
    "x-hasEquivalentPaths": true,
    "info": {
        "contact": {
            "email": "mike.ralphson@gmail.com",
            "name": "Mike Ralphson",
            "url": "https://github.com/mermade/aws2openapi",
            "x-twitter": "PermittedSoc"
        },
        "description": "<p>AWS App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and\n         control containerized microservices. App Mesh standardizes how your microservices\n         communicate, giving you end-to-end visibility and helping to ensure high-availability for\n         your applications.</p>\n         <p>App Mesh gives you consistent visibility and network traffic controls for every\n         microservice in an application. You can use App Mesh with Amazon ECS\n         (using the Amazon EC2 launch type), Amazon EKS, and Kubernetes on AWS.</p>\n         <note>\n            <p>App Mesh supports containerized microservice applications that use service discovery\n            naming for their components. To use App Mesh, you must have a containerized application\n            running on Amazon EC2 instances, hosted in either Amazon ECS, Amazon EKS, or Kubernetes on AWS. For\n            more information about service discovery on Amazon ECS, see <a href=\"http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the\n               <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and\n               <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS\n               for Services and Pods</a> in the Kubernetes documentation.</p>\n         </note>",
        "license": {
            "name": "Apache 2.0 License",
            "url": "http://www.apache.org/licenses/"
        },
        "termsOfService": "https://aws.amazon.com/service-terms/",
        "title": "AWS App Mesh",
        "version": "2019-01-25",
        "x-apiClientRegistration": {
            "url": "https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct"
        },
        "x-apisguru-categories": [
            "cloud"
        ],
        "x-logo": {
            "backgroundColor": "#FFFFFF",
            "url": "https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.jpeg"
        },
        "x-origin": [
            {
                "contentType": "application/json",
                "converter": {
                    "url": "https://github.com/mermade/aws2openapi",
                    "version": "1.0.0"
                },
                "url": "https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/appmesh-2019-01-25.normal.json",
                "x-apisguru-direct": true
            }
        ],
        "x-preferred": true,
        "x-providerName": "amazonaws.com",
        "x-release": "v4",
        "x-serviceName": "appmesh"
    },
    "externalDocs": {
        "description": "Amazon Web Services documentation",
        "url": "https://aws.amazon.com/appmesh/"
    },
    "security": [
        {
            "hmac": []
        }
    ],
    "paths": {
        "/v20190125/meshes": {
            "get": {
                "description": "Returns a list of existing service meshes.",
                "operationId": "ListMeshes",
                "parameters": [
                    {
                        "description": "Pagination limit",
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Pagination token",
                        "in": "query",
                        "name": "nextToken",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "",
                                    "properties": {
                                        "meshes": {
                                            "description": "The list of existing service meshes.",
                                            "items": {
                                                "description": "An object representing a service mesh returned by a list operation.",
                                                "properties": {
                                                    "arn": {
                                                        "description": "The full Amazon Resource Name (ARN) of the service mesh.",
                                                        "type": "string"
                                                    },
                                                    "meshName": {
                                                        "description": "The name of the service mesh.",
                                                        "maxLength": 255,
                                                        "minLength": 1,
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "arn",
                                                    "meshName"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "nextToken": {
                                            "description": "The <code>nextToken</code> value to include in a future <code>ListMeshes</code>\n         request. When the results of a <code>ListMeshes</code> request exceed\n         <code>limit</code>, you can use this value to retrieve the next page of\n         results. This value is <code>null</code> when there are no more results to\n         return.",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "meshes"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ForbiddenException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "InternalServerErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "",
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "put": {
                "description": "<p>Creates a new service mesh. A service mesh is a logical boundary for network traffic\n         between the services that reside within it.</p>\n         <p>After you create your service mesh, you can create virtual services, virtual nodes,\n         virtual routers, and routes to distribute traffic between the applications in your\n         mesh.</p>",
                "operationId": "CreateMesh",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "",
                                    "properties": {
                                        "mesh": {
                                            "description": "The full description of your service mesh following the create call.",
                                            "properties": {
                                                "meshName": {
                                                    "description": "The name of the service mesh.",
                                                    "maxLength": 255,
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "metadata": {
                                                    "description": "The associated metadata for the service mesh.",
                                                    "properties": {
                                                        "arn": {
                                                            "description": "<p>The full Amazon Resource Name (ARN) for the resource.</p>\n         <note>\n            <p>After you create a virtual node, set this value (either the full ARN or the\n            truncated resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>,\n            as the <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's\n            Envoy proxy container in your task definition or pod spec. This is then mapped to the\n               <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>\n            <p>If you require your Envoy stats or tracing to use a different name, you can override\n            the <code>node.cluster</code> value that is set by\n               <code>APPMESH_VIRTUAL_NODE_NAME</code> with the\n               <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>\n         </note>",
                                                            "type": "string"
                                                        },
                                                        "createdAt": {
                                                            "description": "The Unix epoch timestamp in seconds for when the resource was created.",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        },
                                                        "lastUpdatedAt": {
                                                            "description": "The Unix epoch timestamp in seconds for when the resource was last updated.",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        },
                                                        "uid": {
                                                            "description": "The unique identifier for the resource.",
                                                            "type": "string"
                                                        },
                                                        "version": {
                                                            "description": "The version of the resource. Resources are created at version 1, and this version is\n         incremented each time that they're updated.",
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "required": [
                                                        "arn",
                                                        "createdAt",
                                                        "lastUpdatedAt",
                                                        "uid",
                                                        "version"
                                                    ],
                                                    "type": "object"
                                                },
                                                "status": {
                                                    "description": "The status of the service mesh.",
                                                    "properties": {
                                                        "status": {
                                                            "description": "The current mesh status.",
                                                            "enum": [
                                                                "ACTIVE",
                                                                "DELETED",
                                                                "INACTIVE"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "required": [
                                                "meshName",
                                                "metadata",
                                                "status"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "mesh"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ConflictException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "ForbiddenException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "InternalServerErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "LimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "487": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "",
                                "properties": {
                                    "clientToken": {
                                        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the\nrequest. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                                        "type": "string"
                                    },
                                    "meshName": {
                                        "description": "The name to use for the service mesh.",
                                        "maxLength": 255,
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "meshName"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/v20190125/meshes/{meshName}": {
            "delete": {
                "description": "<p>Deletes an existing service mesh.</p>\n         <p>You must delete all resources (virtual services, routes, virtual routers, virtual nodes)\n         in the service mesh before you can delete the mesh itself.</p>",
                "operationId": "DeleteMesh",
                "parameters": [
                    {
                        "in": "path",
                        "name": "meshName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "",
                                    "properties": {
                                        "mesh": {
                                            "description": "The service mesh that was deleted.",
                                            "properties": {
                                                "meshName": {
                                                    "description": "The name of the service mesh.",
                                                    "maxLength": 255,
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "metadata": {
                                                    "description": "The associated metadata for the service mesh.",
                                                    "properties": {
                                                        "arn": {
                                                            "description": "<p>The full Amazon Resource Name (ARN) for the resource.</p>\n         <note>\n            <p>After you create a virtual node, set this value (either the full ARN or the\n            truncated resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>,\n            as the <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's\n            Envoy proxy container in your task definition or pod spec. This is then mapped to the\n               <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>\n            <p>If you require your Envoy stats or tracing to use a different name, you can override\n            the <code>node.cluster</code> value that is set by\n               <code>APPMESH_VIRTUAL_NODE_NAME</code> with the\n               <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>\n         </note>",
                                                            "type": "string"
                                                        },
                                                        "createdAt": {
                                                            "description": "The Unix epoch timestamp in seconds for when the resource was created.",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        },
                                                        "lastUpdatedAt": {
                                                            "description": "The Unix epoch timestamp in seconds for when the resource was last updated.",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        },
                                                        "uid": {
                                                            "description": "The unique identifier for the resource.",
                                                            "type": "string"
                                                        },
                                                        "version": {
                                                            "description": "The version of the resource. Resources are created at version 1, and this version is\n         incremented each time that they're updated.",
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "required": [
                                                        "arn",
                                                        "createdAt",
                                                        "lastUpdatedAt",
                                                        "uid",
                                                        "version"
                                                    ],
                                                    "type": "object"
                                                },
                                                "status": {
                                                    "description": "The status of the service mesh.",
                                                    "properties": {
                                                        "status": {
                                                            "description": "The current mesh status.",
                                                            "enum": [
                                                                "ACTIVE",
                                                                "DELETED",
                                                                "INACTIVE"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "required": [
                                                "meshName",
                                                "metadata",
                                                "status"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "mesh"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ForbiddenException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "InternalServerErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "ResourceInUseException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "",
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "get": {
                "description": "Describes an existing service mesh.",
                "operationId": "DescribeMesh",
                "parameters": [
                    {
                        "in": "path",
                        "name": "meshName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "",
                                    "properties": {
                                        "mesh": {
                                            "description": "The full description of your service mesh.",
                                            "properties": {
                                                "meshName": {
                                                    "description": "The name of the service mesh.",
                                                    "maxLength": 255,
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "metadata": {
                                                    "description": "The associated metadata for the service mesh.",
                                                    "properties": {
                                                        "arn": {
                                                            "description": "<p>The full Amazon Resource Name (ARN) for the resource.</p>\n         <note>\n            <p>After you create a virtual node, set this value (either the full ARN or the\n            truncated resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>,\n            as the <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's\n            Envoy proxy container in your task definition or pod spec. This is then mapped to the\n               <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>\n            <p>If you require your Envoy stats or tracing to use a different name, you can override\n            the <code>node.cluster</code> value that is set by\n               <code>APPMESH_VIRTUAL_NODE_NAME</code> with the\n               <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>\n         </note>",
                                                            "type": "string"
                                                        },
                                                        "createdAt": {
                                                            "description": "The Unix epoch timestamp in seconds for when the resource was created.",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        },
                                                        "lastUpdatedAt": {
                                                            "description": "The Unix epoch timestamp in seconds for when the resource was last updated.",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        },
                                                        "uid": {
                                                            "description": "The unique identifier for the resource.",
                                                            "type": "string"
                                                        },
                                                        "version": {
                                                            "description": "The version of the resource. Resources are created at version 1, and this version is\n         incremented each time that they're updated.",
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "required": [
                                                        "arn",
                                                        "createdAt",
                                                        "lastUpdatedAt",
                                                        "uid",
                                                        "version"
                                                    ],
                                                    "type": "object"
                                                },
                                                "status": {
                                                    "description": "The status of the service mesh.",
                                                    "properties": {
                                                        "status": {
                                                            "description": "The current mesh status.",
                                                            "enum": [
                                                                "ACTIVE",
                                                                "DELETED",
                                                                "INACTIVE"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "required": [
                                                "meshName",
                                                "metadata",
                                                "status"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "mesh"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ForbiddenException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "InternalServerErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "",
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ]
        },
        "/v20190125/meshes/{meshName}/virtualNodes": {
            "get": {
                "description": "Returns a list of existing virtual nodes.",
                "operationId": "ListVirtualNodes",
                "parameters": [
                    {
                        "description": "Pagination limit",
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Pagination token",
                        "in": "query",
                        "name": "nextToken",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "meshName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "",
                                    "properties": {
                                        "nextToken": {
                                            "description": "The <code>nextToken</code> value to include in a future <code>ListVirtualNodes</code>\n         request. When the results of a <code>ListVirtualNodes</code> request exceed\n         <code>limit</code>, you can use this value to retrieve the next page of\n         results. This value is <code>null</code> when there are no more results to\n         return.",
                                            "type": "string"
                                        },
                                        "virtualNodes": {
                                            "description": "The list of existing virtual nodes for the specified service mesh.",
                                            "items": {
                                                "description": "An object representing a virtual node returned by a list operation.",
                                                "properties": {
                                                    "arn": {
                                                        "description": "The full Amazon Resource Name (ARN) for the virtual node.",
                                                        "type": "string"
                                                    },
                                                    "meshName": {
                                                        "description": "The name of the service mesh that the virtual node resides in.",
                                                        "maxLength": 255,
                                                        "minLength": 1,
                                                        "type": "string"
                                                    },
                                                    "virtualNodeName": {
                                                        "description": "The name of the virtual node.",
                                                        "maxLength": 255,
                                                        "minLength": 1,
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "arn",
                                                    "meshName",
                                                    "virtualNodeName"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "required": [
                                        "virtualNodes"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ForbiddenException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "InternalServerErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "",
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "put": {
                "description": "<p>Creates a new virtual node within a service mesh.</p>\n         <p>A virtual node acts as logical pointer to a particular task group, such as an Amazon ECS\n         service or a Kubernetes deployment. When you create a virtual node, you must specify the\n         DNS service discovery hostname for your task group.</p>\n         <p>Any inbound traffic that your virtual node expects should be specified as a\n            <code>listener</code>. Any outbound traffic that your virtual node expects to reach\n         should be specified as a <code>backend</code>.</p>\n         <p>The response metadata for your new virtual node contains the <code>arn</code> that is\n         associated with the virtual node. Set this value (either the full ARN or the truncated\n         resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>, as the\n            <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's Envoy\n         proxy container in your task definition or pod spec. This is then mapped to the\n            <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>\n         <note>\n            <p>If you require your Envoy stats or tracing to use a different name, you can override\n            the <code>node.cluster</code> value that is set by\n               <code>APPMESH_VIRTUAL_NODE_NAME</code> with the\n               <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>\n         </note>",
                "operationId": "CreateVirtualNode",
                "parameters": [
                    {
                        "in": "path",
                        "name": "meshName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "",
                                    "properties": {
                                        "virtualNode": {
                                            "description": "The full description of your virtual node following the create call.",
                                            "properties": {
                                                "meshName": {
                                                    "description": "The name of the service mesh that the virtual node resides in.",
                                                    "maxLength": 255,
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "metadata": {
                                                    "description": "The associated metadata for the virtual node.",
                                                    "properties": {
                                                        "arn": {
                                                            "description": "<p>The full Amazon Resource Name (ARN) for the resource.</p>\n         <note>\n            <p>After you create a virtual node, set this value (either the full ARN or the\n            truncated resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>,\n            as the <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's\n            Envoy proxy container in your task definition or pod spec. This is then mapped to the\n               <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>\n            <p>If you require your Envoy stats or tracing to use a different name, you can override\n            the <code>node.cluster</code> value that is set by\n               <code>APPMESH_VIRTUAL_NODE_NAME</code> with the\n               <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>\n         </note>",
                                                            "type": "string"
                                                        },
                                                        "createdAt": {
                                                            "description": "The Unix epoch timestamp in seconds for when the resource was created.",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        },
                                                        "lastUpdatedAt": {
                                                            "description": "The Unix epoch timestamp in seconds for when the resource was last updated.",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        },
                                                        "uid": {
                                                            "description": "The unique identifier for the resource.",
                                                            "type": "string"
                                                        },
                                                        "version": {
                                                            "description": "The version of the resource. Resources are created at version 1, and this version is\n         incremented each time that they're updated.",
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "required": [
                                                        "arn",
                                                        "createdAt",
                                                        "lastUpdatedAt",
                                                        "uid",
                                                        "version"
                                                    ],
                                                    "type": "object"
                                                },
                                                "spec": {
                                                    "description": "The specifications of the virtual node.",
                                                    "properties": {
                                                        "backends": {
                                                            "description": "The backends that the virtual node is expected to send outbound traffic to.",
                                                            "items": {
                                                                "description": "An object representing the backends that a virtual node is expected to send outbound\n         traffic to. ",
                                                                "properties": {
                                                                    "virtualService": {
                                                                        "description": "Specifies a virtual service to use as a backend for a virtual node. ",
                                                                        "properties": {
                                                                            "virtualServiceName": {
                                                                                "description": "The name of the virtual service that is acting as a virtual node backend.",
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "virtualServiceName"
                                                                        ],
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "listeners": {
                                                            "description": "The listeners that the virtual node is expected to receive inbound traffic from. Currently only one listener is supported per virtual node.",
                                                            "items": {
                                                                "description": "An object representing a listener for a virtual node.",
                                                                "properties": {
                                                                    "healthCheck": {
                                                                        "description": "The health check information for the listener.",
                                                                        "properties": {
                                                                            "healthyThreshold": {
                                                                                "description": "The number of consecutive successful health checks that must occur before declaring\n         listener healthy.",
                                                                                "maximum": 10,
                                                                                "minimum": 2,
                                                                                "type": "integer"
                                                                            },
                                                                            "intervalMillis": {
                                                                                "description": "The time period in milliseconds between each health check execution.",
                                                                                "maximum": 300000,
                                                                                "minimum": 5000,
                                                                                "type": "integer"
                                                                            },
                                                                            "path": {
                                                                                "description": "The destination path for the health check request. This is required only if the\n         specified protocol is HTTP. If the protocol is TCP, this parameter is ignored.",
                                                                                "type": "string"
                                                                            },
                                                                            "port": {
                                                                                "description": "The destination port for the health check request. This port must match the port defined\n         in the <a>PortMapping</a> for the listener.",
                                                                                "maximum": 65535,
                                                                                "minimum": 1,
                                                                                "type": "integer"
                                                                            },
                                                                            "protocol": {
                                                                                "description": "The protocol for the health check request.",
                                                                                "enum": [
                                                                                    "http",
                                                                                    "tcp"
                                                                                ],
                                                                                "type": "string"
                                                                            },
                                                                            "timeoutMillis": {
                                                                                "description": "The amount of time to wait when receiving a response from the health check, in\n         milliseconds.",
                                                                                "maximum": 60000,
                                                                                "minimum": 2000,
                                                                                "type": "integer"
                                                                            },
                                                                            "unhealthyThreshold": {
                                                                                "description": "The number of consecutive failed health checks that must occur before declaring a\n         virtual node unhealthy. ",
                                                                                "maximum": 10,
                                                                                "minimum": 2,
                                                                                "type": "integer"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "healthyThreshold",
                                                                            "intervalMillis",
                                                                            "protocol",
                                                                            "timeoutMillis",
                                                                            "unhealthyThreshold"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "portMapping": {
                                                                        "description": "The port mapping information for the listener.",
                                                                        "properties": {
                                                                            "port": {
                                                                                "description": "The port used for the port mapping.",
                                                                                "maximum": 65535,
                                                                                "minimum": 1,
                                                                                "type": "integer"
                                                                            },
                                                                            "protocol": {
                                                                                "description": "The protocol used for the port mapping.",
                                                                                "enum": [
                                                                                    "http",
                                                                                    "tcp"
                                                                                ],
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "port",
                                                                            "protocol"
                                                                        ],
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "portMapping"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "serviceDiscovery": {
                                                            "description": "The service discovery information for the virtual node.",
                                                            "properties": {
                                                                "dns": {
                                                                    "description": "Specifies the DNS information for the virtual node.",
                                                                    "properties": {
                                                                        "hostname": {
                                                                            "description": "Specifies the DNS service discovery hostname for the virtual node. ",
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "hostname"
                                                                    ],
                                                                    "type": "object"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "status": {
                                                    "description": "The current status for the virtual node.",
                                                    "properties": {
                                                        "status": {
                                                            "description": "The current status of the virtual node.",
                                                            "enum": [
                                                                "ACTIVE",
                                                                "DELETED",
                                                                "INACTIVE"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "status"
                                                    ],
                                                    "type": "object"
                                                },
                                                "virtualNodeName": {
                                                    "description": "The name of the virtual node.",
                                                    "maxLength": 255,
                                                    "minLength": 1,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "meshName",
                                                "metadata",
                                                "spec",
                                                "status",
                                                "virtualNodeName"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "virtualNode"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ConflictException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "ForbiddenException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "InternalServerErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "LimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "487": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "",
                                "properties": {
                                    "clientToken": {
                                        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the\nrequest. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                                        "type": "string"
                                    },
                                    "spec": {
                                        "description": "The virtual node specification to apply.",
                                        "properties": {
                                            "backends": {
                                                "description": "The backends that the virtual node is expected to send outbound traffic to.",
                                                "items": {
                                                    "description": "An object representing the backends that a virtual node is expected to send outbound\n         traffic to. ",
                                                    "properties": {
                                                        "virtualService": {
                                                            "description": "Specifies a virtual service to use as a backend for a virtual node. ",
                                                            "properties": {
                                                                "virtualServiceName": {
                                                                    "description": "The name of the virtual service that is acting as a virtual node backend.",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "virtualServiceName"
                                                            ],
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "type": "array"
                                            },
                                            "listeners": {
                                                "description": "The listeners that the virtual node is expected to receive inbound traffic from. Currently only one listener is supported per virtual node.",
                                                "items": {
                                                    "description": "An object representing a listener for a virtual node.",
                                                    "properties": {
                                                        "healthCheck": {
                                                            "description": "The health check information for the listener.",
                                                            "properties": {
                                                                "healthyThreshold": {
                                                                    "description": "The number of consecutive successful health checks that must occur before declaring\n         listener healthy.",
                                                                    "maximum": 10,
                                                                    "minimum": 2,
                                                                    "type": "integer"
                                                                },
                                                                "intervalMillis": {
                                                                    "description": "The time period in milliseconds between each health check execution.",
                                                                    "maximum": 300000,
                                                                    "minimum": 5000,
                                                                    "type": "integer"
                                                                },
                                                                "path": {
                                                                    "description": "The destination path for the health check request. This is required only if the\n         specified protocol is HTTP. If the protocol is TCP, this parameter is ignored.",
                                                                    "type": "string"
                                                                },
                                                                "port": {
                                                                    "description": "The destination port for the health check request. This port must match the port defined\n         in the <a>PortMapping</a> for the listener.",
                                                                    "maximum": 65535,
                                                                    "minimum": 1,
                                                                    "type": "integer"
                                                                },
                                                                "protocol": {
                                                                    "description": "The protocol for the health check request.",
                                                                    "enum": [
                                                                        "http",
                                                                        "tcp"
                                                                    ],
                                                                    "type": "string"
                                                                },
                                                                "timeoutMillis": {
                                                                    "description": "The amount of time to wait when receiving a response from the health check, in\n         milliseconds.",
                                                                    "maximum": 60000,
                                                                    "minimum": 2000,
                                                                    "type": "integer"
                                                                },
                                                                "unhealthyThreshold": {
                                                                    "description": "The number of consecutive failed health checks that must occur before declaring a\n         virtual node unhealthy. ",
                                                                    "maximum": 10,
                                                                    "minimum": 2,
                                                                    "type": "integer"
                                                                }
                                                            },
                                                            "required": [
                                                                "healthyThreshold",
                                                                "intervalMillis",
                                                                "protocol",
                                                                "timeoutMillis",
                                                                "unhealthyThreshold"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "portMapping": {
                                                            "description": "The port mapping information for the listener.",
                                                            "properties": {
                                                                "port": {
                                                                    "description": "The port used for the port mapping.",
                                                                    "maximum": 65535,
                                                                    "minimum": 1,
                                                                    "type": "integer"
                                                                },
                                                                "protocol": {
                                                                    "description": "The protocol used for the port mapping.",
                                                                    "enum": [
                                                                        "http",
                                                                        "tcp"
                                                                    ],
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "port",
                                                                "protocol"
                                                            ],
                                                            "type": "object"
                                                        }
                                                    },
                                                    "required": [
                                                        "portMapping"
                                                    ],
                                                    "type": "object"
                                                },
                                                "type": "array"
                                            },
                                            "serviceDiscovery": {
                                                "description": "The service discovery information for the virtual node.",
                                                "properties": {
                                                    "dns": {
                                                        "description": "Specifies the DNS information for the virtual node.",
                                                        "properties": {
                                                            "hostname": {
                                                                "description": "Specifies the DNS service discovery hostname for the virtual node. ",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "hostname"
                                                        ],
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "virtualNodeName": {
                                        "description": "The name to use for the virtual node.",
                                        "maxLength": 255,
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "spec",
                                    "virtualNodeName"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/v20190125/meshes/{meshName}/virtualNodes/{virtualNodeName}": {
            "delete": {
                "description": "<p>Deletes an existing virtual node.</p>\n         <p>You must delete any virtual services that list a virtual node as a service provider\n         before you can delete the virtual node itself.</p>",
                "operationId": "DeleteVirtualNode",
                "parameters": [
                    {
                        "in": "path",
                        "name": "meshName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "virtualNodeName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "",
                                    "properties": {
                                        "virtualNode": {
                                            "description": "The virtual node that was deleted.",
                                            "properties": {
                                                "meshName": {
                                                    "description": "The name of the service mesh that the virtual node resides in.",
                                                    "maxLength": 255,
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "metadata": {
                                                    "description": "The associated metadata for the virtual node.",
                                                    "properties": {
                                                        "arn": {
                                                            "description": "<p>The full Amazon Resource Name (ARN) for the resource.</p>\n         <note>\n            <p>After you create a virtual node, set this value (either the full ARN or the\n            truncated resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>,\n            as the <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's\n            Envoy proxy container in your task definition or pod spec. This is then mapped to the\n               <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>\n            <p>If you require your Envoy stats or tracing to use a different name, you can override\n            the <code>node.cluster</code> value that is set by\n               <code>APPMESH_VIRTUAL_NODE_NAME</code> with the\n               <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>\n         </note>",
                                                            "type": "string"
                                                        },
                                                        "createdAt": {
                                                            "description": "The Unix epoch timestamp in seconds for when the resource was created.",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        },
                                                        "lastUpdatedAt": {
                                                            "description": "The Unix epoch timestamp in seconds for when the resource was last updated.",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        },
                                                        "uid": {
                                                            "description": "The unique identifier for the resource.",
                                                            "type": "string"
                                                        },
                                                        "version": {
                                                            "description": "The version of the resource. Resources are created at version 1, and this version is\n         incremented each time that they're updated.",
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "required": [
                                                        "arn",
                                                        "createdAt",
                                                        "lastUpdatedAt",
                                                        "uid",
                                                        "version"
                                                    ],
                                                    "type": "object"
                                                },
                                                "spec": {
                                                    "description": "The specifications of the virtual node.",
                                                    "properties": {
                                                        "backends": {
                                                            "description": "The backends that the virtual node is expected to send outbound traffic to.",
                                                            "items": {
                                                                "description": "An object representing the backends that a virtual node is expected to send outbound\n         traffic to. ",
                                                                "properties": {
                                                                    "virtualService": {
                                                                        "description": "Specifies a virtual service to use as a backend for a virtual node. ",
                                                                        "properties": {
                                                                            "virtualServiceName": {
                                                                                "description": "The name of the virtual service that is acting as a virtual node backend.",
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "virtualServiceName"
                                                                        ],
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "listeners": {
                                                            "description": "The listeners that the virtual node is expected to receive inbound traffic from. Currently only one listener is supported per virtual node.",
                                                            "items": {
                                                                "description": "An object representing a listener for a virtual node.",
                                                                "properties": {
                                                                    "healthCheck": {
                                                                        "description": "The health check information for the listener.",
                                                                        "properties": {
                                                                            "healthyThreshold": {
                                                                                "description": "The number of consecutive successful health checks that must occur before declaring\n         listener healthy.",
                                                                                "maximum": 10,
                                                                                "minimum": 2,
                                                                                "type": "integer"
                                                                            },
                                                                            "intervalMillis": {
                                                                                "description": "The time period in milliseconds between each health check execution.",
                                                                                "maximum": 300000,
                                                                                "minimum": 5000,
                                                                                "type": "integer"
                                                                            },
                                                                            "path": {
                                                                                "description": "The destination path for the health check request. This is required only if the\n         specified protocol is HTTP. If the protocol is TCP, this parameter is ignored.",
                                                                                "type": "string"
                                                                            },
                                                                            "port": {
                                                                                "description": "The destination port for the health check request. This port must match the port defined\n         in the <a>PortMapping</a> for the listener.",
                                                                                "maximum": 65535,
                                                                                "minimum": 1,
                                                                                "type": "integer"
                                                                            },
                                                                            "protocol": {
                                                                                "description": "The protocol for the health check request.",
                                                                                "enum": [
                                                                                    "http",
                                                                                    "tcp"
                                                                                ],
                                                                                "type": "string"
                                                                            },
                                                                            "timeoutMillis": {
                                                                                "description": "The amount of time to wait when receiving a response from the health check, in\n         milliseconds.",
                                                                                "maximum": 60000,
                                                                                "minimum": 2000,
                                                                                "type": "integer"
                                                                            },
                                                                            "unhealthyThreshold": {
                                                                                "description": "The number of consecutive failed health checks that must occur before declaring a\n         virtual node unhealthy. ",
                                                                                "maximum": 10,
                                                                                "minimum": 2,
                                                                                "type": "integer"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "healthyThreshold",
                                                                            "intervalMillis",
                                                                            "protocol",
                                                                            "timeoutMillis",
                                                                            "unhealthyThreshold"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "portMapping": {
                                                                        "description": "The port mapping information for the listener.",
                                                                        "properties": {
                                                                            "port": {
                                                                                "description": "The port used for the port mapping.",
                                                                                "maximum": 65535,
                                                                                "minimum": 1,
                                                                                "type": "integer"
                                                                            },
                                                                            "protocol": {
                                                                                "description": "The protocol used for the port mapping.",
                                                                                "enum": [
                                                                                    "http",
                                                                                    "tcp"
                                                                                ],
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "port",
                                                                            "protocol"
                                                                        ],
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "portMapping"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "serviceDiscovery": {
                                                            "description": "The service discovery information for the virtual node.",
                                                            "properties": {
                                                                "dns": {
                                                                    "description": "Specifies the DNS information for the virtual node.",
                                                                    "properties": {
                                                                        "hostname": {
                                                                            "description": "Specifies the DNS service discovery hostname for the virtual node. ",
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "hostname"
                                                                    ],
                                                                    "type": "object"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "status": {
                                                    "description": "The current status for the virtual node.",
                                                    "properties": {
                                                        "status": {
                                                            "description": "The current status of the virtual node.",
                                                            "enum": [
                                                                "ACTIVE",
                                                                "DELETED",
                                                                "INACTIVE"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "status"
                                                    ],
                                                    "type": "object"
                                                },
                                                "virtualNodeName": {
                                                    "description": "The name of the virtual node.",
                                                    "maxLength": 255,
                                                    "minLength": 1,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "meshName",
                                                "metadata",
                                                "spec",
                                                "status",
                                                "virtualNodeName"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "virtualNode"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ForbiddenException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "InternalServerErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "ResourceInUseException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "",
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "get": {
                "description": "Describes an existing virtual node.",
                "operationId": "DescribeVirtualNode",
                "parameters": [
                    {
                        "in": "path",
                        "name": "meshName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "virtualNodeName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "",
                                    "properties": {
                                        "virtualNode": {
                                            "description": "The full description of your virtual node.",
                                            "properties": {
                                                "meshName": {
                                                    "description": "The name of the service mesh that the virtual node resides in.",
                                                    "maxLength": 255,
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "metadata": {
                                                    "description": "The associated metadata for the virtual node.",
                                                    "properties": {
                                                        "arn": {
                                                            "description": "<p>The full Amazon Resource Name (ARN) for the resource.</p>\n         <note>\n            <p>After you create a virtual node, set this value (either the full ARN or the\n            truncated resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>,\n            as the <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's\n            Envoy proxy container in your task definition or pod spec. This is then mapped to the\n               <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>\n            <p>If you require your Envoy stats or tracing to use a different name, you can override\n            the <code>node.cluster</code> value that is set by\n               <code>APPMESH_VIRTUAL_NODE_NAME</code> with the\n               <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>\n         </note>",
                                                            "type": "string"
                                                        },
                                                        "createdAt": {
                                                            "description": "The Unix epoch timestamp in seconds for when the resource was created.",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        },
                                                        "lastUpdatedAt": {
                                                            "description": "The Unix epoch timestamp in seconds for when the resource was last updated.",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        },
                                                        "uid": {
                                                            "description": "The unique identifier for the resource.",
                                                            "type": "string"
                                                        },
                                                        "version": {
                                                            "description": "The version of the resource. Resources are created at version 1, and this version is\n         incremented each time that they're updated.",
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "required": [
                                                        "arn",
                                                        "createdAt",
                                                        "lastUpdatedAt",
                                                        "uid",
                                                        "version"
                                                    ],
                                                    "type": "object"
                                                },
                                                "spec": {
                                                    "description": "The specifications of the virtual node.",
                                                    "properties": {
                                                        "backends": {
                                                            "description": "The backends that the virtual node is expected to send outbound traffic to.",
                                                            "items": {
                                                                "description": "An object representing the backends that a virtual node is expected to send outbound\n         traffic to. ",
                                                                "properties": {
                                                                    "virtualService": {
                                                                        "description": "Specifies a virtual service to use as a backend for a virtual node. ",
                                                                        "properties": {
                                                                            "virtualServiceName": {
                                                                                "description": "The name of the virtual service that is acting as a virtual node backend.",
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "virtualServiceName"
                                                                        ],
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "listeners": {
                                                            "description": "The listeners that the virtual node is expected to receive inbound traffic from. Currently only one listener is supported per virtual node.",
                                                            "items": {
                                                                "description": "An object representing a listener for a virtual node.",
                                                                "properties": {
                                                                    "healthCheck": {
                                                                        "description": "The health check information for the listener.",
                                                                        "properties": {
                                                                            "healthyThreshold": {
                                                                                "description": "The number of consecutive successful health checks that must occur before declaring\n         listener healthy.",
                                                                                "maximum": 10,
                                                                                "minimum": 2,
                                                                                "type": "integer"
                                                                            },
                                                                            "intervalMillis": {
                                                                                "description": "The time period in milliseconds between each health check execution.",
                                                                                "maximum": 300000,
                                                                                "minimum": 5000,
                                                                                "type": "integer"
                                                                            },
                                                                            "path": {
                                                                                "description": "The destination path for the health check request. This is required only if the\n         specified protocol is HTTP. If the protocol is TCP, this parameter is ignored.",
                                                                                "type": "string"
                                                                            },
                                                                            "port": {
                                                                                "description": "The destination port for the health check request. This port must match the port defined\n         in the <a>PortMapping</a> for the listener.",
                                                                                "maximum": 65535,
                                                                                "minimum": 1,
                                                                                "type": "integer"
                                                                            },
                                                                            "protocol": {
                                                                                "description": "The protocol for the health check request.",
                                                                                "enum": [
                                                                                    "http",
                                                                                    "tcp"
                                                                                ],
                                                                                "type": "string"
                                                                            },
                                                                            "timeoutMillis": {
                                                                                "description": "The amount of time to wait when receiving a response from the health check, in\n         milliseconds.",
                                                                                "maximum": 60000,
                                                                                "minimum": 2000,
                                                                                "type": "integer"
                                                                            },
                                                                            "unhealthyThreshold": {
                                                                                "description": "The number of consecutive failed health checks that must occur before declaring a\n         virtual node unhealthy. ",
                                                                                "maximum": 10,
                                                                                "minimum": 2,
                                                                                "type": "integer"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "healthyThreshold",
                                                                            "intervalMillis",
                                                                            "protocol",
                                                                            "timeoutMillis",
                                                                            "unhealthyThreshold"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "portMapping": {
                                                                        "description": "The port mapping information for the listener.",
                                                                        "properties": {
                                                                            "port": {
                                                                                "description": "The port used for the port mapping.",
                                                                                "maximum": 65535,
                                                                                "minimum": 1,
                                                                                "type": "integer"
                                                                            },
                                                                            "protocol": {
                                                                                "description": "The protocol used for the port mapping.",
                                                                                "enum": [
                                                                                    "http",
                                                                                    "tcp"
                                                                                ],
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "port",
                                                                            "protocol"
                                                                        ],
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "portMapping"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "serviceDiscovery": {
                                                            "description": "The service discovery information for the virtual node.",
                                                            "properties": {
                                                                "dns": {
                                                                    "description": "Specifies the DNS information for the virtual node.",
                                                                    "properties": {
                                                                        "hostname": {
                                                                            "description": "Specifies the DNS service discovery hostname for the virtual node. ",
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "hostname"
                                                                    ],
                                                                    "type": "object"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "status": {
                                                    "description": "The current status for the virtual node.",
                                                    "properties": {
                                                        "status": {
                                                            "description": "The current status of the virtual node.",
                                                            "enum": [
                                                                "ACTIVE",
                                                                "DELETED",
                                                                "INACTIVE"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "status"
                                                    ],
                                                    "type": "object"
                                                },
                                                "virtualNodeName": {
                                                    "description": "The name of the virtual node.",
                                                    "maxLength": 255,
                                                    "minLength": 1,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "meshName",
                                                "metadata",
                                                "spec",
                                                "status",
                                                "virtualNodeName"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "virtualNode"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ForbiddenException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "InternalServerErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "",
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "put": {
                "description": "Updates an existing virtual node in a specified service mesh.",
                "operationId": "UpdateVirtualNode",
                "parameters": [
                    {
                        "in": "path",
                        "name": "meshName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "virtualNodeName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "",
                                    "properties": {
                                        "virtualNode": {
                                            "description": "A full description of the virtual node that was updated.",
                                            "properties": {
                                                "meshName": {
                                                    "description": "The name of the service mesh that the virtual node resides in.",
                                                    "maxLength": 255,
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "metadata": {
                                                    "description": "The associated metadata for the virtual node.",
                                                    "properties": {
                                                        "arn": {
                                                            "description": "<p>The full Amazon Resource Name (ARN) for the resource.</p>\n         <note>\n            <p>After you create a virtual node, set this value (either the full ARN or the\n            truncated resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>,\n            as the <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's\n            Envoy proxy container in your task definition or pod spec. This is then mapped to the\n               <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>\n            <p>If you require your Envoy stats or tracing to use a different name, you can override\n            the <code>node.cluster</code> value that is set by\n               <code>APPMESH_VIRTUAL_NODE_NAME</code> with the\n               <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>\n         </note>",
                                                            "type": "string"
                                                        },
                                                        "createdAt": {
                                                            "description": "The Unix epoch timestamp in seconds for when the resource was created.",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        },
                                                        "lastUpdatedAt": {
                                                            "description": "The Unix epoch timestamp in seconds for when the resource was last updated.",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        },
                                                        "uid": {
                                                            "description": "The unique identifier for the resource.",
                                                            "type": "string"
                                                        },
                                                        "version": {
                                                            "description": "The version of the resource. Resources are created at version 1, and this version is\n         incremented each time that they're updated.",
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "required": [
                                                        "arn",
                                                        "createdAt",
                                                        "lastUpdatedAt",
                                                        "uid",
                                                        "version"
                                                    ],
                                                    "type": "object"
                                                },
                                                "spec": {
                                                    "description": "The specifications of the virtual node.",
                                                    "properties": {
                                                        "backends": {
                                                            "description": "The backends that the virtual node is expected to send outbound traffic to.",
                                                            "items": {
                                                                "description": "An object representing the backends that a virtual node is expected to send outbound\n         traffic to. ",
                                                                "properties": {
                                                                    "virtualService": {
                                                                        "description": "Specifies a virtual service to use as a backend for a virtual node. ",
                                                                        "properties": {
                                                                            "virtualServiceName": {
                                                                                "description": "The name of the virtual service that is acting as a virtual node backend.",
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "virtualServiceName"
                                                                        ],
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "listeners": {
                                                            "description": "The listeners that the virtual node is expected to receive inbound traffic from. Currently only one listener is supported per virtual node.",
                                                            "items": {
                                                                "description": "An object representing a listener for a virtual node.",
                                                                "properties": {
                                                                    "healthCheck": {
                                                                        "description": "The health check information for the listener.",
                                                                        "properties": {
                                                                            "healthyThreshold": {
                                                                                "description": "The number of consecutive successful health checks that must occur before declaring\n         listener healthy.",
                                                                                "maximum": 10,
                                                                                "minimum": 2,
                                                                                "type": "integer"
                                                                            },
                                                                            "intervalMillis": {
                                                                                "description": "The time period in milliseconds between each health check execution.",
                                                                                "maximum": 300000,
                                                                                "minimum": 5000,
                                                                                "type": "integer"
                                                                            },
                                                                            "path": {
                                                                                "description": "The destination path for the health check request. This is required only if the\n         specified protocol is HTTP. If the protocol is TCP, this parameter is ignored.",
                                                                                "type": "string"
                                                                            },
                                                                            "port": {
                                                                                "description": "The destination port for the health check request. This port must match the port defined\n         in the <a>PortMapping</a> for the listener.",
                                                                                "maximum": 65535,
                                                                                "minimum": 1,
                                                                                "type": "integer"
                                                                            },
                                                                            "protocol": {
                                                                                "description": "The protocol for the health check request.",
                                                                                "enum": [
                                                                                    "http",
                                                                                    "tcp"
                                                                                ],
                                                                                "type": "string"
                                                                            },
                                                                            "timeoutMillis": {
                                                                                "description": "The amount of time to wait when receiving a response from the health check, in\n         milliseconds.",
                                                                                "maximum": 60000,
                                                                                "minimum": 2000,
                                                                                "type": "integer"
                                                                            },
                                                                            "unhealthyThreshold": {
                                                                                "description": "The number of consecutive failed health checks that must occur before declaring a\n         virtual node unhealthy. ",
                                                                                "maximum": 10,
                                                                                "minimum": 2,
                                                                                "type": "integer"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "healthyThreshold",
                                                                            "intervalMillis",
                                                                            "protocol",
                                                                            "timeoutMillis",
                                                                            "unhealthyThreshold"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "portMapping": {
                                                                        "description": "The port mapping information for the listener.",
                                                                        "properties": {
                                                                            "port": {
                                                                                "description": "The port used for the port mapping.",
                                                                                "maximum": 65535,
                                                                                "minimum": 1,
                                                                                "type": "integer"
                                                                            },
                                                                            "protocol": {
                                                                                "description": "The protocol used for the port mapping.",
                                                                                "enum": [
                                                                                    "http",
                                                                                    "tcp"
                                                                                ],
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "port",
                                                                            "protocol"
                                                                        ],
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "portMapping"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "serviceDiscovery": {
                                                            "description": "The service discovery information for the virtual node.",
                                                            "properties": {
                                                                "dns": {
                                                                    "description": "Specifies the DNS information for the virtual node.",
                                                                    "properties": {
                                                                        "hostname": {
                                                                            "description": "Specifies the DNS service discovery hostname for the virtual node. ",
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "hostname"
                                                                    ],
                                                                    "type": "object"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "status": {
                                                    "description": "The current status for the virtual node.",
                                                    "properties": {
                                                        "status": {
                                                            "description": "The current status of the virtual node.",
                                                            "enum": [
                                                                "ACTIVE",
                                                                "DELETED",
                                                                "INACTIVE"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "status"
                                                    ],
                                                    "type": "object"
                                                },
                                                "virtualNodeName": {
                                                    "description": "The name of the virtual node.",
                                                    "maxLength": 255,
                                                    "minLength": 1,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "meshName",
                                                "metadata",
                                                "spec",
                                                "status",
                                                "virtualNodeName"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "virtualNode"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ConflictException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "ForbiddenException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "InternalServerErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "LimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "487": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "",
                                "properties": {
                                    "clientToken": {
                                        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the\nrequest. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                                        "type": "string"
                                    },
                                    "spec": {
                                        "description": "The new virtual node specification to apply. This overwrites the existing data.",
                                        "properties": {
                                            "backends": {
                                                "description": "The backends that the virtual node is expected to send outbound traffic to.",
                                                "items": {
                                                    "description": "An object representing the backends that a virtual node is expected to send outbound\n         traffic to. ",
                                                    "properties": {
                                                        "virtualService": {
                                                            "description": "Specifies a virtual service to use as a backend for a virtual node. ",
                                                            "properties": {
                                                                "virtualServiceName": {
                                                                    "description": "The name of the virtual service that is acting as a virtual node backend.",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "virtualServiceName"
                                                            ],
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "type": "array"
                                            },
                                            "listeners": {
                                                "description": "The listeners that the virtual node is expected to receive inbound traffic from. Currently only one listener is supported per virtual node.",
                                                "items": {
                                                    "description": "An object representing a listener for a virtual node.",
                                                    "properties": {
                                                        "healthCheck": {
                                                            "description": "The health check information for the listener.",
                                                            "properties": {
                                                                "healthyThreshold": {
                                                                    "description": "The number of consecutive successful health checks that must occur before declaring\n         listener healthy.",
                                                                    "maximum": 10,
                                                                    "minimum": 2,
                                                                    "type": "integer"
                                                                },
                                                                "intervalMillis": {
                                                                    "description": "The time period in milliseconds between each health check execution.",
                                                                    "maximum": 300000,
                                                                    "minimum": 5000,
                                                                    "type": "integer"
                                                                },
                                                                "path": {
                                                                    "description": "The destination path for the health check request. This is required only if the\n         specified protocol is HTTP. If the protocol is TCP, this parameter is ignored.",
                                                                    "type": "string"
                                                                },
                                                                "port": {
                                                                    "description": "The destination port for the health check request. This port must match the port defined\n         in the <a>PortMapping</a> for the listener.",
                                                                    "maximum": 65535,
                                                                    "minimum": 1,
                                                                    "type": "integer"
                                                                },
                                                                "protocol": {
                                                                    "description": "The protocol for the health check request.",
                                                                    "enum": [
                                                                        "http",
                                                                        "tcp"
                                                                    ],
                                                                    "type": "string"
                                                                },
                                                                "timeoutMillis": {
                                                                    "description": "The amount of time to wait when receiving a response from the health check, in\n         milliseconds.",
                                                                    "maximum": 60000,
                                                                    "minimum": 2000,
                                                                    "type": "integer"
                                                                },
                                                                "unhealthyThreshold": {
                                                                    "description": "The number of consecutive failed health checks that must occur before declaring a\n         virtual node unhealthy. ",
                                                                    "maximum": 10,
                                                                    "minimum": 2,
                                                                    "type": "integer"
                                                                }
                                                            },
                                                            "required": [
                                                                "healthyThreshold",
                                                                "intervalMillis",
                                                                "protocol",
                                                                "timeoutMillis",
                                                                "unhealthyThreshold"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "portMapping": {
                                                            "description": "The port mapping information for the listener.",
                                                            "properties": {
                                                                "port": {
                                                                    "description": "The port used for the port mapping.",
                                                                    "maximum": 65535,
                                                                    "minimum": 1,
                                                                    "type": "integer"
                                                                },
                                                                "protocol": {
                                                                    "description": "The protocol used for the port mapping.",
                                                                    "enum": [
                                                                        "http",
                                                                        "tcp"
                                                                    ],
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "port",
                                                                "protocol"
                                                            ],
                                                            "type": "object"
                                                        }
                                                    },
                                                    "required": [
                                                        "portMapping"
                                                    ],
                                                    "type": "object"
                                                },
                                                "type": "array"
                                            },
                                            "serviceDiscovery": {
                                                "description": "The service discovery information for the virtual node.",
                                                "properties": {
                                                    "dns": {
                                                        "description": "Specifies the DNS information for the virtual node.",
                                                        "properties": {
                                                            "hostname": {
                                                                "description": "Specifies the DNS service discovery hostname for the virtual node. ",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "hostname"
                                                        ],
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "required": [
                                    "spec"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes": {
            "get": {
                "description": "Returns a list of existing routes in a service mesh.",
                "operationId": "ListRoutes",
                "parameters": [
                    {
                        "description": "Pagination limit",
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Pagination token",
                        "in": "query",
                        "name": "nextToken",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "meshName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "virtualRouterName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "",
                                    "properties": {
                                        "nextToken": {
                                            "description": "The <code>nextToken</code> value to include in a future <code>ListRoutes</code>\n         request. When the results of a <code>ListRoutes</code> request exceed\n         <code>limit</code>, you can use this value to retrieve the next page of\n         results. This value is <code>null</code> when there are no more results to\n         return.",
                                            "type": "string"
                                        },
                                        "routes": {
                                            "description": "The list of existing routes for the specified service mesh and virtual router.",
                                            "items": {
                                                "description": "An object representing a route returned by a list operation.",
                                                "properties": {
                                                    "arn": {
                                                        "description": "The full Amazon Resource Name (ARN) for the route.",
                                                        "type": "string"
                                                    },
                                                    "meshName": {
                                                        "description": "The name of the service mesh that the route resides in.",
                                                        "maxLength": 255,
                                                        "minLength": 1,
                                                        "type": "string"
                                                    },
                                                    "routeName": {
                                                        "description": "The name of the route.",
                                                        "maxLength": 255,
                                                        "minLength": 1,
                                                        "type": "string"
                                                    },
                                                    "virtualRouterName": {
                                                        "description": "The virtual router that the route is associated with.",
                                                        "maxLength": 255,
                                                        "minLength": 1,
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "arn",
                                                    "meshName",
                                                    "routeName",
                                                    "virtualRouterName"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "required": [
                                        "routes"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ForbiddenException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "InternalServerErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "",
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "put": {
                "description": "<p>Creates a new route that is associated with a virtual router.</p>\n         <p>You can use the <code>prefix</code> parameter in your route specification for path-based\n         routing of requests. For example, if your virtual router service name is\n            <code>my-service.local</code>, and you want the route to match requests to\n            <code>my-service.local/metrics</code>, then your prefix should be\n         <code>/metrics</code>.</p>\n         <p>If your route matches a request, you can distribute traffic to one or more target\n         virtual nodes with relative weighting.</p>",
                "operationId": "CreateRoute",
                "parameters": [
                    {
                        "in": "path",
                        "name": "meshName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "virtualRouterName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "",
                                    "properties": {
                                        "route": {
                                            "description": "The full description of your mesh following the create call.",
                                            "properties": {
                                                "meshName": {
                                                    "description": "The name of the service mesh that the route resides in.",
                                                    "maxLength": 255,
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "metadata": {
                                                    "description": "The associated metadata for the route.",
                                                    "properties": {
                                                        "arn": {
                                                            "description": "<p>The full Amazon Resource Name (ARN) for the resource.</p>\n         <note>\n            <p>After you create a virtual node, set this value (either the full ARN or the\n            truncated resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>,\n            as the <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's\n            Envoy proxy container in your task definition or pod spec. This is then mapped to the\n               <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>\n            <p>If you require your Envoy stats or tracing to use a different name, you can override\n            the <code>node.cluster</code> value that is set by\n               <code>APPMESH_VIRTUAL_NODE_NAME</code> with the\n               <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>\n         </note>",
                                                            "type": "string"
                                                        },
                                                        "createdAt": {
                                                            "description": "The Unix epoch timestamp in seconds for when the resource was created.",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        },
                                                        "lastUpdatedAt": {
                                                            "description": "The Unix epoch timestamp in seconds for when the resource was last updated.",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        },
                                                        "uid": {
                                                            "description": "The unique identifier for the resource.",
                                                            "type": "string"
                                                        },
                                                        "version": {
                                                            "description": "The version of the resource. Resources are created at version 1, and this version is\n         incremented each time that they're updated.",
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "required": [
                                                        "arn",
                                                        "createdAt",
                                                        "lastUpdatedAt",
                                                        "uid",
                                                        "version"
                                                    ],
                                                    "type": "object"
                                                },
                                                "routeName": {
                                                    "description": "The name of the route.",
                                                    "maxLength": 255,
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "spec": {
                                                    "description": "The specifications of the route.",
                                                    "properties": {
                                                        "httpRoute": {
                                                            "description": "The HTTP routing information for the route.",
                                                            "properties": {
                                                                "action": {
                                                                    "description": "The action to take if a match is determined.",
                                                                    "properties": {
                                                                        "weightedTargets": {
                                                                            "description": "The targets that traffic is routed to when a request matches the route. You can specify\n         one or more targets and their relative weights to distribute traffic with.",
                                                                            "items": {
                                                                                "description": "An object representing a target and its relative weight. Traffic is distributed across\n         targets according to their relative weight. For example, a weighted target with a relative\n         weight of 50 receives five times as much traffic as one with a relative weight of\n         10.",
                                                                                "properties": {
                                                                                    "virtualNode": {
                                                                                        "description": "The virtual node to associate with the weighted target.",
                                                                                        "maxLength": 255,
                                                                                        "minLength": 1,
                                                                                        "type": "string"
                                                                                    },
                                                                                    "weight": {
                                                                                        "description": "The relative weight of the weighted target.",
                                                                                        "maximum": 100,
                                                                                        "minimum": 0,
                                                                                        "type": "integer"
                                                                                    }
                                                                                },
                                                                                "required": [
                                                                                    "virtualNode",
                                                                                    "weight"
                                                                                ],
                                                                                "type": "object"
                                                                            },
                                                                            "type": "array"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "weightedTargets"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "match": {
                                                                    "description": "The criteria for determining an HTTP request match.",
                                                                    "properties": {
                                                                        "prefix": {
                                                                            "description": "Specifies the path to match requests with. This parameter must always start with\n            <code>/</code>, which by itself matches all requests to the virtual router service name.\n         You can also match for path-based routing of requests. For example, if your virtual router\n         service name is <code>my-service.local</code> and you want the route to match requests to\n            <code>my-service.local/metrics</code>, your prefix should be\n         <code>/metrics</code>.",
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "prefix"
                                                                    ],
                                                                    "type": "object"
                                                                }
                                                            },
                                                            "required": [
                                                                "action",
                                                                "match"
                                                            ],
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "status": {
                                                    "description": "The status of the route.",
                                                    "properties": {
                                                        "status": {
                                                            "description": "The current status for the route.",
                                                            "enum": [
                                                                "ACTIVE",
                                                                "DELETED",
                                                                "INACTIVE"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "status"
                                                    ],
                                                    "type": "object"
                                                },
                                                "virtualRouterName": {
                                                    "description": "The virtual router that the route is associated with.",
                                                    "maxLength": 255,
                                                    "minLength": 1,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "meshName",
                                                "metadata",
                                                "routeName",
                                                "spec",
                                                "status",
                                                "virtualRouterName"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "route"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ConflictException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "ForbiddenException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "InternalServerErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "LimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "487": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "",
                                "properties": {
                                    "clientToken": {
                                        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the\nrequest. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                                        "type": "string"
                                    },
                                    "routeName": {
                                        "description": "The name to use for the route.",
                                        "maxLength": 255,
                                        "minLength": 1,
                                        "type": "string"
                                    },
                                    "spec": {
                                        "description": "The route specification to apply.",
                                        "properties": {
                                            "httpRoute": {
                                                "description": "The HTTP routing information for the route.",
                                                "properties": {
                                                    "action": {
                                                        "description": "The action to take if a match is determined.",
                                                        "properties": {
                                                            "weightedTargets": {
                                                                "description": "The targets that traffic is routed to when a request matches the route. You can specify\n         one or more targets and their relative weights to distribute traffic with.",
                                                                "items": {
                                                                    "description": "An object representing a target and its relative weight. Traffic is distributed across\n         targets according to their relative weight. For example, a weighted target with a relative\n         weight of 50 receives five times as much traffic as one with a relative weight of\n         10.",
                                                                    "properties": {
                                                                        "virtualNode": {
                                                                            "description": "The virtual node to associate with the weighted target.",
                                                                            "maxLength": 255,
                                                                            "minLength": 1,
                                                                            "type": "string"
                                                                        },
                                                                        "weight": {
                                                                            "description": "The relative weight of the weighted target.",
                                                                            "maximum": 100,
                                                                            "minimum": 0,
                                                                            "type": "integer"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "virtualNode",
                                                                        "weight"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "type": "array"
                                                            }
                                                        },
                                                        "required": [
                                                            "weightedTargets"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "match": {
                                                        "description": "The criteria for determining an HTTP request match.",
                                                        "properties": {
                                                            "prefix": {
                                                                "description": "Specifies the path to match requests with. This parameter must always start with\n            <code>/</code>, which by itself matches all requests to the virtual router service name.\n         You can also match for path-based routing of requests. For example, if your virtual router\n         service name is <code>my-service.local</code> and you want the route to match requests to\n            <code>my-service.local/metrics</code>, your prefix should be\n         <code>/metrics</code>.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "prefix"
                                                        ],
                                                        "type": "object"
                                                    }
                                                },
                                                "required": [
                                                    "action",
                                                    "match"
                                                ],
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "required": [
                                    "routeName",
                                    "spec"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes/{routeName}": {
            "delete": {
                "description": "Deletes an existing route.",
                "operationId": "DeleteRoute",
                "parameters": [
                    {
                        "in": "path",
                        "name": "meshName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "virtualRouterName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "routeName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "",
                                    "properties": {
                                        "route": {
                                            "description": "The route that was deleted.",
                                            "properties": {
                                                "meshName": {
                                                    "description": "The name of the service mesh that the route resides in.",
                                                    "maxLength": 255,
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "metadata": {
                                                    "description": "The associated metadata for the route.",
                                                    "properties": {
                                                        "arn": {
                                                            "description": "<p>The full Amazon Resource Name (ARN) for the resource.</p>\n         <note>\n            <p>After you create a virtual node, set this value (either the full ARN or the\n            truncated resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>,\n            as the <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's\n            Envoy proxy container in your task definition or pod spec. This is then mapped to the\n               <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>\n            <p>If you require your Envoy stats or tracing to use a different name, you can override\n            the <code>node.cluster</code> value that is set by\n               <code>APPMESH_VIRTUAL_NODE_NAME</code> with the\n               <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>\n         </note>",
                                                            "type": "string"
                                                        },
                                                        "createdAt": {
                                                            "description": "The Unix epoch timestamp in seconds for when the resource was created.",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        },
                                                        "lastUpdatedAt": {
                                                            "description": "The Unix epoch timestamp in seconds for when the resource was last updated.",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        },
                                                        "uid": {
                                                            "description": "The unique identifier for the resource.",
                                                            "type": "string"
                                                        },
                                                        "version": {
                                                            "description": "The version of the resource. Resources are created at version 1, and this version is\n         incremented each time that they're updated.",
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "required": [
                                                        "arn",
                                                        "createdAt",
                                                        "lastUpdatedAt",
                                                        "uid",
                                                        "version"
                                                    ],
                                                    "type": "object"
                                                },
                                                "routeName": {
                                                    "description": "The name of the route.",
                                                    "maxLength": 255,
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "spec": {
                                                    "description": "The specifications of the route.",
                                                    "properties": {
                                                        "httpRoute": {
                                                            "description": "The HTTP routing information for the route.",
                                                            "properties": {
                                                                "action": {
                                                                    "description": "The action to take if a match is determined.",
                                                                    "properties": {
                                                                        "weightedTargets": {
                                                                            "description": "The targets that traffic is routed to when a request matches the route. You can specify\n         one or more targets and their relative weights to distribute traffic with.",
                                                                            "items": {
                                                                                "description": "An object representing a target and its relative weight. Traffic is distributed across\n         targets according to their relative weight. For example, a weighted target with a relative\n         weight of 50 receives five times as much traffic as one with a relative weight of\n         10.",
                                                                                "properties": {
                                                                                    "virtualNode": {
                                                                                        "description": "The virtual node to associate with the weighted target.",
                                                                                        "maxLength": 255,
                                                                                        "minLength": 1,
                                                                                        "type": "string"
                                                                                    },
                                                                                    "weight": {
                                                                                        "description": "The relative weight of the weighted target.",
                                                                                        "maximum": 100,
                                                                                        "minimum": 0,
                                                                                        "type": "integer"
                                                                                    }
                                                                                },
                                                                                "required": [
                                                                                    "virtualNode",
                                                                                    "weight"
                                                                                ],
                                                                                "type": "object"
                                                                            },
                                                                            "type": "array"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "weightedTargets"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "match": {
                                                                    "description": "The criteria for determining an HTTP request match.",
                                                                    "properties": {
                                                                        "prefix": {
                                                                            "description": "Specifies the path to match requests with. This parameter must always start with\n            <code>/</code>, which by itself matches all requests to the virtual router service name.\n         You can also match for path-based routing of requests. For example, if your virtual router\n         service name is <code>my-service.local</code> and you want the route to match requests to\n            <code>my-service.local/metrics</code>, your prefix should be\n         <code>/metrics</code>.",
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "prefix"
                                                                    ],
                                                                    "type": "object"
                                                                }
                                                            },
                                                            "required": [
                                                                "action",
                                                                "match"
                                                            ],
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "status": {
                                                    "description": "The status of the route.",
                                                    "properties": {
                                                        "status": {
                                                            "description": "The current status for the route.",
                                                            "enum": [
                                                                "ACTIVE",
                                                                "DELETED",
                                                                "INACTIVE"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "status"
                                                    ],
                                                    "type": "object"
                                                },
                                                "virtualRouterName": {
                                                    "description": "The virtual router that the route is associated with.",
                                                    "maxLength": 255,
                                                    "minLength": 1,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "meshName",
                                                "metadata",
                                                "routeName",
                                                "spec",
                                                "status",
                                                "virtualRouterName"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "route"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ForbiddenException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "InternalServerErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "ResourceInUseException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "",
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "get": {
                "description": "Describes an existing route.",
                "operationId": "DescribeRoute",
                "parameters": [
                    {
                        "in": "path",
                        "name": "meshName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "virtualRouterName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "routeName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "",
                                    "properties": {
                                        "route": {
                                            "description": "The full description of your route.",
                                            "properties": {
                                                "meshName": {
                                                    "description": "The name of the service mesh that the route resides in.",
                                                    "maxLength": 255,
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "metadata": {
                                                    "description": "The associated metadata for the route.",
                                                    "properties": {
                                                        "arn": {
                                                            "description": "<p>The full Amazon Resource Name (ARN) for the resource.</p>\n         <note>\n            <p>After you create a virtual node, set this value (either the full ARN or the\n            truncated resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>,\n            as the <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's\n            Envoy proxy container in your task definition or pod spec. This is then mapped to the\n               <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>\n            <p>If you require your Envoy stats or tracing to use a different name, you can override\n            the <code>node.cluster</code> value that is set by\n               <code>APPMESH_VIRTUAL_NODE_NAME</code> with the\n               <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>\n         </note>",
                                                            "type": "string"
                                                        },
                                                        "createdAt": {
                                                            "description": "The Unix epoch timestamp in seconds for when the resource was created.",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        },
                                                        "lastUpdatedAt": {
                                                            "description": "The Unix epoch timestamp in seconds for when the resource was last updated.",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        },
                                                        "uid": {
                                                            "description": "The unique identifier for the resource.",
                                                            "type": "string"
                                                        },
                                                        "version": {
                                                            "description": "The version of the resource. Resources are created at version 1, and this version is\n         incremented each time that they're updated.",
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "required": [
                                                        "arn",
                                                        "createdAt",
                                                        "lastUpdatedAt",
                                                        "uid",
                                                        "version"
                                                    ],
                                                    "type": "object"
                                                },
                                                "routeName": {
                                                    "description": "The name of the route.",
                                                    "maxLength": 255,
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "spec": {
                                                    "description": "The specifications of the route.",
                                                    "properties": {
                                                        "httpRoute": {
                                                            "description": "The HTTP routing information for the route.",
                                                            "properties": {
                                                                "action": {
                                                                    "description": "The action to take if a match is determined.",
                                                                    "properties": {
                                                                        "weightedTargets": {
                                                                            "description": "The targets that traffic is routed to when a request matches the route. You can specify\n         one or more targets and their relative weights to distribute traffic with.",
                                                                            "items": {
                                                                                "description": "An object representing a target and its relative weight. Traffic is distributed across\n         targets according to their relative weight. For example, a weighted target with a relative\n         weight of 50 receives five times as much traffic as one with a relative weight of\n         10.",
                                                                                "properties": {
                                                                                    "virtualNode": {
                                                                                        "description": "The virtual node to associate with the weighted target.",
                                                                                        "maxLength": 255,
                                                                                        "minLength": 1,
                                                                                        "type": "string"
                                                                                    },
                                                                                    "weight": {
                                                                                        "description": "The relative weight of the weighted target.",
                                                                                        "maximum": 100,
                                                                                        "minimum": 0,
                                                                                        "type": "integer"
                                                                                    }
                                                                                },
                                                                                "required": [
                                                                                    "virtualNode",
                                                                                    "weight"
                                                                                ],
                                                                                "type": "object"
                                                                            },
                                                                            "type": "array"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "weightedTargets"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "match": {
                                                                    "description": "The criteria for determining an HTTP request match.",
                                                                    "properties": {
                                                                        "prefix": {
                                                                            "description": "Specifies the path to match requests with. This parameter must always start with\n            <code>/</code>, which by itself matches all requests to the virtual router service name.\n         You can also match for path-based routing of requests. For example, if your virtual router\n         service name is <code>my-service.local</code> and you want the route to match requests to\n            <code>my-service.local/metrics</code>, your prefix should be\n         <code>/metrics</code>.",
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "prefix"
                                                                    ],
                                                                    "type": "object"
                                                                }
                                                            },
                                                            "required": [
                                                                "action",
                                                                "match"
                                                            ],
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "status": {
                                                    "description": "The status of the route.",
                                                    "properties": {
                                                        "status": {
                                                            "description": "The current status for the route.",
                                                            "enum": [
                                                                "ACTIVE",
                                                                "DELETED",
                                                                "INACTIVE"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "status"
                                                    ],
                                                    "type": "object"
                                                },
                                                "virtualRouterName": {
                                                    "description": "The virtual router that the route is associated with.",
                                                    "maxLength": 255,
                                                    "minLength": 1,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "meshName",
                                                "metadata",
                                                "routeName",
                                                "spec",
                                                "status",
                                                "virtualRouterName"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "route"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ForbiddenException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "InternalServerErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "",
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "put": {
                "description": "Updates an existing route for a specified service mesh and virtual router.",
                "operationId": "UpdateRoute",
                "parameters": [
                    {
                        "in": "path",
                        "name": "meshName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "virtualRouterName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "routeName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "",
                                    "properties": {
                                        "route": {
                                            "description": "A full description of the route that was updated.",
                                            "properties": {
                                                "meshName": {
                                                    "description": "The name of the service mesh that the route resides in.",
                                                    "maxLength": 255,
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "metadata": {
                                                    "description": "The associated metadata for the route.",
                                                    "properties": {
                                                        "arn": {
                                                            "description": "<p>The full Amazon Resource Name (ARN) for the resource.</p>\n         <note>\n            <p>After you create a virtual node, set this value (either the full ARN or the\n            truncated resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>,\n            as the <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's\n            Envoy proxy container in your task definition or pod spec. This is then mapped to the\n               <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>\n            <p>If you require your Envoy stats or tracing to use a different name, you can override\n            the <code>node.cluster</code> value that is set by\n               <code>APPMESH_VIRTUAL_NODE_NAME</code> with the\n               <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>\n         </note>",
                                                            "type": "string"
                                                        },
                                                        "createdAt": {
                                                            "description": "The Unix epoch timestamp in seconds for when the resource was created.",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        },
                                                        "lastUpdatedAt": {
                                                            "description": "The Unix epoch timestamp in seconds for when the resource was last updated.",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        },
                                                        "uid": {
                                                            "description": "The unique identifier for the resource.",
                                                            "type": "string"
                                                        },
                                                        "version": {
                                                            "description": "The version of the resource. Resources are created at version 1, and this version is\n         incremented each time that they're updated.",
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "required": [
                                                        "arn",
                                                        "createdAt",
                                                        "lastUpdatedAt",
                                                        "uid",
                                                        "version"
                                                    ],
                                                    "type": "object"
                                                },
                                                "routeName": {
                                                    "description": "The name of the route.",
                                                    "maxLength": 255,
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "spec": {
                                                    "description": "The specifications of the route.",
                                                    "properties": {
                                                        "httpRoute": {
                                                            "description": "The HTTP routing information for the route.",
                                                            "properties": {
                                                                "action": {
                                                                    "description": "The action to take if a match is determined.",
                                                                    "properties": {
                                                                        "weightedTargets": {
                                                                            "description": "The targets that traffic is routed to when a request matches the route. You can specify\n         one or more targets and their relative weights to distribute traffic with.",
                                                                            "items": {
                                                                                "description": "An object representing a target and its relative weight. Traffic is distributed across\n         targets according to their relative weight. For example, a weighted target with a relative\n         weight of 50 receives five times as much traffic as one with a relative weight of\n         10.",
                                                                                "properties": {
                                                                                    "virtualNode": {
                                                                                        "description": "The virtual node to associate with the weighted target.",
                                                                                        "maxLength": 255,
                                                                                        "minLength": 1,
                                                                                        "type": "string"
                                                                                    },
                                                                                    "weight": {
                                                                                        "description": "The relative weight of the weighted target.",
                                                                                        "maximum": 100,
                                                                                        "minimum": 0,
                                                                                        "type": "integer"
                                                                                    }
                                                                                },
                                                                                "required": [
                                                                                    "virtualNode",
                                                                                    "weight"
                                                                                ],
                                                                                "type": "object"
                                                                            },
                                                                            "type": "array"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "weightedTargets"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "match": {
                                                                    "description": "The criteria for determining an HTTP request match.",
                                                                    "properties": {
                                                                        "prefix": {
                                                                            "description": "Specifies the path to match requests with. This parameter must always start with\n            <code>/</code>, which by itself matches all requests to the virtual router service name.\n         You can also match for path-based routing of requests. For example, if your virtual router\n         service name is <code>my-service.local</code> and you want the route to match requests to\n            <code>my-service.local/metrics</code>, your prefix should be\n         <code>/metrics</code>.",
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "prefix"
                                                                    ],
                                                                    "type": "object"
                                                                }
                                                            },
                                                            "required": [
                                                                "action",
                                                                "match"
                                                            ],
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "status": {
                                                    "description": "The status of the route.",
                                                    "properties": {
                                                        "status": {
                                                            "description": "The current status for the route.",
                                                            "enum": [
                                                                "ACTIVE",
                                                                "DELETED",
                                                                "INACTIVE"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "status"
                                                    ],
                                                    "type": "object"
                                                },
                                                "virtualRouterName": {
                                                    "description": "The virtual router that the route is associated with.",
                                                    "maxLength": 255,
                                                    "minLength": 1,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "meshName",
                                                "metadata",
                                                "routeName",
                                                "spec",
                                                "status",
                                                "virtualRouterName"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "route"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ConflictException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "ForbiddenException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "InternalServerErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "LimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "487": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "",
                                "properties": {
                                    "clientToken": {
                                        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the\nrequest. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                                        "type": "string"
                                    },
                                    "spec": {
                                        "description": "The new route specification to apply. This overwrites the existing data.",
                                        "properties": {
                                            "httpRoute": {
                                                "description": "The HTTP routing information for the route.",
                                                "properties": {
                                                    "action": {
                                                        "description": "The action to take if a match is determined.",
                                                        "properties": {
                                                            "weightedTargets": {
                                                                "description": "The targets that traffic is routed to when a request matches the route. You can specify\n         one or more targets and their relative weights to distribute traffic with.",
                                                                "items": {
                                                                    "description": "An object representing a target and its relative weight. Traffic is distributed across\n         targets according to their relative weight. For example, a weighted target with a relative\n         weight of 50 receives five times as much traffic as one with a relative weight of\n         10.",
                                                                    "properties": {
                                                                        "virtualNode": {
                                                                            "description": "The virtual node to associate with the weighted target.",
                                                                            "maxLength": 255,
                                                                            "minLength": 1,
                                                                            "type": "string"
                                                                        },
                                                                        "weight": {
                                                                            "description": "The relative weight of the weighted target.",
                                                                            "maximum": 100,
                                                                            "minimum": 0,
                                                                            "type": "integer"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "virtualNode",
                                                                        "weight"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "type": "array"
                                                            }
                                                        },
                                                        "required": [
                                                            "weightedTargets"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "match": {
                                                        "description": "The criteria for determining an HTTP request match.",
                                                        "properties": {
                                                            "prefix": {
                                                                "description": "Specifies the path to match requests with. This parameter must always start with\n            <code>/</code>, which by itself matches all requests to the virtual router service name.\n         You can also match for path-based routing of requests. For example, if your virtual router\n         service name is <code>my-service.local</code> and you want the route to match requests to\n            <code>my-service.local/metrics</code>, your prefix should be\n         <code>/metrics</code>.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "prefix"
                                                        ],
                                                        "type": "object"
                                                    }
                                                },
                                                "required": [
                                                    "action",
                                                    "match"
                                                ],
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "required": [
                                    "spec"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/v20190125/meshes/{meshName}/virtualRouters": {
            "get": {
                "description": "Returns a list of existing virtual routers in a service mesh.",
                "operationId": "ListVirtualRouters",
                "parameters": [
                    {
                        "description": "Pagination limit",
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Pagination token",
                        "in": "query",
                        "name": "nextToken",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "meshName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "",
                                    "properties": {
                                        "nextToken": {
                                            "description": "The <code>nextToken</code> value to include in a future <code>ListVirtualRouters</code>\n         request. When the results of a <code>ListVirtualRouters</code> request exceed\n         <code>limit</code>, you can use this value to retrieve the next page of\n         results. This value is <code>null</code> when there are no more results to\n         return.",
                                            "type": "string"
                                        },
                                        "virtualRouters": {
                                            "description": "The list of existing virtual routers for the specified service mesh.",
                                            "items": {
                                                "description": "An object representing a virtual router returned by a list operation.",
                                                "properties": {
                                                    "arn": {
                                                        "description": "The full Amazon Resource Name (ARN) for the virtual router.",
                                                        "type": "string"
                                                    },
                                                    "meshName": {
                                                        "description": "The name of the service mesh that the virtual router resides in.",
                                                        "maxLength": 255,
                                                        "minLength": 1,
                                                        "type": "string"
                                                    },
                                                    "virtualRouterName": {
                                                        "description": "The name of the virtual router.",
                                                        "maxLength": 255,
                                                        "minLength": 1,
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "arn",
                                                    "meshName",
                                                    "virtualRouterName"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "required": [
                                        "virtualRouters"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ForbiddenException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "InternalServerErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "",
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "put": {
                "description": "<p>Creates a new virtual router within a service mesh.</p>\n         <p>Any inbound traffic that your virtual router expects should be specified as a\n            <code>listener</code>. </p>\n         <p>Virtual routers handle traffic for one or more service names within your mesh. After you\n         create your virtual router, create and associate routes for your virtual router that direct\n         incoming requests to different virtual nodes.</p>",
                "operationId": "CreateVirtualRouter",
                "parameters": [
                    {
                        "in": "path",
                        "name": "meshName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "",
                                    "properties": {
                                        "virtualRouter": {
                                            "description": "The full description of your virtual router following the create call.",
                                            "properties": {
                                                "meshName": {
                                                    "description": "The name of the service mesh that the virtual router resides in.",
                                                    "maxLength": 255,
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "metadata": {
                                                    "description": "The associated metadata for the virtual router.",
                                                    "properties": {
                                                        "arn": {
                                                            "description": "<p>The full Amazon Resource Name (ARN) for the resource.</p>\n         <note>\n            <p>After you create a virtual node, set this value (either the full ARN or the\n            truncated resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>,\n            as the <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's\n            Envoy proxy container in your task definition or pod spec. This is then mapped to the\n               <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>\n            <p>If you require your Envoy stats or tracing to use a different name, you can override\n            the <code>node.cluster</code> value that is set by\n               <code>APPMESH_VIRTUAL_NODE_NAME</code> with the\n               <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>\n         </note>",
                                                            "type": "string"
                                                        },
                                                        "createdAt": {
                                                            "description": "The Unix epoch timestamp in seconds for when the resource was created.",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        },
                                                        "lastUpdatedAt": {
                                                            "description": "The Unix epoch timestamp in seconds for when the resource was last updated.",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        },
                                                        "uid": {
                                                            "description": "The unique identifier for the resource.",
                                                            "type": "string"
                                                        },
                                                        "version": {
                                                            "description": "The version of the resource. Resources are created at version 1, and this version is\n         incremented each time that they're updated.",
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "required": [
                                                        "arn",
                                                        "createdAt",
                                                        "lastUpdatedAt",
                                                        "uid",
                                                        "version"
                                                    ],
                                                    "type": "object"
                                                },
                                                "spec": {
                                                    "description": "The specifications of the virtual router.",
                                                    "properties": {
                                                        "listeners": {
                                                            "description": "The listeners that the virtual router is expected to receive inbound traffic from. Currently only one listener is supported per virtual router.",
                                                            "items": {
                                                                "description": "An object representing a virtual router listener.",
                                                                "properties": {
                                                                    "portMapping": {
                                                                        "description": "An object representing a virtual node or virtual router listener port mapping.",
                                                                        "properties": {
                                                                            "port": {
                                                                                "description": "The port used for the port mapping.",
                                                                                "maximum": 65535,
                                                                                "minimum": 1,
                                                                                "type": "integer"
                                                                            },
                                                                            "protocol": {
                                                                                "description": "The protocol used for the port mapping.",
                                                                                "enum": [
                                                                                    "http",
                                                                                    "tcp"
                                                                                ],
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "port",
                                                                            "protocol"
                                                                        ],
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "portMapping"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        }
                                                    },
                                                    "required": [
                                                        "listeners"
                                                    ],
                                                    "type": "object"
                                                },
                                                "status": {
                                                    "description": "The current status of the virtual router.",
                                                    "properties": {
                                                        "status": {
                                                            "description": "The current status of the virtual router.",
                                                            "enum": [
                                                                "ACTIVE",
                                                                "DELETED",
                                                                "INACTIVE"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "status"
                                                    ],
                                                    "type": "object"
                                                },
                                                "virtualRouterName": {
                                                    "description": "The name of the virtual router.",
                                                    "maxLength": 255,
                                                    "minLength": 1,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "meshName",
                                                "metadata",
                                                "spec",
                                                "status",
                                                "virtualRouterName"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "virtualRouter"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ConflictException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "ForbiddenException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "InternalServerErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "LimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "487": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "",
                                "properties": {
                                    "clientToken": {
                                        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the\nrequest. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                                        "type": "string"
                                    },
                                    "spec": {
                                        "description": "The virtual router specification to apply.",
                                        "properties": {
                                            "listeners": {
                                                "description": "The listeners that the virtual router is expected to receive inbound traffic from. Currently only one listener is supported per virtual router.",
                                                "items": {
                                                    "description": "An object representing a virtual router listener.",
                                                    "properties": {
                                                        "portMapping": {
                                                            "description": "An object representing a virtual node or virtual router listener port mapping.",
                                                            "properties": {
                                                                "port": {
                                                                    "description": "The port used for the port mapping.",
                                                                    "maximum": 65535,
                                                                    "minimum": 1,
                                                                    "type": "integer"
                                                                },
                                                                "protocol": {
                                                                    "description": "The protocol used for the port mapping.",
                                                                    "enum": [
                                                                        "http",
                                                                        "tcp"
                                                                    ],
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "port",
                                                                "protocol"
                                                            ],
                                                            "type": "object"
                                                        }
                                                    },
                                                    "required": [
                                                        "portMapping"
                                                    ],
                                                    "type": "object"
                                                },
                                                "type": "array"
                                            }
                                        },
                                        "required": [
                                            "listeners"
                                        ],
                                        "type": "object"
                                    },
                                    "virtualRouterName": {
                                        "description": "The name to use for the virtual router.",
                                        "maxLength": 255,
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "spec",
                                    "virtualRouterName"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/v20190125/meshes/{meshName}/virtualRouters/{virtualRouterName}": {
            "delete": {
                "description": "<p>Deletes an existing virtual router.</p>\n         <p>You must delete any routes associated with the virtual router before you can delete the\n         router itself.</p>",
                "operationId": "DeleteVirtualRouter",
                "parameters": [
                    {
                        "in": "path",
                        "name": "meshName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "virtualRouterName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "",
                                    "properties": {
                                        "virtualRouter": {
                                            "description": "The virtual router that was deleted.",
                                            "properties": {
                                                "meshName": {
                                                    "description": "The name of the service mesh that the virtual router resides in.",
                                                    "maxLength": 255,
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "metadata": {
                                                    "description": "The associated metadata for the virtual router.",
                                                    "properties": {
                                                        "arn": {
                                                            "description": "<p>The full Amazon Resource Name (ARN) for the resource.</p>\n         <note>\n            <p>After you create a virtual node, set this value (either the full ARN or the\n            truncated resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>,\n            as the <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's\n            Envoy proxy container in your task definition or pod spec. This is then mapped to the\n               <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>\n            <p>If you require your Envoy stats or tracing to use a different name, you can override\n            the <code>node.cluster</code> value that is set by\n               <code>APPMESH_VIRTUAL_NODE_NAME</code> with the\n               <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>\n         </note>",
                                                            "type": "string"
                                                        },
                                                        "createdAt": {
                                                            "description": "The Unix epoch timestamp in seconds for when the resource was created.",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        },
                                                        "lastUpdatedAt": {
                                                            "description": "The Unix epoch timestamp in seconds for when the resource was last updated.",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        },
                                                        "uid": {
                                                            "description": "The unique identifier for the resource.",
                                                            "type": "string"
                                                        },
                                                        "version": {
                                                            "description": "The version of the resource. Resources are created at version 1, and this version is\n         incremented each time that they're updated.",
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "required": [
                                                        "arn",
                                                        "createdAt",
                                                        "lastUpdatedAt",
                                                        "uid",
                                                        "version"
                                                    ],
                                                    "type": "object"
                                                },
                                                "spec": {
                                                    "description": "The specifications of the virtual router.",
                                                    "properties": {
                                                        "listeners": {
                                                            "description": "The listeners that the virtual router is expected to receive inbound traffic from. Currently only one listener is supported per virtual router.",
                                                            "items": {
                                                                "description": "An object representing a virtual router listener.",
                                                                "properties": {
                                                                    "portMapping": {
                                                                        "description": "An object representing a virtual node or virtual router listener port mapping.",
                                                                        "properties": {
                                                                            "port": {
                                                                                "description": "The port used for the port mapping.",
                                                                                "maximum": 65535,
                                                                                "minimum": 1,
                                                                                "type": "integer"
                                                                            },
                                                                            "protocol": {
                                                                                "description": "The protocol used for the port mapping.",
                                                                                "enum": [
                                                                                    "http",
                                                                                    "tcp"
                                                                                ],
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "port",
                                                                            "protocol"
                                                                        ],
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "portMapping"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        }
                                                    },
                                                    "required": [
                                                        "listeners"
                                                    ],
                                                    "type": "object"
                                                },
                                                "status": {
                                                    "description": "The current status of the virtual router.",
                                                    "properties": {
                                                        "status": {
                                                            "description": "The current status of the virtual router.",
                                                            "enum": [
                                                                "ACTIVE",
                                                                "DELETED",
                                                                "INACTIVE"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "status"
                                                    ],
                                                    "type": "object"
                                                },
                                                "virtualRouterName": {
                                                    "description": "The name of the virtual router.",
                                                    "maxLength": 255,
                                                    "minLength": 1,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "meshName",
                                                "metadata",
                                                "spec",
                                                "status",
                                                "virtualRouterName"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "virtualRouter"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ForbiddenException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "InternalServerErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "ResourceInUseException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "",
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "get": {
                "description": "Describes an existing virtual router.",
                "operationId": "DescribeVirtualRouter",
                "parameters": [
                    {
                        "in": "path",
                        "name": "meshName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "virtualRouterName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "",
                                    "properties": {
                                        "virtualRouter": {
                                            "description": "The full description of your virtual router.",
                                            "properties": {
                                                "meshName": {
                                                    "description": "The name of the service mesh that the virtual router resides in.",
                                                    "maxLength": 255,
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "metadata": {
                                                    "description": "The associated metadata for the virtual router.",
                                                    "properties": {
                                                        "arn": {
                                                            "description": "<p>The full Amazon Resource Name (ARN) for the resource.</p>\n         <note>\n            <p>After you create a virtual node, set this value (either the full ARN or the\n            truncated resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>,\n            as the <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's\n            Envoy proxy container in your task definition or pod spec. This is then mapped to the\n               <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>\n            <p>If you require your Envoy stats or tracing to use a different name, you can override\n            the <code>node.cluster</code> value that is set by\n               <code>APPMESH_VIRTUAL_NODE_NAME</code> with the\n               <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>\n         </note>",
                                                            "type": "string"
                                                        },
                                                        "createdAt": {
                                                            "description": "The Unix epoch timestamp in seconds for when the resource was created.",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        },
                                                        "lastUpdatedAt": {
                                                            "description": "The Unix epoch timestamp in seconds for when the resource was last updated.",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        },
                                                        "uid": {
                                                            "description": "The unique identifier for the resource.",
                                                            "type": "string"
                                                        },
                                                        "version": {
                                                            "description": "The version of the resource. Resources are created at version 1, and this version is\n         incremented each time that they're updated.",
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "required": [
                                                        "arn",
                                                        "createdAt",
                                                        "lastUpdatedAt",
                                                        "uid",
                                                        "version"
                                                    ],
                                                    "type": "object"
                                                },
                                                "spec": {
                                                    "description": "The specifications of the virtual router.",
                                                    "properties": {
                                                        "listeners": {
                                                            "description": "The listeners that the virtual router is expected to receive inbound traffic from. Currently only one listener is supported per virtual router.",
                                                            "items": {
                                                                "description": "An object representing a virtual router listener.",
                                                                "properties": {
                                                                    "portMapping": {
                                                                        "description": "An object representing a virtual node or virtual router listener port mapping.",
                                                                        "properties": {
                                                                            "port": {
                                                                                "description": "The port used for the port mapping.",
                                                                                "maximum": 65535,
                                                                                "minimum": 1,
                                                                                "type": "integer"
                                                                            },
                                                                            "protocol": {
                                                                                "description": "The protocol used for the port mapping.",
                                                                                "enum": [
                                                                                    "http",
                                                                                    "tcp"
                                                                                ],
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "port",
                                                                            "protocol"
                                                                        ],
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "portMapping"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        }
                                                    },
                                                    "required": [
                                                        "listeners"
                                                    ],
                                                    "type": "object"
                                                },
                                                "status": {
                                                    "description": "The current status of the virtual router.",
                                                    "properties": {
                                                        "status": {
                                                            "description": "The current status of the virtual router.",
                                                            "enum": [
                                                                "ACTIVE",
                                                                "DELETED",
                                                                "INACTIVE"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "status"
                                                    ],
                                                    "type": "object"
                                                },
                                                "virtualRouterName": {
                                                    "description": "The name of the virtual router.",
                                                    "maxLength": 255,
                                                    "minLength": 1,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "meshName",
                                                "metadata",
                                                "spec",
                                                "status",
                                                "virtualRouterName"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "virtualRouter"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ForbiddenException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "InternalServerErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "",
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "put": {
                "description": "Updates an existing virtual router in a specified service mesh.",
                "operationId": "UpdateVirtualRouter",
                "parameters": [
                    {
                        "in": "path",
                        "name": "meshName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "virtualRouterName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "",
                                    "properties": {
                                        "virtualRouter": {
                                            "description": "A full description of the virtual router that was updated.",
                                            "properties": {
                                                "meshName": {
                                                    "description": "The name of the service mesh that the virtual router resides in.",
                                                    "maxLength": 255,
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "metadata": {
                                                    "description": "The associated metadata for the virtual router.",
                                                    "properties": {
                                                        "arn": {
                                                            "description": "<p>The full Amazon Resource Name (ARN) for the resource.</p>\n         <note>\n            <p>After you create a virtual node, set this value (either the full ARN or the\n            truncated resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>,\n            as the <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's\n            Envoy proxy container in your task definition or pod spec. This is then mapped to the\n               <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>\n            <p>If you require your Envoy stats or tracing to use a different name, you can override\n            the <code>node.cluster</code> value that is set by\n               <code>APPMESH_VIRTUAL_NODE_NAME</code> with the\n               <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>\n         </note>",
                                                            "type": "string"
                                                        },
                                                        "createdAt": {
                                                            "description": "The Unix epoch timestamp in seconds for when the resource was created.",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        },
                                                        "lastUpdatedAt": {
                                                            "description": "The Unix epoch timestamp in seconds for when the resource was last updated.",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        },
                                                        "uid": {
                                                            "description": "The unique identifier for the resource.",
                                                            "type": "string"
                                                        },
                                                        "version": {
                                                            "description": "The version of the resource. Resources are created at version 1, and this version is\n         incremented each time that they're updated.",
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "required": [
                                                        "arn",
                                                        "createdAt",
                                                        "lastUpdatedAt",
                                                        "uid",
                                                        "version"
                                                    ],
                                                    "type": "object"
                                                },
                                                "spec": {
                                                    "description": "The specifications of the virtual router.",
                                                    "properties": {
                                                        "listeners": {
                                                            "description": "The listeners that the virtual router is expected to receive inbound traffic from. Currently only one listener is supported per virtual router.",
                                                            "items": {
                                                                "description": "An object representing a virtual router listener.",
                                                                "properties": {
                                                                    "portMapping": {
                                                                        "description": "An object representing a virtual node or virtual router listener port mapping.",
                                                                        "properties": {
                                                                            "port": {
                                                                                "description": "The port used for the port mapping.",
                                                                                "maximum": 65535,
                                                                                "minimum": 1,
                                                                                "type": "integer"
                                                                            },
                                                                            "protocol": {
                                                                                "description": "The protocol used for the port mapping.",
                                                                                "enum": [
                                                                                    "http",
                                                                                    "tcp"
                                                                                ],
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "port",
                                                                            "protocol"
                                                                        ],
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "portMapping"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        }
                                                    },
                                                    "required": [
                                                        "listeners"
                                                    ],
                                                    "type": "object"
                                                },
                                                "status": {
                                                    "description": "The current status of the virtual router.",
                                                    "properties": {
                                                        "status": {
                                                            "description": "The current status of the virtual router.",
                                                            "enum": [
                                                                "ACTIVE",
                                                                "DELETED",
                                                                "INACTIVE"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "status"
                                                    ],
                                                    "type": "object"
                                                },
                                                "virtualRouterName": {
                                                    "description": "The name of the virtual router.",
                                                    "maxLength": 255,
                                                    "minLength": 1,
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "meshName",
                                                "metadata",
                                                "spec",
                                                "status",
                                                "virtualRouterName"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "virtualRouter"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ConflictException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "ForbiddenException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "InternalServerErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "LimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "487": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "",
                                "properties": {
                                    "clientToken": {
                                        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the\nrequest. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                                        "type": "string"
                                    },
                                    "spec": {
                                        "description": "The new virtual router specification to apply. This overwrites the existing data.",
                                        "properties": {
                                            "listeners": {
                                                "description": "The listeners that the virtual router is expected to receive inbound traffic from. Currently only one listener is supported per virtual router.",
                                                "items": {
                                                    "description": "An object representing a virtual router listener.",
                                                    "properties": {
                                                        "portMapping": {
                                                            "description": "An object representing a virtual node or virtual router listener port mapping.",
                                                            "properties": {
                                                                "port": {
                                                                    "description": "The port used for the port mapping.",
                                                                    "maximum": 65535,
                                                                    "minimum": 1,
                                                                    "type": "integer"
                                                                },
                                                                "protocol": {
                                                                    "description": "The protocol used for the port mapping.",
                                                                    "enum": [
                                                                        "http",
                                                                        "tcp"
                                                                    ],
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "port",
                                                                "protocol"
                                                            ],
                                                            "type": "object"
                                                        }
                                                    },
                                                    "required": [
                                                        "portMapping"
                                                    ],
                                                    "type": "object"
                                                },
                                                "type": "array"
                                            }
                                        },
                                        "required": [
                                            "listeners"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "required": [
                                    "spec"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/v20190125/meshes/{meshName}/virtualServices": {
            "get": {
                "description": "Returns a list of existing virtual services in a service mesh.",
                "operationId": "ListVirtualServices",
                "parameters": [
                    {
                        "description": "Pagination limit",
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Pagination token",
                        "in": "query",
                        "name": "nextToken",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "meshName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "",
                                    "properties": {
                                        "nextToken": {
                                            "description": "The <code>nextToken</code> value to include in a future <code>ListVirtualServices</code>\n         request. When the results of a <code>ListVirtualServices</code> request exceed\n            <code>limit</code>, you can use this value to retrieve the next page of results. This\n         value is <code>null</code> when there are no more results to return.",
                                            "type": "string"
                                        },
                                        "virtualServices": {
                                            "description": "The list of existing virtual services for the specified service mesh.",
                                            "items": {
                                                "description": "An object representing a virtual service returned by a list operation.",
                                                "properties": {
                                                    "arn": {
                                                        "description": "The full Amazon Resource Name (ARN) for the virtual service.",
                                                        "type": "string"
                                                    },
                                                    "meshName": {
                                                        "description": "The name of the service mesh that the virtual service resides in.",
                                                        "maxLength": 255,
                                                        "minLength": 1,
                                                        "type": "string"
                                                    },
                                                    "virtualServiceName": {
                                                        "description": "The name of the virtual service.",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "arn",
                                                    "meshName",
                                                    "virtualServiceName"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "required": [
                                        "virtualServices"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ForbiddenException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "InternalServerErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "",
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "put": {
                "description": "<p>Creates a virtual service within a service mesh.</p>\n         <p>A virtual service is an abstraction of a real service that is either provided by a\n         virtual node directly, or indirectly by means of a virtual router. Dependent services call\n         your virtual service by its <code>virtualServiceName</code>, and those requests are routed\n         to the virtual node or virtual router that is specified as the provider for the virtual\n         service.</p>",
                "operationId": "CreateVirtualService",
                "parameters": [
                    {
                        "in": "path",
                        "name": "meshName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "",
                                    "properties": {
                                        "virtualService": {
                                            "description": "The full description of your virtual service following the create call.",
                                            "properties": {
                                                "meshName": {
                                                    "description": "The name of the service mesh that the virtual service resides in.",
                                                    "maxLength": 255,
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "metadata": {
                                                    "description": "An object representing metadata for a resource.",
                                                    "properties": {
                                                        "arn": {
                                                            "description": "<p>The full Amazon Resource Name (ARN) for the resource.</p>\n         <note>\n            <p>After you create a virtual node, set this value (either the full ARN or the\n            truncated resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>,\n            as the <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's\n            Envoy proxy container in your task definition or pod spec. This is then mapped to the\n               <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>\n            <p>If you require your Envoy stats or tracing to use a different name, you can override\n            the <code>node.cluster</code> value that is set by\n               <code>APPMESH_VIRTUAL_NODE_NAME</code> with the\n               <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>\n         </note>",
                                                            "type": "string"
                                                        },
                                                        "createdAt": {
                                                            "description": "The Unix epoch timestamp in seconds for when the resource was created.",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        },
                                                        "lastUpdatedAt": {
                                                            "description": "The Unix epoch timestamp in seconds for when the resource was last updated.",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        },
                                                        "uid": {
                                                            "description": "The unique identifier for the resource.",
                                                            "type": "string"
                                                        },
                                                        "version": {
                                                            "description": "The version of the resource. Resources are created at version 1, and this version is\n         incremented each time that they're updated.",
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "required": [
                                                        "arn",
                                                        "createdAt",
                                                        "lastUpdatedAt",
                                                        "uid",
                                                        "version"
                                                    ],
                                                    "type": "object"
                                                },
                                                "spec": {
                                                    "description": "The specifications of the virtual service.",
                                                    "properties": {
                                                        "provider": {
                                                            "description": "The App Mesh object that is acting as the provider for a virtual service. You can specify\n         a single virtual node or virtual router.",
                                                            "properties": {
                                                                "virtualNode": {
                                                                    "description": "The virtual node associated with a virtual service.",
                                                                    "properties": {
                                                                        "virtualNodeName": {
                                                                            "description": "The name of the virtual node that is acting as a service provider.",
                                                                            "maxLength": 255,
                                                                            "minLength": 1,
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "virtualNodeName"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "virtualRouter": {
                                                                    "description": "The virtual router associated with a virtual service.",
                                                                    "properties": {
                                                                        "virtualRouterName": {
                                                                            "description": "The name of the virtual router that is acting as a service provider.",
                                                                            "maxLength": 255,
                                                                            "minLength": 1,
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "virtualRouterName"
                                                                    ],
                                                                    "type": "object"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "status": {
                                                    "description": "The current status of the virtual service.",
                                                    "properties": {
                                                        "status": {
                                                            "description": "The current status of the virtual service.",
                                                            "enum": [
                                                                "ACTIVE",
                                                                "DELETED",
                                                                "INACTIVE"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "status"
                                                    ],
                                                    "type": "object"
                                                },
                                                "virtualServiceName": {
                                                    "description": "The name of the virtual service.",
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "meshName",
                                                "metadata",
                                                "spec",
                                                "status",
                                                "virtualServiceName"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "virtualService"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ConflictException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "ForbiddenException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "InternalServerErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "LimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "487": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "",
                                "properties": {
                                    "clientToken": {
                                        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the\nrequest. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                                        "type": "string"
                                    },
                                    "spec": {
                                        "description": "The virtual service specification to apply.",
                                        "properties": {
                                            "provider": {
                                                "description": "The App Mesh object that is acting as the provider for a virtual service. You can specify\n         a single virtual node or virtual router.",
                                                "properties": {
                                                    "virtualNode": {
                                                        "description": "The virtual node associated with a virtual service.",
                                                        "properties": {
                                                            "virtualNodeName": {
                                                                "description": "The name of the virtual node that is acting as a service provider.",
                                                                "maxLength": 255,
                                                                "minLength": 1,
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "virtualNodeName"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "virtualRouter": {
                                                        "description": "The virtual router associated with a virtual service.",
                                                        "properties": {
                                                            "virtualRouterName": {
                                                                "description": "The name of the virtual router that is acting as a service provider.",
                                                                "maxLength": 255,
                                                                "minLength": 1,
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "virtualRouterName"
                                                        ],
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "virtualServiceName": {
                                        "description": "The name to use for the virtual service.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "spec",
                                    "virtualServiceName"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        },
        "/v20190125/meshes/{meshName}/virtualServices/{virtualServiceName}": {
            "delete": {
                "description": "Deletes an existing virtual service.",
                "operationId": "DeleteVirtualService",
                "parameters": [
                    {
                        "in": "path",
                        "name": "meshName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "virtualServiceName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "",
                                    "properties": {
                                        "virtualService": {
                                            "description": "The virtual service that was deleted.",
                                            "properties": {
                                                "meshName": {
                                                    "description": "The name of the service mesh that the virtual service resides in.",
                                                    "maxLength": 255,
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "metadata": {
                                                    "description": "An object representing metadata for a resource.",
                                                    "properties": {
                                                        "arn": {
                                                            "description": "<p>The full Amazon Resource Name (ARN) for the resource.</p>\n         <note>\n            <p>After you create a virtual node, set this value (either the full ARN or the\n            truncated resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>,\n            as the <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's\n            Envoy proxy container in your task definition or pod spec. This is then mapped to the\n               <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>\n            <p>If you require your Envoy stats or tracing to use a different name, you can override\n            the <code>node.cluster</code> value that is set by\n               <code>APPMESH_VIRTUAL_NODE_NAME</code> with the\n               <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>\n         </note>",
                                                            "type": "string"
                                                        },
                                                        "createdAt": {
                                                            "description": "The Unix epoch timestamp in seconds for when the resource was created.",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        },
                                                        "lastUpdatedAt": {
                                                            "description": "The Unix epoch timestamp in seconds for when the resource was last updated.",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        },
                                                        "uid": {
                                                            "description": "The unique identifier for the resource.",
                                                            "type": "string"
                                                        },
                                                        "version": {
                                                            "description": "The version of the resource. Resources are created at version 1, and this version is\n         incremented each time that they're updated.",
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "required": [
                                                        "arn",
                                                        "createdAt",
                                                        "lastUpdatedAt",
                                                        "uid",
                                                        "version"
                                                    ],
                                                    "type": "object"
                                                },
                                                "spec": {
                                                    "description": "The specifications of the virtual service.",
                                                    "properties": {
                                                        "provider": {
                                                            "description": "The App Mesh object that is acting as the provider for a virtual service. You can specify\n         a single virtual node or virtual router.",
                                                            "properties": {
                                                                "virtualNode": {
                                                                    "description": "The virtual node associated with a virtual service.",
                                                                    "properties": {
                                                                        "virtualNodeName": {
                                                                            "description": "The name of the virtual node that is acting as a service provider.",
                                                                            "maxLength": 255,
                                                                            "minLength": 1,
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "virtualNodeName"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "virtualRouter": {
                                                                    "description": "The virtual router associated with a virtual service.",
                                                                    "properties": {
                                                                        "virtualRouterName": {
                                                                            "description": "The name of the virtual router that is acting as a service provider.",
                                                                            "maxLength": 255,
                                                                            "minLength": 1,
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "virtualRouterName"
                                                                    ],
                                                                    "type": "object"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "status": {
                                                    "description": "The current status of the virtual service.",
                                                    "properties": {
                                                        "status": {
                                                            "description": "The current status of the virtual service.",
                                                            "enum": [
                                                                "ACTIVE",
                                                                "DELETED",
                                                                "INACTIVE"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "status"
                                                    ],
                                                    "type": "object"
                                                },
                                                "virtualServiceName": {
                                                    "description": "The name of the virtual service.",
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "meshName",
                                                "metadata",
                                                "spec",
                                                "status",
                                                "virtualServiceName"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "virtualService"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ForbiddenException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "InternalServerErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "",
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "get": {
                "description": "Describes an existing virtual service.",
                "operationId": "DescribeVirtualService",
                "parameters": [
                    {
                        "in": "path",
                        "name": "meshName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "virtualServiceName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "",
                                    "properties": {
                                        "virtualService": {
                                            "description": "The full description of your virtual service.",
                                            "properties": {
                                                "meshName": {
                                                    "description": "The name of the service mesh that the virtual service resides in.",
                                                    "maxLength": 255,
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "metadata": {
                                                    "description": "An object representing metadata for a resource.",
                                                    "properties": {
                                                        "arn": {
                                                            "description": "<p>The full Amazon Resource Name (ARN) for the resource.</p>\n         <note>\n            <p>After you create a virtual node, set this value (either the full ARN or the\n            truncated resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>,\n            as the <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's\n            Envoy proxy container in your task definition or pod spec. This is then mapped to the\n               <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>\n            <p>If you require your Envoy stats or tracing to use a different name, you can override\n            the <code>node.cluster</code> value that is set by\n               <code>APPMESH_VIRTUAL_NODE_NAME</code> with the\n               <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>\n         </note>",
                                                            "type": "string"
                                                        },
                                                        "createdAt": {
                                                            "description": "The Unix epoch timestamp in seconds for when the resource was created.",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        },
                                                        "lastUpdatedAt": {
                                                            "description": "The Unix epoch timestamp in seconds for when the resource was last updated.",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        },
                                                        "uid": {
                                                            "description": "The unique identifier for the resource.",
                                                            "type": "string"
                                                        },
                                                        "version": {
                                                            "description": "The version of the resource. Resources are created at version 1, and this version is\n         incremented each time that they're updated.",
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "required": [
                                                        "arn",
                                                        "createdAt",
                                                        "lastUpdatedAt",
                                                        "uid",
                                                        "version"
                                                    ],
                                                    "type": "object"
                                                },
                                                "spec": {
                                                    "description": "The specifications of the virtual service.",
                                                    "properties": {
                                                        "provider": {
                                                            "description": "The App Mesh object that is acting as the provider for a virtual service. You can specify\n         a single virtual node or virtual router.",
                                                            "properties": {
                                                                "virtualNode": {
                                                                    "description": "The virtual node associated with a virtual service.",
                                                                    "properties": {
                                                                        "virtualNodeName": {
                                                                            "description": "The name of the virtual node that is acting as a service provider.",
                                                                            "maxLength": 255,
                                                                            "minLength": 1,
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "virtualNodeName"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "virtualRouter": {
                                                                    "description": "The virtual router associated with a virtual service.",
                                                                    "properties": {
                                                                        "virtualRouterName": {
                                                                            "description": "The name of the virtual router that is acting as a service provider.",
                                                                            "maxLength": 255,
                                                                            "minLength": 1,
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "virtualRouterName"
                                                                    ],
                                                                    "type": "object"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "status": {
                                                    "description": "The current status of the virtual service.",
                                                    "properties": {
                                                        "status": {
                                                            "description": "The current status of the virtual service.",
                                                            "enum": [
                                                                "ACTIVE",
                                                                "DELETED",
                                                                "INACTIVE"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "status"
                                                    ],
                                                    "type": "object"
                                                },
                                                "virtualServiceName": {
                                                    "description": "The name of the virtual service.",
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "meshName",
                                                "metadata",
                                                "spec",
                                                "status",
                                                "virtualServiceName"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "virtualService"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ForbiddenException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "InternalServerErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "",
                                "properties": {},
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            },
            "parameters": [
                {
                    "in": "query",
                    "name": "Action",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "query",
                    "name": "Version",
                    "required": true,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Content-Sha256",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Date",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Algorithm",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Credential",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Security-Token",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-Signature",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "in": "header",
                    "name": "X-Amz-SignedHeaders",
                    "required": false,
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "put": {
                "description": "Updates an existing virtual service in a specified service mesh.",
                "operationId": "UpdateVirtualService",
                "parameters": [
                    {
                        "in": "path",
                        "name": "meshName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "virtualServiceName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "",
                                    "properties": {
                                        "virtualService": {
                                            "description": "A full description of the virtual service that was updated.",
                                            "properties": {
                                                "meshName": {
                                                    "description": "The name of the service mesh that the virtual service resides in.",
                                                    "maxLength": 255,
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "metadata": {
                                                    "description": "An object representing metadata for a resource.",
                                                    "properties": {
                                                        "arn": {
                                                            "description": "<p>The full Amazon Resource Name (ARN) for the resource.</p>\n         <note>\n            <p>After you create a virtual node, set this value (either the full ARN or the\n            truncated resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>,\n            as the <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's\n            Envoy proxy container in your task definition or pod spec. This is then mapped to the\n               <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>\n            <p>If you require your Envoy stats or tracing to use a different name, you can override\n            the <code>node.cluster</code> value that is set by\n               <code>APPMESH_VIRTUAL_NODE_NAME</code> with the\n               <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>\n         </note>",
                                                            "type": "string"
                                                        },
                                                        "createdAt": {
                                                            "description": "The Unix epoch timestamp in seconds for when the resource was created.",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        },
                                                        "lastUpdatedAt": {
                                                            "description": "The Unix epoch timestamp in seconds for when the resource was last updated.",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        },
                                                        "uid": {
                                                            "description": "The unique identifier for the resource.",
                                                            "type": "string"
                                                        },
                                                        "version": {
                                                            "description": "The version of the resource. Resources are created at version 1, and this version is\n         incremented each time that they're updated.",
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "required": [
                                                        "arn",
                                                        "createdAt",
                                                        "lastUpdatedAt",
                                                        "uid",
                                                        "version"
                                                    ],
                                                    "type": "object"
                                                },
                                                "spec": {
                                                    "description": "The specifications of the virtual service.",
                                                    "properties": {
                                                        "provider": {
                                                            "description": "The App Mesh object that is acting as the provider for a virtual service. You can specify\n         a single virtual node or virtual router.",
                                                            "properties": {
                                                                "virtualNode": {
                                                                    "description": "The virtual node associated with a virtual service.",
                                                                    "properties": {
                                                                        "virtualNodeName": {
                                                                            "description": "The name of the virtual node that is acting as a service provider.",
                                                                            "maxLength": 255,
                                                                            "minLength": 1,
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "virtualNodeName"
                                                                    ],
                                                                    "type": "object"
                                                                },
                                                                "virtualRouter": {
                                                                    "description": "The virtual router associated with a virtual service.",
                                                                    "properties": {
                                                                        "virtualRouterName": {
                                                                            "description": "The name of the virtual router that is acting as a service provider.",
                                                                            "maxLength": 255,
                                                                            "minLength": 1,
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "required": [
                                                                        "virtualRouterName"
                                                                    ],
                                                                    "type": "object"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                },
                                                "status": {
                                                    "description": "The current status of the virtual service.",
                                                    "properties": {
                                                        "status": {
                                                            "description": "The current status of the virtual service.",
                                                            "enum": [
                                                                "ACTIVE",
                                                                "DELETED",
                                                                "INACTIVE"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "status"
                                                    ],
                                                    "type": "object"
                                                },
                                                "virtualServiceName": {
                                                    "description": "The name of the virtual service.",
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "meshName",
                                                "metadata",
                                                "spec",
                                                "status",
                                                "virtualServiceName"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "virtualService"
                                    ],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "480": {
                        "description": "BadRequestException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "481": {
                        "description": "ConflictException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "482": {
                        "description": "ForbiddenException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "483": {
                        "description": "InternalServerErrorException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "484": {
                        "description": "LimitExceededException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "485": {
                        "description": "NotFoundException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "486": {
                        "description": "ServiceUnavailableException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "487": {
                        "description": "TooManyRequestsException",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "",
                                "properties": {
                                    "clientToken": {
                                        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the\nrequest. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                                        "type": "string"
                                    },
                                    "spec": {
                                        "description": "The new virtual service specification to apply. This overwrites the existing\n         data.",
                                        "properties": {
                                            "provider": {
                                                "description": "The App Mesh object that is acting as the provider for a virtual service. You can specify\n         a single virtual node or virtual router.",
                                                "properties": {
                                                    "virtualNode": {
                                                        "description": "The virtual node associated with a virtual service.",
                                                        "properties": {
                                                            "virtualNodeName": {
                                                                "description": "The name of the virtual node that is acting as a service provider.",
                                                                "maxLength": 255,
                                                                "minLength": 1,
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "virtualNodeName"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "virtualRouter": {
                                                        "description": "The virtual router associated with a virtual service.",
                                                        "properties": {
                                                            "virtualRouterName": {
                                                                "description": "The name of the virtual router that is acting as a service provider.",
                                                                "maxLength": 255,
                                                                "minLength": 1,
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "virtualRouterName"
                                                        ],
                                                        "type": "object"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "required": [
                                    "spec"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                }
            }
        }
    },
    "components": {
        "schemas": {
            "Arn": {
                "type": "string"
            },
            "Backend": {
                "description": "An object representing the backends that a virtual node is expected to send outbound\n         traffic to. ",
                "properties": {
                    "virtualService": {
                        "description": "Specifies a virtual service to use as a backend for a virtual node. ",
                        "properties": {
                            "virtualServiceName": {
                                "description": "The name of the virtual service that is acting as a virtual node backend.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "virtualServiceName"
                        ],
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "Backends": {
                "items": {
                    "description": "An object representing the backends that a virtual node is expected to send outbound\n         traffic to. ",
                    "properties": {
                        "virtualService": {
                            "description": "Specifies a virtual service to use as a backend for a virtual node. ",
                            "properties": {
                                "virtualServiceName": {
                                    "description": "The name of the virtual service that is acting as a virtual node backend.",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "virtualServiceName"
                            ],
                            "type": "object"
                        }
                    },
                    "type": "object"
                },
                "type": "array"
            },
            "BadRequestException": {},
            "ConflictException": {},
            "CreateMeshInput": {
                "description": "",
                "properties": {
                    "clientToken": {
                        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the\nrequest. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                        "type": "string"
                    },
                    "meshName": {
                        "description": "The name to use for the service mesh.",
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "meshName"
                ],
                "type": "object"
            },
            "CreateMeshOutput": {
                "description": "",
                "properties": {
                    "mesh": {
                        "description": "The full description of your service mesh following the create call.",
                        "properties": {
                            "meshName": {
                                "description": "The name of the service mesh.",
                                "maxLength": 255,
                                "minLength": 1,
                                "type": "string"
                            },
                            "metadata": {
                                "description": "The associated metadata for the service mesh.",
                                "properties": {
                                    "arn": {
                                        "description": "<p>The full Amazon Resource Name (ARN) for the resource.</p>\n         <note>\n            <p>After you create a virtual node, set this value (either the full ARN or the\n            truncated resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>,\n            as the <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's\n            Envoy proxy container in your task definition or pod spec. This is then mapped to the\n               <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>\n            <p>If you require your Envoy stats or tracing to use a different name, you can override\n            the <code>node.cluster</code> value that is set by\n               <code>APPMESH_VIRTUAL_NODE_NAME</code> with the\n               <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>\n         </note>",
                                        "type": "string"
                                    },
                                    "createdAt": {
                                        "description": "The Unix epoch timestamp in seconds for when the resource was created.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "lastUpdatedAt": {
                                        "description": "The Unix epoch timestamp in seconds for when the resource was last updated.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "uid": {
                                        "description": "The unique identifier for the resource.",
                                        "type": "string"
                                    },
                                    "version": {
                                        "description": "The version of the resource. Resources are created at version 1, and this version is\n         incremented each time that they're updated.",
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "arn",
                                    "createdAt",
                                    "lastUpdatedAt",
                                    "uid",
                                    "version"
                                ],
                                "type": "object"
                            },
                            "status": {
                                "description": "The status of the service mesh.",
                                "properties": {
                                    "status": {
                                        "description": "The current mesh status.",
                                        "enum": [
                                            "ACTIVE",
                                            "DELETED",
                                            "INACTIVE"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "required": [
                            "meshName",
                            "metadata",
                            "status"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "mesh"
                ],
                "type": "object"
            },
            "CreateRouteInput": {
                "description": "",
                "properties": {
                    "clientToken": {
                        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the\nrequest. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                        "type": "string"
                    },
                    "routeName": {
                        "description": "The name to use for the route.",
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string"
                    },
                    "spec": {
                        "description": "The route specification to apply.",
                        "properties": {
                            "httpRoute": {
                                "description": "The HTTP routing information for the route.",
                                "properties": {
                                    "action": {
                                        "description": "The action to take if a match is determined.",
                                        "properties": {
                                            "weightedTargets": {
                                                "description": "The targets that traffic is routed to when a request matches the route. You can specify\n         one or more targets and their relative weights to distribute traffic with.",
                                                "items": {
                                                    "description": "An object representing a target and its relative weight. Traffic is distributed across\n         targets according to their relative weight. For example, a weighted target with a relative\n         weight of 50 receives five times as much traffic as one with a relative weight of\n         10.",
                                                    "properties": {
                                                        "virtualNode": {
                                                            "description": "The virtual node to associate with the weighted target.",
                                                            "maxLength": 255,
                                                            "minLength": 1,
                                                            "type": "string"
                                                        },
                                                        "weight": {
                                                            "description": "The relative weight of the weighted target.",
                                                            "maximum": 100,
                                                            "minimum": 0,
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "required": [
                                                        "virtualNode",
                                                        "weight"
                                                    ],
                                                    "type": "object"
                                                },
                                                "type": "array"
                                            }
                                        },
                                        "required": [
                                            "weightedTargets"
                                        ],
                                        "type": "object"
                                    },
                                    "match": {
                                        "description": "The criteria for determining an HTTP request match.",
                                        "properties": {
                                            "prefix": {
                                                "description": "Specifies the path to match requests with. This parameter must always start with\n            <code>/</code>, which by itself matches all requests to the virtual router service name.\n         You can also match for path-based routing of requests. For example, if your virtual router\n         service name is <code>my-service.local</code> and you want the route to match requests to\n            <code>my-service.local/metrics</code>, your prefix should be\n         <code>/metrics</code>.",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "prefix"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "required": [
                                    "action",
                                    "match"
                                ],
                                "type": "object"
                            }
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "routeName",
                    "spec"
                ],
                "type": "object"
            },
            "CreateRouteOutput": {
                "description": "",
                "properties": {
                    "route": {
                        "description": "The full description of your mesh following the create call.",
                        "properties": {
                            "meshName": {
                                "description": "The name of the service mesh that the route resides in.",
                                "maxLength": 255,
                                "minLength": 1,
                                "type": "string"
                            },
                            "metadata": {
                                "description": "The associated metadata for the route.",
                                "properties": {
                                    "arn": {
                                        "description": "<p>The full Amazon Resource Name (ARN) for the resource.</p>\n         <note>\n            <p>After you create a virtual node, set this value (either the full ARN or the\n            truncated resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>,\n            as the <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's\n            Envoy proxy container in your task definition or pod spec. This is then mapped to the\n               <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>\n            <p>If you require your Envoy stats or tracing to use a different name, you can override\n            the <code>node.cluster</code> value that is set by\n               <code>APPMESH_VIRTUAL_NODE_NAME</code> with the\n               <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>\n         </note>",
                                        "type": "string"
                                    },
                                    "createdAt": {
                                        "description": "The Unix epoch timestamp in seconds for when the resource was created.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "lastUpdatedAt": {
                                        "description": "The Unix epoch timestamp in seconds for when the resource was last updated.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "uid": {
                                        "description": "The unique identifier for the resource.",
                                        "type": "string"
                                    },
                                    "version": {
                                        "description": "The version of the resource. Resources are created at version 1, and this version is\n         incremented each time that they're updated.",
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "arn",
                                    "createdAt",
                                    "lastUpdatedAt",
                                    "uid",
                                    "version"
                                ],
                                "type": "object"
                            },
                            "routeName": {
                                "description": "The name of the route.",
                                "maxLength": 255,
                                "minLength": 1,
                                "type": "string"
                            },
                            "spec": {
                                "description": "The specifications of the route.",
                                "properties": {
                                    "httpRoute": {
                                        "description": "The HTTP routing information for the route.",
                                        "properties": {
                                            "action": {
                                                "description": "The action to take if a match is determined.",
                                                "properties": {
                                                    "weightedTargets": {
                                                        "description": "The targets that traffic is routed to when a request matches the route. You can specify\n         one or more targets and their relative weights to distribute traffic with.",
                                                        "items": {
                                                            "description": "An object representing a target and its relative weight. Traffic is distributed across\n         targets according to their relative weight. For example, a weighted target with a relative\n         weight of 50 receives five times as much traffic as one with a relative weight of\n         10.",
                                                            "properties": {
                                                                "virtualNode": {
                                                                    "description": "The virtual node to associate with the weighted target.",
                                                                    "maxLength": 255,
                                                                    "minLength": 1,
                                                                    "type": "string"
                                                                },
                                                                "weight": {
                                                                    "description": "The relative weight of the weighted target.",
                                                                    "maximum": 100,
                                                                    "minimum": 0,
                                                                    "type": "integer"
                                                                }
                                                            },
                                                            "required": [
                                                                "virtualNode",
                                                                "weight"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    }
                                                },
                                                "required": [
                                                    "weightedTargets"
                                                ],
                                                "type": "object"
                                            },
                                            "match": {
                                                "description": "The criteria for determining an HTTP request match.",
                                                "properties": {
                                                    "prefix": {
                                                        "description": "Specifies the path to match requests with. This parameter must always start with\n            <code>/</code>, which by itself matches all requests to the virtual router service name.\n         You can also match for path-based routing of requests. For example, if your virtual router\n         service name is <code>my-service.local</code> and you want the route to match requests to\n            <code>my-service.local/metrics</code>, your prefix should be\n         <code>/metrics</code>.",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "prefix"
                                                ],
                                                "type": "object"
                                            }
                                        },
                                        "required": [
                                            "action",
                                            "match"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "status": {
                                "description": "The status of the route.",
                                "properties": {
                                    "status": {
                                        "description": "The current status for the route.",
                                        "enum": [
                                            "ACTIVE",
                                            "DELETED",
                                            "INACTIVE"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "status"
                                ],
                                "type": "object"
                            },
                            "virtualRouterName": {
                                "description": "The virtual router that the route is associated with.",
                                "maxLength": 255,
                                "minLength": 1,
                                "type": "string"
                            }
                        },
                        "required": [
                            "meshName",
                            "metadata",
                            "routeName",
                            "spec",
                            "status",
                            "virtualRouterName"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "route"
                ],
                "type": "object"
            },
            "CreateVirtualNodeInput": {
                "description": "",
                "properties": {
                    "clientToken": {
                        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the\nrequest. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                        "type": "string"
                    },
                    "spec": {
                        "description": "The virtual node specification to apply.",
                        "properties": {
                            "backends": {
                                "description": "The backends that the virtual node is expected to send outbound traffic to.",
                                "items": {
                                    "description": "An object representing the backends that a virtual node is expected to send outbound\n         traffic to. ",
                                    "properties": {
                                        "virtualService": {
                                            "description": "Specifies a virtual service to use as a backend for a virtual node. ",
                                            "properties": {
                                                "virtualServiceName": {
                                                    "description": "The name of the virtual service that is acting as a virtual node backend.",
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "virtualServiceName"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "listeners": {
                                "description": "The listeners that the virtual node is expected to receive inbound traffic from. Currently only one listener is supported per virtual node.",
                                "items": {
                                    "description": "An object representing a listener for a virtual node.",
                                    "properties": {
                                        "healthCheck": {
                                            "description": "The health check information for the listener.",
                                            "properties": {
                                                "healthyThreshold": {
                                                    "description": "The number of consecutive successful health checks that must occur before declaring\n         listener healthy.",
                                                    "maximum": 10,
                                                    "minimum": 2,
                                                    "type": "integer"
                                                },
                                                "intervalMillis": {
                                                    "description": "The time period in milliseconds between each health check execution.",
                                                    "maximum": 300000,
                                                    "minimum": 5000,
                                                    "type": "integer"
                                                },
                                                "path": {
                                                    "description": "The destination path for the health check request. This is required only if the\n         specified protocol is HTTP. If the protocol is TCP, this parameter is ignored.",
                                                    "type": "string"
                                                },
                                                "port": {
                                                    "description": "The destination port for the health check request. This port must match the port defined\n         in the <a>PortMapping</a> for the listener.",
                                                    "maximum": 65535,
                                                    "minimum": 1,
                                                    "type": "integer"
                                                },
                                                "protocol": {
                                                    "description": "The protocol for the health check request.",
                                                    "enum": [
                                                        "http",
                                                        "tcp"
                                                    ],
                                                    "type": "string"
                                                },
                                                "timeoutMillis": {
                                                    "description": "The amount of time to wait when receiving a response from the health check, in\n         milliseconds.",
                                                    "maximum": 60000,
                                                    "minimum": 2000,
                                                    "type": "integer"
                                                },
                                                "unhealthyThreshold": {
                                                    "description": "The number of consecutive failed health checks that must occur before declaring a\n         virtual node unhealthy. ",
                                                    "maximum": 10,
                                                    "minimum": 2,
                                                    "type": "integer"
                                                }
                                            },
                                            "required": [
                                                "healthyThreshold",
                                                "intervalMillis",
                                                "protocol",
                                                "timeoutMillis",
                                                "unhealthyThreshold"
                                            ],
                                            "type": "object"
                                        },
                                        "portMapping": {
                                            "description": "The port mapping information for the listener.",
                                            "properties": {
                                                "port": {
                                                    "description": "The port used for the port mapping.",
                                                    "maximum": 65535,
                                                    "minimum": 1,
                                                    "type": "integer"
                                                },
                                                "protocol": {
                                                    "description": "The protocol used for the port mapping.",
                                                    "enum": [
                                                        "http",
                                                        "tcp"
                                                    ],
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "port",
                                                "protocol"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "portMapping"
                                    ],
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "serviceDiscovery": {
                                "description": "The service discovery information for the virtual node.",
                                "properties": {
                                    "dns": {
                                        "description": "Specifies the DNS information for the virtual node.",
                                        "properties": {
                                            "hostname": {
                                                "description": "Specifies the DNS service discovery hostname for the virtual node. ",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "hostname"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "type": "object"
                    },
                    "virtualNodeName": {
                        "description": "The name to use for the virtual node.",
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "spec",
                    "virtualNodeName"
                ],
                "type": "object"
            },
            "CreateVirtualNodeOutput": {
                "description": "",
                "properties": {
                    "virtualNode": {
                        "description": "The full description of your virtual node following the create call.",
                        "properties": {
                            "meshName": {
                                "description": "The name of the service mesh that the virtual node resides in.",
                                "maxLength": 255,
                                "minLength": 1,
                                "type": "string"
                            },
                            "metadata": {
                                "description": "The associated metadata for the virtual node.",
                                "properties": {
                                    "arn": {
                                        "description": "<p>The full Amazon Resource Name (ARN) for the resource.</p>\n         <note>\n            <p>After you create a virtual node, set this value (either the full ARN or the\n            truncated resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>,\n            as the <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's\n            Envoy proxy container in your task definition or pod spec. This is then mapped to the\n               <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>\n            <p>If you require your Envoy stats or tracing to use a different name, you can override\n            the <code>node.cluster</code> value that is set by\n               <code>APPMESH_VIRTUAL_NODE_NAME</code> with the\n               <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>\n         </note>",
                                        "type": "string"
                                    },
                                    "createdAt": {
                                        "description": "The Unix epoch timestamp in seconds for when the resource was created.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "lastUpdatedAt": {
                                        "description": "The Unix epoch timestamp in seconds for when the resource was last updated.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "uid": {
                                        "description": "The unique identifier for the resource.",
                                        "type": "string"
                                    },
                                    "version": {
                                        "description": "The version of the resource. Resources are created at version 1, and this version is\n         incremented each time that they're updated.",
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "arn",
                                    "createdAt",
                                    "lastUpdatedAt",
                                    "uid",
                                    "version"
                                ],
                                "type": "object"
                            },
                            "spec": {
                                "description": "The specifications of the virtual node.",
                                "properties": {
                                    "backends": {
                                        "description": "The backends that the virtual node is expected to send outbound traffic to.",
                                        "items": {
                                            "description": "An object representing the backends that a virtual node is expected to send outbound\n         traffic to. ",
                                            "properties": {
                                                "virtualService": {
                                                    "description": "Specifies a virtual service to use as a backend for a virtual node. ",
                                                    "properties": {
                                                        "virtualServiceName": {
                                                            "description": "The name of the virtual service that is acting as a virtual node backend.",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "virtualServiceName"
                                                    ],
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "listeners": {
                                        "description": "The listeners that the virtual node is expected to receive inbound traffic from. Currently only one listener is supported per virtual node.",
                                        "items": {
                                            "description": "An object representing a listener for a virtual node.",
                                            "properties": {
                                                "healthCheck": {
                                                    "description": "The health check information for the listener.",
                                                    "properties": {
                                                        "healthyThreshold": {
                                                            "description": "The number of consecutive successful health checks that must occur before declaring\n         listener healthy.",
                                                            "maximum": 10,
                                                            "minimum": 2,
                                                            "type": "integer"
                                                        },
                                                        "intervalMillis": {
                                                            "description": "The time period in milliseconds between each health check execution.",
                                                            "maximum": 300000,
                                                            "minimum": 5000,
                                                            "type": "integer"
                                                        },
                                                        "path": {
                                                            "description": "The destination path for the health check request. This is required only if the\n         specified protocol is HTTP. If the protocol is TCP, this parameter is ignored.",
                                                            "type": "string"
                                                        },
                                                        "port": {
                                                            "description": "The destination port for the health check request. This port must match the port defined\n         in the <a>PortMapping</a> for the listener.",
                                                            "maximum": 65535,
                                                            "minimum": 1,
                                                            "type": "integer"
                                                        },
                                                        "protocol": {
                                                            "description": "The protocol for the health check request.",
                                                            "enum": [
                                                                "http",
                                                                "tcp"
                                                            ],
                                                            "type": "string"
                                                        },
                                                        "timeoutMillis": {
                                                            "description": "The amount of time to wait when receiving a response from the health check, in\n         milliseconds.",
                                                            "maximum": 60000,
                                                            "minimum": 2000,
                                                            "type": "integer"
                                                        },
                                                        "unhealthyThreshold": {
                                                            "description": "The number of consecutive failed health checks that must occur before declaring a\n         virtual node unhealthy. ",
                                                            "maximum": 10,
                                                            "minimum": 2,
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "required": [
                                                        "healthyThreshold",
                                                        "intervalMillis",
                                                        "protocol",
                                                        "timeoutMillis",
                                                        "unhealthyThreshold"
                                                    ],
                                                    "type": "object"
                                                },
                                                "portMapping": {
                                                    "description": "The port mapping information for the listener.",
                                                    "properties": {
                                                        "port": {
                                                            "description": "The port used for the port mapping.",
                                                            "maximum": 65535,
                                                            "minimum": 1,
                                                            "type": "integer"
                                                        },
                                                        "protocol": {
                                                            "description": "The protocol used for the port mapping.",
                                                            "enum": [
                                                                "http",
                                                                "tcp"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "port",
                                                        "protocol"
                                                    ],
                                                    "type": "object"
                                                }
                                            },
                                            "required": [
                                                "portMapping"
                                            ],
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "serviceDiscovery": {
                                        "description": "The service discovery information for the virtual node.",
                                        "properties": {
                                            "dns": {
                                                "description": "Specifies the DNS information for the virtual node.",
                                                "properties": {
                                                    "hostname": {
                                                        "description": "Specifies the DNS service discovery hostname for the virtual node. ",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "hostname"
                                                ],
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "status": {
                                "description": "The current status for the virtual node.",
                                "properties": {
                                    "status": {
                                        "description": "The current status of the virtual node.",
                                        "enum": [
                                            "ACTIVE",
                                            "DELETED",
                                            "INACTIVE"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "status"
                                ],
                                "type": "object"
                            },
                            "virtualNodeName": {
                                "description": "The name of the virtual node.",
                                "maxLength": 255,
                                "minLength": 1,
                                "type": "string"
                            }
                        },
                        "required": [
                            "meshName",
                            "metadata",
                            "spec",
                            "status",
                            "virtualNodeName"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "virtualNode"
                ],
                "type": "object"
            },
            "CreateVirtualRouterInput": {
                "description": "",
                "properties": {
                    "clientToken": {
                        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the\nrequest. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                        "type": "string"
                    },
                    "spec": {
                        "description": "The virtual router specification to apply.",
                        "properties": {
                            "listeners": {
                                "description": "The listeners that the virtual router is expected to receive inbound traffic from. Currently only one listener is supported per virtual router.",
                                "items": {
                                    "description": "An object representing a virtual router listener.",
                                    "properties": {
                                        "portMapping": {
                                            "description": "An object representing a virtual node or virtual router listener port mapping.",
                                            "properties": {
                                                "port": {
                                                    "description": "The port used for the port mapping.",
                                                    "maximum": 65535,
                                                    "minimum": 1,
                                                    "type": "integer"
                                                },
                                                "protocol": {
                                                    "description": "The protocol used for the port mapping.",
                                                    "enum": [
                                                        "http",
                                                        "tcp"
                                                    ],
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "port",
                                                "protocol"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "portMapping"
                                    ],
                                    "type": "object"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "listeners"
                        ],
                        "type": "object"
                    },
                    "virtualRouterName": {
                        "description": "The name to use for the virtual router.",
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "spec",
                    "virtualRouterName"
                ],
                "type": "object"
            },
            "CreateVirtualRouterOutput": {
                "description": "",
                "properties": {
                    "virtualRouter": {
                        "description": "The full description of your virtual router following the create call.",
                        "properties": {
                            "meshName": {
                                "description": "The name of the service mesh that the virtual router resides in.",
                                "maxLength": 255,
                                "minLength": 1,
                                "type": "string"
                            },
                            "metadata": {
                                "description": "The associated metadata for the virtual router.",
                                "properties": {
                                    "arn": {
                                        "description": "<p>The full Amazon Resource Name (ARN) for the resource.</p>\n         <note>\n            <p>After you create a virtual node, set this value (either the full ARN or the\n            truncated resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>,\n            as the <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's\n            Envoy proxy container in your task definition or pod spec. This is then mapped to the\n               <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>\n            <p>If you require your Envoy stats or tracing to use a different name, you can override\n            the <code>node.cluster</code> value that is set by\n               <code>APPMESH_VIRTUAL_NODE_NAME</code> with the\n               <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>\n         </note>",
                                        "type": "string"
                                    },
                                    "createdAt": {
                                        "description": "The Unix epoch timestamp in seconds for when the resource was created.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "lastUpdatedAt": {
                                        "description": "The Unix epoch timestamp in seconds for when the resource was last updated.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "uid": {
                                        "description": "The unique identifier for the resource.",
                                        "type": "string"
                                    },
                                    "version": {
                                        "description": "The version of the resource. Resources are created at version 1, and this version is\n         incremented each time that they're updated.",
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "arn",
                                    "createdAt",
                                    "lastUpdatedAt",
                                    "uid",
                                    "version"
                                ],
                                "type": "object"
                            },
                            "spec": {
                                "description": "The specifications of the virtual router.",
                                "properties": {
                                    "listeners": {
                                        "description": "The listeners that the virtual router is expected to receive inbound traffic from. Currently only one listener is supported per virtual router.",
                                        "items": {
                                            "description": "An object representing a virtual router listener.",
                                            "properties": {
                                                "portMapping": {
                                                    "description": "An object representing a virtual node or virtual router listener port mapping.",
                                                    "properties": {
                                                        "port": {
                                                            "description": "The port used for the port mapping.",
                                                            "maximum": 65535,
                                                            "minimum": 1,
                                                            "type": "integer"
                                                        },
                                                        "protocol": {
                                                            "description": "The protocol used for the port mapping.",
                                                            "enum": [
                                                                "http",
                                                                "tcp"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "port",
                                                        "protocol"
                                                    ],
                                                    "type": "object"
                                                }
                                            },
                                            "required": [
                                                "portMapping"
                                            ],
                                            "type": "object"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "listeners"
                                ],
                                "type": "object"
                            },
                            "status": {
                                "description": "The current status of the virtual router.",
                                "properties": {
                                    "status": {
                                        "description": "The current status of the virtual router.",
                                        "enum": [
                                            "ACTIVE",
                                            "DELETED",
                                            "INACTIVE"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "status"
                                ],
                                "type": "object"
                            },
                            "virtualRouterName": {
                                "description": "The name of the virtual router.",
                                "maxLength": 255,
                                "minLength": 1,
                                "type": "string"
                            }
                        },
                        "required": [
                            "meshName",
                            "metadata",
                            "spec",
                            "status",
                            "virtualRouterName"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "virtualRouter"
                ],
                "type": "object"
            },
            "CreateVirtualServiceInput": {
                "description": "",
                "properties": {
                    "clientToken": {
                        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the\nrequest. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                        "type": "string"
                    },
                    "spec": {
                        "description": "The virtual service specification to apply.",
                        "properties": {
                            "provider": {
                                "description": "The App Mesh object that is acting as the provider for a virtual service. You can specify\n         a single virtual node or virtual router.",
                                "properties": {
                                    "virtualNode": {
                                        "description": "The virtual node associated with a virtual service.",
                                        "properties": {
                                            "virtualNodeName": {
                                                "description": "The name of the virtual node that is acting as a service provider.",
                                                "maxLength": 255,
                                                "minLength": 1,
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "virtualNodeName"
                                        ],
                                        "type": "object"
                                    },
                                    "virtualRouter": {
                                        "description": "The virtual router associated with a virtual service.",
                                        "properties": {
                                            "virtualRouterName": {
                                                "description": "The name of the virtual router that is acting as a service provider.",
                                                "maxLength": 255,
                                                "minLength": 1,
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "virtualRouterName"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "type": "object"
                    },
                    "virtualServiceName": {
                        "description": "The name to use for the virtual service.",
                        "type": "string"
                    }
                },
                "required": [
                    "spec",
                    "virtualServiceName"
                ],
                "type": "object"
            },
            "CreateVirtualServiceOutput": {
                "description": "",
                "properties": {
                    "virtualService": {
                        "description": "The full description of your virtual service following the create call.",
                        "properties": {
                            "meshName": {
                                "description": "The name of the service mesh that the virtual service resides in.",
                                "maxLength": 255,
                                "minLength": 1,
                                "type": "string"
                            },
                            "metadata": {
                                "description": "An object representing metadata for a resource.",
                                "properties": {
                                    "arn": {
                                        "description": "<p>The full Amazon Resource Name (ARN) for the resource.</p>\n         <note>\n            <p>After you create a virtual node, set this value (either the full ARN or the\n            truncated resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>,\n            as the <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's\n            Envoy proxy container in your task definition or pod spec. This is then mapped to the\n               <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>\n            <p>If you require your Envoy stats or tracing to use a different name, you can override\n            the <code>node.cluster</code> value that is set by\n               <code>APPMESH_VIRTUAL_NODE_NAME</code> with the\n               <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>\n         </note>",
                                        "type": "string"
                                    },
                                    "createdAt": {
                                        "description": "The Unix epoch timestamp in seconds for when the resource was created.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "lastUpdatedAt": {
                                        "description": "The Unix epoch timestamp in seconds for when the resource was last updated.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "uid": {
                                        "description": "The unique identifier for the resource.",
                                        "type": "string"
                                    },
                                    "version": {
                                        "description": "The version of the resource. Resources are created at version 1, and this version is\n         incremented each time that they're updated.",
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "arn",
                                    "createdAt",
                                    "lastUpdatedAt",
                                    "uid",
                                    "version"
                                ],
                                "type": "object"
                            },
                            "spec": {
                                "description": "The specifications of the virtual service.",
                                "properties": {
                                    "provider": {
                                        "description": "The App Mesh object that is acting as the provider for a virtual service. You can specify\n         a single virtual node or virtual router.",
                                        "properties": {
                                            "virtualNode": {
                                                "description": "The virtual node associated with a virtual service.",
                                                "properties": {
                                                    "virtualNodeName": {
                                                        "description": "The name of the virtual node that is acting as a service provider.",
                                                        "maxLength": 255,
                                                        "minLength": 1,
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "virtualNodeName"
                                                ],
                                                "type": "object"
                                            },
                                            "virtualRouter": {
                                                "description": "The virtual router associated with a virtual service.",
                                                "properties": {
                                                    "virtualRouterName": {
                                                        "description": "The name of the virtual router that is acting as a service provider.",
                                                        "maxLength": 255,
                                                        "minLength": 1,
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "virtualRouterName"
                                                ],
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "status": {
                                "description": "The current status of the virtual service.",
                                "properties": {
                                    "status": {
                                        "description": "The current status of the virtual service.",
                                        "enum": [
                                            "ACTIVE",
                                            "DELETED",
                                            "INACTIVE"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "status"
                                ],
                                "type": "object"
                            },
                            "virtualServiceName": {
                                "description": "The name of the virtual service.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "meshName",
                            "metadata",
                            "spec",
                            "status",
                            "virtualServiceName"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "virtualService"
                ],
                "type": "object"
            },
            "DeleteMeshInput": {
                "description": "",
                "properties": {},
                "type": "object"
            },
            "DeleteMeshOutput": {
                "description": "",
                "properties": {
                    "mesh": {
                        "description": "The service mesh that was deleted.",
                        "properties": {
                            "meshName": {
                                "description": "The name of the service mesh.",
                                "maxLength": 255,
                                "minLength": 1,
                                "type": "string"
                            },
                            "metadata": {
                                "description": "The associated metadata for the service mesh.",
                                "properties": {
                                    "arn": {
                                        "description": "<p>The full Amazon Resource Name (ARN) for the resource.</p>\n         <note>\n            <p>After you create a virtual node, set this value (either the full ARN or the\n            truncated resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>,\n            as the <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's\n            Envoy proxy container in your task definition or pod spec. This is then mapped to the\n               <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>\n            <p>If you require your Envoy stats or tracing to use a different name, you can override\n            the <code>node.cluster</code> value that is set by\n               <code>APPMESH_VIRTUAL_NODE_NAME</code> with the\n               <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>\n         </note>",
                                        "type": "string"
                                    },
                                    "createdAt": {
                                        "description": "The Unix epoch timestamp in seconds for when the resource was created.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "lastUpdatedAt": {
                                        "description": "The Unix epoch timestamp in seconds for when the resource was last updated.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "uid": {
                                        "description": "The unique identifier for the resource.",
                                        "type": "string"
                                    },
                                    "version": {
                                        "description": "The version of the resource. Resources are created at version 1, and this version is\n         incremented each time that they're updated.",
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "arn",
                                    "createdAt",
                                    "lastUpdatedAt",
                                    "uid",
                                    "version"
                                ],
                                "type": "object"
                            },
                            "status": {
                                "description": "The status of the service mesh.",
                                "properties": {
                                    "status": {
                                        "description": "The current mesh status.",
                                        "enum": [
                                            "ACTIVE",
                                            "DELETED",
                                            "INACTIVE"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "required": [
                            "meshName",
                            "metadata",
                            "status"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "mesh"
                ],
                "type": "object"
            },
            "DeleteRouteInput": {
                "description": "",
                "properties": {},
                "type": "object"
            },
            "DeleteRouteOutput": {
                "description": "",
                "properties": {
                    "route": {
                        "description": "The route that was deleted.",
                        "properties": {
                            "meshName": {
                                "description": "The name of the service mesh that the route resides in.",
                                "maxLength": 255,
                                "minLength": 1,
                                "type": "string"
                            },
                            "metadata": {
                                "description": "The associated metadata for the route.",
                                "properties": {
                                    "arn": {
                                        "description": "<p>The full Amazon Resource Name (ARN) for the resource.</p>\n         <note>\n            <p>After you create a virtual node, set this value (either the full ARN or the\n            truncated resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>,\n            as the <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's\n            Envoy proxy container in your task definition or pod spec. This is then mapped to the\n               <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>\n            <p>If you require your Envoy stats or tracing to use a different name, you can override\n            the <code>node.cluster</code> value that is set by\n               <code>APPMESH_VIRTUAL_NODE_NAME</code> with the\n               <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>\n         </note>",
                                        "type": "string"
                                    },
                                    "createdAt": {
                                        "description": "The Unix epoch timestamp in seconds for when the resource was created.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "lastUpdatedAt": {
                                        "description": "The Unix epoch timestamp in seconds for when the resource was last updated.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "uid": {
                                        "description": "The unique identifier for the resource.",
                                        "type": "string"
                                    },
                                    "version": {
                                        "description": "The version of the resource. Resources are created at version 1, and this version is\n         incremented each time that they're updated.",
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "arn",
                                    "createdAt",
                                    "lastUpdatedAt",
                                    "uid",
                                    "version"
                                ],
                                "type": "object"
                            },
                            "routeName": {
                                "description": "The name of the route.",
                                "maxLength": 255,
                                "minLength": 1,
                                "type": "string"
                            },
                            "spec": {
                                "description": "The specifications of the route.",
                                "properties": {
                                    "httpRoute": {
                                        "description": "The HTTP routing information for the route.",
                                        "properties": {
                                            "action": {
                                                "description": "The action to take if a match is determined.",
                                                "properties": {
                                                    "weightedTargets": {
                                                        "description": "The targets that traffic is routed to when a request matches the route. You can specify\n         one or more targets and their relative weights to distribute traffic with.",
                                                        "items": {
                                                            "description": "An object representing a target and its relative weight. Traffic is distributed across\n         targets according to their relative weight. For example, a weighted target with a relative\n         weight of 50 receives five times as much traffic as one with a relative weight of\n         10.",
                                                            "properties": {
                                                                "virtualNode": {
                                                                    "description": "The virtual node to associate with the weighted target.",
                                                                    "maxLength": 255,
                                                                    "minLength": 1,
                                                                    "type": "string"
                                                                },
                                                                "weight": {
                                                                    "description": "The relative weight of the weighted target.",
                                                                    "maximum": 100,
                                                                    "minimum": 0,
                                                                    "type": "integer"
                                                                }
                                                            },
                                                            "required": [
                                                                "virtualNode",
                                                                "weight"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    }
                                                },
                                                "required": [
                                                    "weightedTargets"
                                                ],
                                                "type": "object"
                                            },
                                            "match": {
                                                "description": "The criteria for determining an HTTP request match.",
                                                "properties": {
                                                    "prefix": {
                                                        "description": "Specifies the path to match requests with. This parameter must always start with\n            <code>/</code>, which by itself matches all requests to the virtual router service name.\n         You can also match for path-based routing of requests. For example, if your virtual router\n         service name is <code>my-service.local</code> and you want the route to match requests to\n            <code>my-service.local/metrics</code>, your prefix should be\n         <code>/metrics</code>.",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "prefix"
                                                ],
                                                "type": "object"
                                            }
                                        },
                                        "required": [
                                            "action",
                                            "match"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "status": {
                                "description": "The status of the route.",
                                "properties": {
                                    "status": {
                                        "description": "The current status for the route.",
                                        "enum": [
                                            "ACTIVE",
                                            "DELETED",
                                            "INACTIVE"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "status"
                                ],
                                "type": "object"
                            },
                            "virtualRouterName": {
                                "description": "The virtual router that the route is associated with.",
                                "maxLength": 255,
                                "minLength": 1,
                                "type": "string"
                            }
                        },
                        "required": [
                            "meshName",
                            "metadata",
                            "routeName",
                            "spec",
                            "status",
                            "virtualRouterName"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "route"
                ],
                "type": "object"
            },
            "DeleteVirtualNodeInput": {
                "description": "",
                "properties": {},
                "type": "object"
            },
            "DeleteVirtualNodeOutput": {
                "description": "",
                "properties": {
                    "virtualNode": {
                        "description": "The virtual node that was deleted.",
                        "properties": {
                            "meshName": {
                                "description": "The name of the service mesh that the virtual node resides in.",
                                "maxLength": 255,
                                "minLength": 1,
                                "type": "string"
                            },
                            "metadata": {
                                "description": "The associated metadata for the virtual node.",
                                "properties": {
                                    "arn": {
                                        "description": "<p>The full Amazon Resource Name (ARN) for the resource.</p>\n         <note>\n            <p>After you create a virtual node, set this value (either the full ARN or the\n            truncated resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>,\n            as the <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's\n            Envoy proxy container in your task definition or pod spec. This is then mapped to the\n               <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>\n            <p>If you require your Envoy stats or tracing to use a different name, you can override\n            the <code>node.cluster</code> value that is set by\n               <code>APPMESH_VIRTUAL_NODE_NAME</code> with the\n               <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>\n         </note>",
                                        "type": "string"
                                    },
                                    "createdAt": {
                                        "description": "The Unix epoch timestamp in seconds for when the resource was created.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "lastUpdatedAt": {
                                        "description": "The Unix epoch timestamp in seconds for when the resource was last updated.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "uid": {
                                        "description": "The unique identifier for the resource.",
                                        "type": "string"
                                    },
                                    "version": {
                                        "description": "The version of the resource. Resources are created at version 1, and this version is\n         incremented each time that they're updated.",
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "arn",
                                    "createdAt",
                                    "lastUpdatedAt",
                                    "uid",
                                    "version"
                                ],
                                "type": "object"
                            },
                            "spec": {
                                "description": "The specifications of the virtual node.",
                                "properties": {
                                    "backends": {
                                        "description": "The backends that the virtual node is expected to send outbound traffic to.",
                                        "items": {
                                            "description": "An object representing the backends that a virtual node is expected to send outbound\n         traffic to. ",
                                            "properties": {
                                                "virtualService": {
                                                    "description": "Specifies a virtual service to use as a backend for a virtual node. ",
                                                    "properties": {
                                                        "virtualServiceName": {
                                                            "description": "The name of the virtual service that is acting as a virtual node backend.",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "virtualServiceName"
                                                    ],
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "listeners": {
                                        "description": "The listeners that the virtual node is expected to receive inbound traffic from. Currently only one listener is supported per virtual node.",
                                        "items": {
                                            "description": "An object representing a listener for a virtual node.",
                                            "properties": {
                                                "healthCheck": {
                                                    "description": "The health check information for the listener.",
                                                    "properties": {
                                                        "healthyThreshold": {
                                                            "description": "The number of consecutive successful health checks that must occur before declaring\n         listener healthy.",
                                                            "maximum": 10,
                                                            "minimum": 2,
                                                            "type": "integer"
                                                        },
                                                        "intervalMillis": {
                                                            "description": "The time period in milliseconds between each health check execution.",
                                                            "maximum": 300000,
                                                            "minimum": 5000,
                                                            "type": "integer"
                                                        },
                                                        "path": {
                                                            "description": "The destination path for the health check request. This is required only if the\n         specified protocol is HTTP. If the protocol is TCP, this parameter is ignored.",
                                                            "type": "string"
                                                        },
                                                        "port": {
                                                            "description": "The destination port for the health check request. This port must match the port defined\n         in the <a>PortMapping</a> for the listener.",
                                                            "maximum": 65535,
                                                            "minimum": 1,
                                                            "type": "integer"
                                                        },
                                                        "protocol": {
                                                            "description": "The protocol for the health check request.",
                                                            "enum": [
                                                                "http",
                                                                "tcp"
                                                            ],
                                                            "type": "string"
                                                        },
                                                        "timeoutMillis": {
                                                            "description": "The amount of time to wait when receiving a response from the health check, in\n         milliseconds.",
                                                            "maximum": 60000,
                                                            "minimum": 2000,
                                                            "type": "integer"
                                                        },
                                                        "unhealthyThreshold": {
                                                            "description": "The number of consecutive failed health checks that must occur before declaring a\n         virtual node unhealthy. ",
                                                            "maximum": 10,
                                                            "minimum": 2,
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "required": [
                                                        "healthyThreshold",
                                                        "intervalMillis",
                                                        "protocol",
                                                        "timeoutMillis",
                                                        "unhealthyThreshold"
                                                    ],
                                                    "type": "object"
                                                },
                                                "portMapping": {
                                                    "description": "The port mapping information for the listener.",
                                                    "properties": {
                                                        "port": {
                                                            "description": "The port used for the port mapping.",
                                                            "maximum": 65535,
                                                            "minimum": 1,
                                                            "type": "integer"
                                                        },
                                                        "protocol": {
                                                            "description": "The protocol used for the port mapping.",
                                                            "enum": [
                                                                "http",
                                                                "tcp"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "port",
                                                        "protocol"
                                                    ],
                                                    "type": "object"
                                                }
                                            },
                                            "required": [
                                                "portMapping"
                                            ],
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "serviceDiscovery": {
                                        "description": "The service discovery information for the virtual node.",
                                        "properties": {
                                            "dns": {
                                                "description": "Specifies the DNS information for the virtual node.",
                                                "properties": {
                                                    "hostname": {
                                                        "description": "Specifies the DNS service discovery hostname for the virtual node. ",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "hostname"
                                                ],
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "status": {
                                "description": "The current status for the virtual node.",
                                "properties": {
                                    "status": {
                                        "description": "The current status of the virtual node.",
                                        "enum": [
                                            "ACTIVE",
                                            "DELETED",
                                            "INACTIVE"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "status"
                                ],
                                "type": "object"
                            },
                            "virtualNodeName": {
                                "description": "The name of the virtual node.",
                                "maxLength": 255,
                                "minLength": 1,
                                "type": "string"
                            }
                        },
                        "required": [
                            "meshName",
                            "metadata",
                            "spec",
                            "status",
                            "virtualNodeName"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "virtualNode"
                ],
                "type": "object"
            },
            "DeleteVirtualRouterInput": {
                "description": "",
                "properties": {},
                "type": "object"
            },
            "DeleteVirtualRouterOutput": {
                "description": "",
                "properties": {
                    "virtualRouter": {
                        "description": "The virtual router that was deleted.",
                        "properties": {
                            "meshName": {
                                "description": "The name of the service mesh that the virtual router resides in.",
                                "maxLength": 255,
                                "minLength": 1,
                                "type": "string"
                            },
                            "metadata": {
                                "description": "The associated metadata for the virtual router.",
                                "properties": {
                                    "arn": {
                                        "description": "<p>The full Amazon Resource Name (ARN) for the resource.</p>\n         <note>\n            <p>After you create a virtual node, set this value (either the full ARN or the\n            truncated resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>,\n            as the <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's\n            Envoy proxy container in your task definition or pod spec. This is then mapped to the\n               <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>\n            <p>If you require your Envoy stats or tracing to use a different name, you can override\n            the <code>node.cluster</code> value that is set by\n               <code>APPMESH_VIRTUAL_NODE_NAME</code> with the\n               <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>\n         </note>",
                                        "type": "string"
                                    },
                                    "createdAt": {
                                        "description": "The Unix epoch timestamp in seconds for when the resource was created.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "lastUpdatedAt": {
                                        "description": "The Unix epoch timestamp in seconds for when the resource was last updated.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "uid": {
                                        "description": "The unique identifier for the resource.",
                                        "type": "string"
                                    },
                                    "version": {
                                        "description": "The version of the resource. Resources are created at version 1, and this version is\n         incremented each time that they're updated.",
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "arn",
                                    "createdAt",
                                    "lastUpdatedAt",
                                    "uid",
                                    "version"
                                ],
                                "type": "object"
                            },
                            "spec": {
                                "description": "The specifications of the virtual router.",
                                "properties": {
                                    "listeners": {
                                        "description": "The listeners that the virtual router is expected to receive inbound traffic from. Currently only one listener is supported per virtual router.",
                                        "items": {
                                            "description": "An object representing a virtual router listener.",
                                            "properties": {
                                                "portMapping": {
                                                    "description": "An object representing a virtual node or virtual router listener port mapping.",
                                                    "properties": {
                                                        "port": {
                                                            "description": "The port used for the port mapping.",
                                                            "maximum": 65535,
                                                            "minimum": 1,
                                                            "type": "integer"
                                                        },
                                                        "protocol": {
                                                            "description": "The protocol used for the port mapping.",
                                                            "enum": [
                                                                "http",
                                                                "tcp"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "port",
                                                        "protocol"
                                                    ],
                                                    "type": "object"
                                                }
                                            },
                                            "required": [
                                                "portMapping"
                                            ],
                                            "type": "object"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "listeners"
                                ],
                                "type": "object"
                            },
                            "status": {
                                "description": "The current status of the virtual router.",
                                "properties": {
                                    "status": {
                                        "description": "The current status of the virtual router.",
                                        "enum": [
                                            "ACTIVE",
                                            "DELETED",
                                            "INACTIVE"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "status"
                                ],
                                "type": "object"
                            },
                            "virtualRouterName": {
                                "description": "The name of the virtual router.",
                                "maxLength": 255,
                                "minLength": 1,
                                "type": "string"
                            }
                        },
                        "required": [
                            "meshName",
                            "metadata",
                            "spec",
                            "status",
                            "virtualRouterName"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "virtualRouter"
                ],
                "type": "object"
            },
            "DeleteVirtualServiceInput": {
                "description": "",
                "properties": {},
                "type": "object"
            },
            "DeleteVirtualServiceOutput": {
                "description": "",
                "properties": {
                    "virtualService": {
                        "description": "The virtual service that was deleted.",
                        "properties": {
                            "meshName": {
                                "description": "The name of the service mesh that the virtual service resides in.",
                                "maxLength": 255,
                                "minLength": 1,
                                "type": "string"
                            },
                            "metadata": {
                                "description": "An object representing metadata for a resource.",
                                "properties": {
                                    "arn": {
                                        "description": "<p>The full Amazon Resource Name (ARN) for the resource.</p>\n         <note>\n            <p>After you create a virtual node, set this value (either the full ARN or the\n            truncated resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>,\n            as the <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's\n            Envoy proxy container in your task definition or pod spec. This is then mapped to the\n               <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>\n            <p>If you require your Envoy stats or tracing to use a different name, you can override\n            the <code>node.cluster</code> value that is set by\n               <code>APPMESH_VIRTUAL_NODE_NAME</code> with the\n               <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>\n         </note>",
                                        "type": "string"
                                    },
                                    "createdAt": {
                                        "description": "The Unix epoch timestamp in seconds for when the resource was created.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "lastUpdatedAt": {
                                        "description": "The Unix epoch timestamp in seconds for when the resource was last updated.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "uid": {
                                        "description": "The unique identifier for the resource.",
                                        "type": "string"
                                    },
                                    "version": {
                                        "description": "The version of the resource. Resources are created at version 1, and this version is\n         incremented each time that they're updated.",
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "arn",
                                    "createdAt",
                                    "lastUpdatedAt",
                                    "uid",
                                    "version"
                                ],
                                "type": "object"
                            },
                            "spec": {
                                "description": "The specifications of the virtual service.",
                                "properties": {
                                    "provider": {
                                        "description": "The App Mesh object that is acting as the provider for a virtual service. You can specify\n         a single virtual node or virtual router.",
                                        "properties": {
                                            "virtualNode": {
                                                "description": "The virtual node associated with a virtual service.",
                                                "properties": {
                                                    "virtualNodeName": {
                                                        "description": "The name of the virtual node that is acting as a service provider.",
                                                        "maxLength": 255,
                                                        "minLength": 1,
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "virtualNodeName"
                                                ],
                                                "type": "object"
                                            },
                                            "virtualRouter": {
                                                "description": "The virtual router associated with a virtual service.",
                                                "properties": {
                                                    "virtualRouterName": {
                                                        "description": "The name of the virtual router that is acting as a service provider.",
                                                        "maxLength": 255,
                                                        "minLength": 1,
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "virtualRouterName"
                                                ],
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "status": {
                                "description": "The current status of the virtual service.",
                                "properties": {
                                    "status": {
                                        "description": "The current status of the virtual service.",
                                        "enum": [
                                            "ACTIVE",
                                            "DELETED",
                                            "INACTIVE"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "status"
                                ],
                                "type": "object"
                            },
                            "virtualServiceName": {
                                "description": "The name of the virtual service.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "meshName",
                            "metadata",
                            "spec",
                            "status",
                            "virtualServiceName"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "virtualService"
                ],
                "type": "object"
            },
            "DescribeMeshInput": {
                "description": "",
                "properties": {},
                "type": "object"
            },
            "DescribeMeshOutput": {
                "description": "",
                "properties": {
                    "mesh": {
                        "description": "The full description of your service mesh.",
                        "properties": {
                            "meshName": {
                                "description": "The name of the service mesh.",
                                "maxLength": 255,
                                "minLength": 1,
                                "type": "string"
                            },
                            "metadata": {
                                "description": "The associated metadata for the service mesh.",
                                "properties": {
                                    "arn": {
                                        "description": "<p>The full Amazon Resource Name (ARN) for the resource.</p>\n         <note>\n            <p>After you create a virtual node, set this value (either the full ARN or the\n            truncated resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>,\n            as the <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's\n            Envoy proxy container in your task definition or pod spec. This is then mapped to the\n               <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>\n            <p>If you require your Envoy stats or tracing to use a different name, you can override\n            the <code>node.cluster</code> value that is set by\n               <code>APPMESH_VIRTUAL_NODE_NAME</code> with the\n               <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>\n         </note>",
                                        "type": "string"
                                    },
                                    "createdAt": {
                                        "description": "The Unix epoch timestamp in seconds for when the resource was created.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "lastUpdatedAt": {
                                        "description": "The Unix epoch timestamp in seconds for when the resource was last updated.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "uid": {
                                        "description": "The unique identifier for the resource.",
                                        "type": "string"
                                    },
                                    "version": {
                                        "description": "The version of the resource. Resources are created at version 1, and this version is\n         incremented each time that they're updated.",
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "arn",
                                    "createdAt",
                                    "lastUpdatedAt",
                                    "uid",
                                    "version"
                                ],
                                "type": "object"
                            },
                            "status": {
                                "description": "The status of the service mesh.",
                                "properties": {
                                    "status": {
                                        "description": "The current mesh status.",
                                        "enum": [
                                            "ACTIVE",
                                            "DELETED",
                                            "INACTIVE"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "required": [
                            "meshName",
                            "metadata",
                            "status"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "mesh"
                ],
                "type": "object"
            },
            "DescribeRouteInput": {
                "description": "",
                "properties": {},
                "type": "object"
            },
            "DescribeRouteOutput": {
                "description": "",
                "properties": {
                    "route": {
                        "description": "The full description of your route.",
                        "properties": {
                            "meshName": {
                                "description": "The name of the service mesh that the route resides in.",
                                "maxLength": 255,
                                "minLength": 1,
                                "type": "string"
                            },
                            "metadata": {
                                "description": "The associated metadata for the route.",
                                "properties": {
                                    "arn": {
                                        "description": "<p>The full Amazon Resource Name (ARN) for the resource.</p>\n         <note>\n            <p>After you create a virtual node, set this value (either the full ARN or the\n            truncated resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>,\n            as the <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's\n            Envoy proxy container in your task definition or pod spec. This is then mapped to the\n               <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>\n            <p>If you require your Envoy stats or tracing to use a different name, you can override\n            the <code>node.cluster</code> value that is set by\n               <code>APPMESH_VIRTUAL_NODE_NAME</code> with the\n               <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>\n         </note>",
                                        "type": "string"
                                    },
                                    "createdAt": {
                                        "description": "The Unix epoch timestamp in seconds for when the resource was created.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "lastUpdatedAt": {
                                        "description": "The Unix epoch timestamp in seconds for when the resource was last updated.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "uid": {
                                        "description": "The unique identifier for the resource.",
                                        "type": "string"
                                    },
                                    "version": {
                                        "description": "The version of the resource. Resources are created at version 1, and this version is\n         incremented each time that they're updated.",
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "arn",
                                    "createdAt",
                                    "lastUpdatedAt",
                                    "uid",
                                    "version"
                                ],
                                "type": "object"
                            },
                            "routeName": {
                                "description": "The name of the route.",
                                "maxLength": 255,
                                "minLength": 1,
                                "type": "string"
                            },
                            "spec": {
                                "description": "The specifications of the route.",
                                "properties": {
                                    "httpRoute": {
                                        "description": "The HTTP routing information for the route.",
                                        "properties": {
                                            "action": {
                                                "description": "The action to take if a match is determined.",
                                                "properties": {
                                                    "weightedTargets": {
                                                        "description": "The targets that traffic is routed to when a request matches the route. You can specify\n         one or more targets and their relative weights to distribute traffic with.",
                                                        "items": {
                                                            "description": "An object representing a target and its relative weight. Traffic is distributed across\n         targets according to their relative weight. For example, a weighted target with a relative\n         weight of 50 receives five times as much traffic as one with a relative weight of\n         10.",
                                                            "properties": {
                                                                "virtualNode": {
                                                                    "description": "The virtual node to associate with the weighted target.",
                                                                    "maxLength": 255,
                                                                    "minLength": 1,
                                                                    "type": "string"
                                                                },
                                                                "weight": {
                                                                    "description": "The relative weight of the weighted target.",
                                                                    "maximum": 100,
                                                                    "minimum": 0,
                                                                    "type": "integer"
                                                                }
                                                            },
                                                            "required": [
                                                                "virtualNode",
                                                                "weight"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    }
                                                },
                                                "required": [
                                                    "weightedTargets"
                                                ],
                                                "type": "object"
                                            },
                                            "match": {
                                                "description": "The criteria for determining an HTTP request match.",
                                                "properties": {
                                                    "prefix": {
                                                        "description": "Specifies the path to match requests with. This parameter must always start with\n            <code>/</code>, which by itself matches all requests to the virtual router service name.\n         You can also match for path-based routing of requests. For example, if your virtual router\n         service name is <code>my-service.local</code> and you want the route to match requests to\n            <code>my-service.local/metrics</code>, your prefix should be\n         <code>/metrics</code>.",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "prefix"
                                                ],
                                                "type": "object"
                                            }
                                        },
                                        "required": [
                                            "action",
                                            "match"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "status": {
                                "description": "The status of the route.",
                                "properties": {
                                    "status": {
                                        "description": "The current status for the route.",
                                        "enum": [
                                            "ACTIVE",
                                            "DELETED",
                                            "INACTIVE"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "status"
                                ],
                                "type": "object"
                            },
                            "virtualRouterName": {
                                "description": "The virtual router that the route is associated with.",
                                "maxLength": 255,
                                "minLength": 1,
                                "type": "string"
                            }
                        },
                        "required": [
                            "meshName",
                            "metadata",
                            "routeName",
                            "spec",
                            "status",
                            "virtualRouterName"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "route"
                ],
                "type": "object"
            },
            "DescribeVirtualNodeInput": {
                "description": "",
                "properties": {},
                "type": "object"
            },
            "DescribeVirtualNodeOutput": {
                "description": "",
                "properties": {
                    "virtualNode": {
                        "description": "The full description of your virtual node.",
                        "properties": {
                            "meshName": {
                                "description": "The name of the service mesh that the virtual node resides in.",
                                "maxLength": 255,
                                "minLength": 1,
                                "type": "string"
                            },
                            "metadata": {
                                "description": "The associated metadata for the virtual node.",
                                "properties": {
                                    "arn": {
                                        "description": "<p>The full Amazon Resource Name (ARN) for the resource.</p>\n         <note>\n            <p>After you create a virtual node, set this value (either the full ARN or the\n            truncated resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>,\n            as the <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's\n            Envoy proxy container in your task definition or pod spec. This is then mapped to the\n               <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>\n            <p>If you require your Envoy stats or tracing to use a different name, you can override\n            the <code>node.cluster</code> value that is set by\n               <code>APPMESH_VIRTUAL_NODE_NAME</code> with the\n               <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>\n         </note>",
                                        "type": "string"
                                    },
                                    "createdAt": {
                                        "description": "The Unix epoch timestamp in seconds for when the resource was created.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "lastUpdatedAt": {
                                        "description": "The Unix epoch timestamp in seconds for when the resource was last updated.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "uid": {
                                        "description": "The unique identifier for the resource.",
                                        "type": "string"
                                    },
                                    "version": {
                                        "description": "The version of the resource. Resources are created at version 1, and this version is\n         incremented each time that they're updated.",
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "arn",
                                    "createdAt",
                                    "lastUpdatedAt",
                                    "uid",
                                    "version"
                                ],
                                "type": "object"
                            },
                            "spec": {
                                "description": "The specifications of the virtual node.",
                                "properties": {
                                    "backends": {
                                        "description": "The backends that the virtual node is expected to send outbound traffic to.",
                                        "items": {
                                            "description": "An object representing the backends that a virtual node is expected to send outbound\n         traffic to. ",
                                            "properties": {
                                                "virtualService": {
                                                    "description": "Specifies a virtual service to use as a backend for a virtual node. ",
                                                    "properties": {
                                                        "virtualServiceName": {
                                                            "description": "The name of the virtual service that is acting as a virtual node backend.",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "virtualServiceName"
                                                    ],
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "listeners": {
                                        "description": "The listeners that the virtual node is expected to receive inbound traffic from. Currently only one listener is supported per virtual node.",
                                        "items": {
                                            "description": "An object representing a listener for a virtual node.",
                                            "properties": {
                                                "healthCheck": {
                                                    "description": "The health check information for the listener.",
                                                    "properties": {
                                                        "healthyThreshold": {
                                                            "description": "The number of consecutive successful health checks that must occur before declaring\n         listener healthy.",
                                                            "maximum": 10,
                                                            "minimum": 2,
                                                            "type": "integer"
                                                        },
                                                        "intervalMillis": {
                                                            "description": "The time period in milliseconds between each health check execution.",
                                                            "maximum": 300000,
                                                            "minimum": 5000,
                                                            "type": "integer"
                                                        },
                                                        "path": {
                                                            "description": "The destination path for the health check request. This is required only if the\n         specified protocol is HTTP. If the protocol is TCP, this parameter is ignored.",
                                                            "type": "string"
                                                        },
                                                        "port": {
                                                            "description": "The destination port for the health check request. This port must match the port defined\n         in the <a>PortMapping</a> for the listener.",
                                                            "maximum": 65535,
                                                            "minimum": 1,
                                                            "type": "integer"
                                                        },
                                                        "protocol": {
                                                            "description": "The protocol for the health check request.",
                                                            "enum": [
                                                                "http",
                                                                "tcp"
                                                            ],
                                                            "type": "string"
                                                        },
                                                        "timeoutMillis": {
                                                            "description": "The amount of time to wait when receiving a response from the health check, in\n         milliseconds.",
                                                            "maximum": 60000,
                                                            "minimum": 2000,
                                                            "type": "integer"
                                                        },
                                                        "unhealthyThreshold": {
                                                            "description": "The number of consecutive failed health checks that must occur before declaring a\n         virtual node unhealthy. ",
                                                            "maximum": 10,
                                                            "minimum": 2,
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "required": [
                                                        "healthyThreshold",
                                                        "intervalMillis",
                                                        "protocol",
                                                        "timeoutMillis",
                                                        "unhealthyThreshold"
                                                    ],
                                                    "type": "object"
                                                },
                                                "portMapping": {
                                                    "description": "The port mapping information for the listener.",
                                                    "properties": {
                                                        "port": {
                                                            "description": "The port used for the port mapping.",
                                                            "maximum": 65535,
                                                            "minimum": 1,
                                                            "type": "integer"
                                                        },
                                                        "protocol": {
                                                            "description": "The protocol used for the port mapping.",
                                                            "enum": [
                                                                "http",
                                                                "tcp"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "port",
                                                        "protocol"
                                                    ],
                                                    "type": "object"
                                                }
                                            },
                                            "required": [
                                                "portMapping"
                                            ],
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "serviceDiscovery": {
                                        "description": "The service discovery information for the virtual node.",
                                        "properties": {
                                            "dns": {
                                                "description": "Specifies the DNS information for the virtual node.",
                                                "properties": {
                                                    "hostname": {
                                                        "description": "Specifies the DNS service discovery hostname for the virtual node. ",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "hostname"
                                                ],
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "status": {
                                "description": "The current status for the virtual node.",
                                "properties": {
                                    "status": {
                                        "description": "The current status of the virtual node.",
                                        "enum": [
                                            "ACTIVE",
                                            "DELETED",
                                            "INACTIVE"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "status"
                                ],
                                "type": "object"
                            },
                            "virtualNodeName": {
                                "description": "The name of the virtual node.",
                                "maxLength": 255,
                                "minLength": 1,
                                "type": "string"
                            }
                        },
                        "required": [
                            "meshName",
                            "metadata",
                            "spec",
                            "status",
                            "virtualNodeName"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "virtualNode"
                ],
                "type": "object"
            },
            "DescribeVirtualRouterInput": {
                "description": "",
                "properties": {},
                "type": "object"
            },
            "DescribeVirtualRouterOutput": {
                "description": "",
                "properties": {
                    "virtualRouter": {
                        "description": "The full description of your virtual router.",
                        "properties": {
                            "meshName": {
                                "description": "The name of the service mesh that the virtual router resides in.",
                                "maxLength": 255,
                                "minLength": 1,
                                "type": "string"
                            },
                            "metadata": {
                                "description": "The associated metadata for the virtual router.",
                                "properties": {
                                    "arn": {
                                        "description": "<p>The full Amazon Resource Name (ARN) for the resource.</p>\n         <note>\n            <p>After you create a virtual node, set this value (either the full ARN or the\n            truncated resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>,\n            as the <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's\n            Envoy proxy container in your task definition or pod spec. This is then mapped to the\n               <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>\n            <p>If you require your Envoy stats or tracing to use a different name, you can override\n            the <code>node.cluster</code> value that is set by\n               <code>APPMESH_VIRTUAL_NODE_NAME</code> with the\n               <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>\n         </note>",
                                        "type": "string"
                                    },
                                    "createdAt": {
                                        "description": "The Unix epoch timestamp in seconds for when the resource was created.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "lastUpdatedAt": {
                                        "description": "The Unix epoch timestamp in seconds for when the resource was last updated.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "uid": {
                                        "description": "The unique identifier for the resource.",
                                        "type": "string"
                                    },
                                    "version": {
                                        "description": "The version of the resource. Resources are created at version 1, and this version is\n         incremented each time that they're updated.",
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "arn",
                                    "createdAt",
                                    "lastUpdatedAt",
                                    "uid",
                                    "version"
                                ],
                                "type": "object"
                            },
                            "spec": {
                                "description": "The specifications of the virtual router.",
                                "properties": {
                                    "listeners": {
                                        "description": "The listeners that the virtual router is expected to receive inbound traffic from. Currently only one listener is supported per virtual router.",
                                        "items": {
                                            "description": "An object representing a virtual router listener.",
                                            "properties": {
                                                "portMapping": {
                                                    "description": "An object representing a virtual node or virtual router listener port mapping.",
                                                    "properties": {
                                                        "port": {
                                                            "description": "The port used for the port mapping.",
                                                            "maximum": 65535,
                                                            "minimum": 1,
                                                            "type": "integer"
                                                        },
                                                        "protocol": {
                                                            "description": "The protocol used for the port mapping.",
                                                            "enum": [
                                                                "http",
                                                                "tcp"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "port",
                                                        "protocol"
                                                    ],
                                                    "type": "object"
                                                }
                                            },
                                            "required": [
                                                "portMapping"
                                            ],
                                            "type": "object"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "listeners"
                                ],
                                "type": "object"
                            },
                            "status": {
                                "description": "The current status of the virtual router.",
                                "properties": {
                                    "status": {
                                        "description": "The current status of the virtual router.",
                                        "enum": [
                                            "ACTIVE",
                                            "DELETED",
                                            "INACTIVE"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "status"
                                ],
                                "type": "object"
                            },
                            "virtualRouterName": {
                                "description": "The name of the virtual router.",
                                "maxLength": 255,
                                "minLength": 1,
                                "type": "string"
                            }
                        },
                        "required": [
                            "meshName",
                            "metadata",
                            "spec",
                            "status",
                            "virtualRouterName"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "virtualRouter"
                ],
                "type": "object"
            },
            "DescribeVirtualServiceInput": {
                "description": "",
                "properties": {},
                "type": "object"
            },
            "DescribeVirtualServiceOutput": {
                "description": "",
                "properties": {
                    "virtualService": {
                        "description": "The full description of your virtual service.",
                        "properties": {
                            "meshName": {
                                "description": "The name of the service mesh that the virtual service resides in.",
                                "maxLength": 255,
                                "minLength": 1,
                                "type": "string"
                            },
                            "metadata": {
                                "description": "An object representing metadata for a resource.",
                                "properties": {
                                    "arn": {
                                        "description": "<p>The full Amazon Resource Name (ARN) for the resource.</p>\n         <note>\n            <p>After you create a virtual node, set this value (either the full ARN or the\n            truncated resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>,\n            as the <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's\n            Envoy proxy container in your task definition or pod spec. This is then mapped to the\n               <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>\n            <p>If you require your Envoy stats or tracing to use a different name, you can override\n            the <code>node.cluster</code> value that is set by\n               <code>APPMESH_VIRTUAL_NODE_NAME</code> with the\n               <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>\n         </note>",
                                        "type": "string"
                                    },
                                    "createdAt": {
                                        "description": "The Unix epoch timestamp in seconds for when the resource was created.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "lastUpdatedAt": {
                                        "description": "The Unix epoch timestamp in seconds for when the resource was last updated.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "uid": {
                                        "description": "The unique identifier for the resource.",
                                        "type": "string"
                                    },
                                    "version": {
                                        "description": "The version of the resource. Resources are created at version 1, and this version is\n         incremented each time that they're updated.",
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "arn",
                                    "createdAt",
                                    "lastUpdatedAt",
                                    "uid",
                                    "version"
                                ],
                                "type": "object"
                            },
                            "spec": {
                                "description": "The specifications of the virtual service.",
                                "properties": {
                                    "provider": {
                                        "description": "The App Mesh object that is acting as the provider for a virtual service. You can specify\n         a single virtual node or virtual router.",
                                        "properties": {
                                            "virtualNode": {
                                                "description": "The virtual node associated with a virtual service.",
                                                "properties": {
                                                    "virtualNodeName": {
                                                        "description": "The name of the virtual node that is acting as a service provider.",
                                                        "maxLength": 255,
                                                        "minLength": 1,
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "virtualNodeName"
                                                ],
                                                "type": "object"
                                            },
                                            "virtualRouter": {
                                                "description": "The virtual router associated with a virtual service.",
                                                "properties": {
                                                    "virtualRouterName": {
                                                        "description": "The name of the virtual router that is acting as a service provider.",
                                                        "maxLength": 255,
                                                        "minLength": 1,
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "virtualRouterName"
                                                ],
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "status": {
                                "description": "The current status of the virtual service.",
                                "properties": {
                                    "status": {
                                        "description": "The current status of the virtual service.",
                                        "enum": [
                                            "ACTIVE",
                                            "DELETED",
                                            "INACTIVE"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "status"
                                ],
                                "type": "object"
                            },
                            "virtualServiceName": {
                                "description": "The name of the virtual service.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "meshName",
                            "metadata",
                            "spec",
                            "status",
                            "virtualServiceName"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "virtualService"
                ],
                "type": "object"
            },
            "DnsServiceDiscovery": {
                "description": "An object representing the DNS service discovery information for your virtual\n         node.",
                "properties": {
                    "hostname": {
                        "description": "Specifies the DNS service discovery hostname for the virtual node. ",
                        "type": "string"
                    }
                },
                "required": [
                    "hostname"
                ],
                "type": "object"
            },
            "ForbiddenException": {},
            "HealthCheckIntervalMillis": {
                "maximum": 300000,
                "minimum": 5000,
                "type": "integer"
            },
            "HealthCheckPolicy": {
                "description": "An object representing the health check policy for a virtual node's listener.",
                "properties": {
                    "healthyThreshold": {
                        "description": "The number of consecutive successful health checks that must occur before declaring\n         listener healthy.",
                        "maximum": 10,
                        "minimum": 2,
                        "type": "integer"
                    },
                    "intervalMillis": {
                        "description": "The time period in milliseconds between each health check execution.",
                        "maximum": 300000,
                        "minimum": 5000,
                        "type": "integer"
                    },
                    "path": {
                        "description": "The destination path for the health check request. This is required only if the\n         specified protocol is HTTP. If the protocol is TCP, this parameter is ignored.",
                        "type": "string"
                    },
                    "port": {
                        "description": "The destination port for the health check request. This port must match the port defined\n         in the <a>PortMapping</a> for the listener.",
                        "maximum": 65535,
                        "minimum": 1,
                        "type": "integer"
                    },
                    "protocol": {
                        "description": "The protocol for the health check request.",
                        "enum": [
                            "http",
                            "tcp"
                        ],
                        "type": "string"
                    },
                    "timeoutMillis": {
                        "description": "The amount of time to wait when receiving a response from the health check, in\n         milliseconds.",
                        "maximum": 60000,
                        "minimum": 2000,
                        "type": "integer"
                    },
                    "unhealthyThreshold": {
                        "description": "The number of consecutive failed health checks that must occur before declaring a\n         virtual node unhealthy. ",
                        "maximum": 10,
                        "minimum": 2,
                        "type": "integer"
                    }
                },
                "required": [
                    "healthyThreshold",
                    "intervalMillis",
                    "protocol",
                    "timeoutMillis",
                    "unhealthyThreshold"
                ],
                "type": "object"
            },
            "HealthCheckThreshold": {
                "maximum": 10,
                "minimum": 2,
                "type": "integer"
            },
            "HealthCheckTimeoutMillis": {
                "maximum": 60000,
                "minimum": 2000,
                "type": "integer"
            },
            "Hostname": {
                "type": "string"
            },
            "HttpRoute": {
                "description": "An object representing the HTTP routing specification for a route.",
                "properties": {
                    "action": {
                        "description": "The action to take if a match is determined.",
                        "properties": {
                            "weightedTargets": {
                                "description": "The targets that traffic is routed to when a request matches the route. You can specify\n         one or more targets and their relative weights to distribute traffic with.",
                                "items": {
                                    "description": "An object representing a target and its relative weight. Traffic is distributed across\n         targets according to their relative weight. For example, a weighted target with a relative\n         weight of 50 receives five times as much traffic as one with a relative weight of\n         10.",
                                    "properties": {
                                        "virtualNode": {
                                            "description": "The virtual node to associate with the weighted target.",
                                            "maxLength": 255,
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "weight": {
                                            "description": "The relative weight of the weighted target.",
                                            "maximum": 100,
                                            "minimum": 0,
                                            "type": "integer"
                                        }
                                    },
                                    "required": [
                                        "virtualNode",
                                        "weight"
                                    ],
                                    "type": "object"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "weightedTargets"
                        ],
                        "type": "object"
                    },
                    "match": {
                        "description": "The criteria for determining an HTTP request match.",
                        "properties": {
                            "prefix": {
                                "description": "Specifies the path to match requests with. This parameter must always start with\n            <code>/</code>, which by itself matches all requests to the virtual router service name.\n         You can also match for path-based routing of requests. For example, if your virtual router\n         service name is <code>my-service.local</code> and you want the route to match requests to\n            <code>my-service.local/metrics</code>, your prefix should be\n         <code>/metrics</code>.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "prefix"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "action",
                    "match"
                ],
                "type": "object"
            },
            "HttpRouteAction": {
                "description": "An object representing the traffic distribution requirements for matched HTTP\n         requests.",
                "properties": {
                    "weightedTargets": {
                        "description": "The targets that traffic is routed to when a request matches the route. You can specify\n         one or more targets and their relative weights to distribute traffic with.",
                        "items": {
                            "description": "An object representing a target and its relative weight. Traffic is distributed across\n         targets according to their relative weight. For example, a weighted target with a relative\n         weight of 50 receives five times as much traffic as one with a relative weight of\n         10.",
                            "properties": {
                                "virtualNode": {
                                    "description": "The virtual node to associate with the weighted target.",
                                    "maxLength": 255,
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "weight": {
                                    "description": "The relative weight of the weighted target.",
                                    "maximum": 100,
                                    "minimum": 0,
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "virtualNode",
                                "weight"
                            ],
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "weightedTargets"
                ],
                "type": "object"
            },
            "HttpRouteMatch": {
                "description": "An object representing the requirements for a route to match HTTP requests for a virtual\n         router.",
                "properties": {
                    "prefix": {
                        "description": "Specifies the path to match requests with. This parameter must always start with\n            <code>/</code>, which by itself matches all requests to the virtual router service name.\n         You can also match for path-based routing of requests. For example, if your virtual router\n         service name is <code>my-service.local</code> and you want the route to match requests to\n            <code>my-service.local/metrics</code>, your prefix should be\n         <code>/metrics</code>.",
                        "type": "string"
                    }
                },
                "required": [
                    "prefix"
                ],
                "type": "object"
            },
            "InternalServerErrorException": {},
            "LimitExceededException": {},
            "ListMeshesInput": {
                "description": "",
                "properties": {},
                "type": "object"
            },
            "ListMeshesLimit": {
                "maximum": 100,
                "minimum": 1,
                "type": "integer"
            },
            "ListMeshesOutput": {
                "description": "",
                "properties": {
                    "meshes": {
                        "description": "The list of existing service meshes.",
                        "items": {
                            "description": "An object representing a service mesh returned by a list operation.",
                            "properties": {
                                "arn": {
                                    "description": "The full Amazon Resource Name (ARN) of the service mesh.",
                                    "type": "string"
                                },
                                "meshName": {
                                    "description": "The name of the service mesh.",
                                    "maxLength": 255,
                                    "minLength": 1,
                                    "type": "string"
                                }
                            },
                            "required": [
                                "arn",
                                "meshName"
                            ],
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "nextToken": {
                        "description": "The <code>nextToken</code> value to include in a future <code>ListMeshes</code>\n         request. When the results of a <code>ListMeshes</code> request exceed\n         <code>limit</code>, you can use this value to retrieve the next page of\n         results. This value is <code>null</code> when there are no more results to\n         return.",
                        "type": "string"
                    }
                },
                "required": [
                    "meshes"
                ],
                "type": "object"
            },
            "ListRoutesInput": {
                "description": "",
                "properties": {},
                "type": "object"
            },
            "ListRoutesLimit": {
                "maximum": 100,
                "minimum": 1,
                "type": "integer"
            },
            "ListRoutesOutput": {
                "description": "",
                "properties": {
                    "nextToken": {
                        "description": "The <code>nextToken</code> value to include in a future <code>ListRoutes</code>\n         request. When the results of a <code>ListRoutes</code> request exceed\n         <code>limit</code>, you can use this value to retrieve the next page of\n         results. This value is <code>null</code> when there are no more results to\n         return.",
                        "type": "string"
                    },
                    "routes": {
                        "description": "The list of existing routes for the specified service mesh and virtual router.",
                        "items": {
                            "description": "An object representing a route returned by a list operation.",
                            "properties": {
                                "arn": {
                                    "description": "The full Amazon Resource Name (ARN) for the route.",
                                    "type": "string"
                                },
                                "meshName": {
                                    "description": "The name of the service mesh that the route resides in.",
                                    "maxLength": 255,
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "routeName": {
                                    "description": "The name of the route.",
                                    "maxLength": 255,
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "virtualRouterName": {
                                    "description": "The virtual router that the route is associated with.",
                                    "maxLength": 255,
                                    "minLength": 1,
                                    "type": "string"
                                }
                            },
                            "required": [
                                "arn",
                                "meshName",
                                "routeName",
                                "virtualRouterName"
                            ],
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "routes"
                ],
                "type": "object"
            },
            "ListVirtualNodesInput": {
                "description": "",
                "properties": {},
                "type": "object"
            },
            "ListVirtualNodesLimit": {
                "maximum": 100,
                "minimum": 1,
                "type": "integer"
            },
            "ListVirtualNodesOutput": {
                "description": "",
                "properties": {
                    "nextToken": {
                        "description": "The <code>nextToken</code> value to include in a future <code>ListVirtualNodes</code>\n         request. When the results of a <code>ListVirtualNodes</code> request exceed\n         <code>limit</code>, you can use this value to retrieve the next page of\n         results. This value is <code>null</code> when there are no more results to\n         return.",
                        "type": "string"
                    },
                    "virtualNodes": {
                        "description": "The list of existing virtual nodes for the specified service mesh.",
                        "items": {
                            "description": "An object representing a virtual node returned by a list operation.",
                            "properties": {
                                "arn": {
                                    "description": "The full Amazon Resource Name (ARN) for the virtual node.",
                                    "type": "string"
                                },
                                "meshName": {
                                    "description": "The name of the service mesh that the virtual node resides in.",
                                    "maxLength": 255,
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "virtualNodeName": {
                                    "description": "The name of the virtual node.",
                                    "maxLength": 255,
                                    "minLength": 1,
                                    "type": "string"
                                }
                            },
                            "required": [
                                "arn",
                                "meshName",
                                "virtualNodeName"
                            ],
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "virtualNodes"
                ],
                "type": "object"
            },
            "ListVirtualRoutersInput": {
                "description": "",
                "properties": {},
                "type": "object"
            },
            "ListVirtualRoutersLimit": {
                "maximum": 100,
                "minimum": 1,
                "type": "integer"
            },
            "ListVirtualRoutersOutput": {
                "description": "",
                "properties": {
                    "nextToken": {
                        "description": "The <code>nextToken</code> value to include in a future <code>ListVirtualRouters</code>\n         request. When the results of a <code>ListVirtualRouters</code> request exceed\n         <code>limit</code>, you can use this value to retrieve the next page of\n         results. This value is <code>null</code> when there are no more results to\n         return.",
                        "type": "string"
                    },
                    "virtualRouters": {
                        "description": "The list of existing virtual routers for the specified service mesh.",
                        "items": {
                            "description": "An object representing a virtual router returned by a list operation.",
                            "properties": {
                                "arn": {
                                    "description": "The full Amazon Resource Name (ARN) for the virtual router.",
                                    "type": "string"
                                },
                                "meshName": {
                                    "description": "The name of the service mesh that the virtual router resides in.",
                                    "maxLength": 255,
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "virtualRouterName": {
                                    "description": "The name of the virtual router.",
                                    "maxLength": 255,
                                    "minLength": 1,
                                    "type": "string"
                                }
                            },
                            "required": [
                                "arn",
                                "meshName",
                                "virtualRouterName"
                            ],
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "virtualRouters"
                ],
                "type": "object"
            },
            "ListVirtualServicesInput": {
                "description": "",
                "properties": {},
                "type": "object"
            },
            "ListVirtualServicesLimit": {
                "maximum": 100,
                "minimum": 1,
                "type": "integer"
            },
            "ListVirtualServicesOutput": {
                "description": "",
                "properties": {
                    "nextToken": {
                        "description": "The <code>nextToken</code> value to include in a future <code>ListVirtualServices</code>\n         request. When the results of a <code>ListVirtualServices</code> request exceed\n            <code>limit</code>, you can use this value to retrieve the next page of results. This\n         value is <code>null</code> when there are no more results to return.",
                        "type": "string"
                    },
                    "virtualServices": {
                        "description": "The list of existing virtual services for the specified service mesh.",
                        "items": {
                            "description": "An object representing a virtual service returned by a list operation.",
                            "properties": {
                                "arn": {
                                    "description": "The full Amazon Resource Name (ARN) for the virtual service.",
                                    "type": "string"
                                },
                                "meshName": {
                                    "description": "The name of the service mesh that the virtual service resides in.",
                                    "maxLength": 255,
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "virtualServiceName": {
                                    "description": "The name of the virtual service.",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "arn",
                                "meshName",
                                "virtualServiceName"
                            ],
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "virtualServices"
                ],
                "type": "object"
            },
            "Listener": {
                "description": "An object representing a listener for a virtual node.",
                "properties": {
                    "healthCheck": {
                        "description": "The health check information for the listener.",
                        "properties": {
                            "healthyThreshold": {
                                "description": "The number of consecutive successful health checks that must occur before declaring\n         listener healthy.",
                                "maximum": 10,
                                "minimum": 2,
                                "type": "integer"
                            },
                            "intervalMillis": {
                                "description": "The time period in milliseconds between each health check execution.",
                                "maximum": 300000,
                                "minimum": 5000,
                                "type": "integer"
                            },
                            "path": {
                                "description": "The destination path for the health check request. This is required only if the\n         specified protocol is HTTP. If the protocol is TCP, this parameter is ignored.",
                                "type": "string"
                            },
                            "port": {
                                "description": "The destination port for the health check request. This port must match the port defined\n         in the <a>PortMapping</a> for the listener.",
                                "maximum": 65535,
                                "minimum": 1,
                                "type": "integer"
                            },
                            "protocol": {
                                "description": "The protocol for the health check request.",
                                "enum": [
                                    "http",
                                    "tcp"
                                ],
                                "type": "string"
                            },
                            "timeoutMillis": {
                                "description": "The amount of time to wait when receiving a response from the health check, in\n         milliseconds.",
                                "maximum": 60000,
                                "minimum": 2000,
                                "type": "integer"
                            },
                            "unhealthyThreshold": {
                                "description": "The number of consecutive failed health checks that must occur before declaring a\n         virtual node unhealthy. ",
                                "maximum": 10,
                                "minimum": 2,
                                "type": "integer"
                            }
                        },
                        "required": [
                            "healthyThreshold",
                            "intervalMillis",
                            "protocol",
                            "timeoutMillis",
                            "unhealthyThreshold"
                        ],
                        "type": "object"
                    },
                    "portMapping": {
                        "description": "The port mapping information for the listener.",
                        "properties": {
                            "port": {
                                "description": "The port used for the port mapping.",
                                "maximum": 65535,
                                "minimum": 1,
                                "type": "integer"
                            },
                            "protocol": {
                                "description": "The protocol used for the port mapping.",
                                "enum": [
                                    "http",
                                    "tcp"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "port",
                            "protocol"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "portMapping"
                ],
                "type": "object"
            },
            "Listeners": {
                "items": {
                    "description": "An object representing a listener for a virtual node.",
                    "properties": {
                        "healthCheck": {
                            "description": "The health check information for the listener.",
                            "properties": {
                                "healthyThreshold": {
                                    "description": "The number of consecutive successful health checks that must occur before declaring\n         listener healthy.",
                                    "maximum": 10,
                                    "minimum": 2,
                                    "type": "integer"
                                },
                                "intervalMillis": {
                                    "description": "The time period in milliseconds between each health check execution.",
                                    "maximum": 300000,
                                    "minimum": 5000,
                                    "type": "integer"
                                },
                                "path": {
                                    "description": "The destination path for the health check request. This is required only if the\n         specified protocol is HTTP. If the protocol is TCP, this parameter is ignored.",
                                    "type": "string"
                                },
                                "port": {
                                    "description": "The destination port for the health check request. This port must match the port defined\n         in the <a>PortMapping</a> for the listener.",
                                    "maximum": 65535,
                                    "minimum": 1,
                                    "type": "integer"
                                },
                                "protocol": {
                                    "description": "The protocol for the health check request.",
                                    "enum": [
                                        "http",
                                        "tcp"
                                    ],
                                    "type": "string"
                                },
                                "timeoutMillis": {
                                    "description": "The amount of time to wait when receiving a response from the health check, in\n         milliseconds.",
                                    "maximum": 60000,
                                    "minimum": 2000,
                                    "type": "integer"
                                },
                                "unhealthyThreshold": {
                                    "description": "The number of consecutive failed health checks that must occur before declaring a\n         virtual node unhealthy. ",
                                    "maximum": 10,
                                    "minimum": 2,
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "healthyThreshold",
                                "intervalMillis",
                                "protocol",
                                "timeoutMillis",
                                "unhealthyThreshold"
                            ],
                            "type": "object"
                        },
                        "portMapping": {
                            "description": "The port mapping information for the listener.",
                            "properties": {
                                "port": {
                                    "description": "The port used for the port mapping.",
                                    "maximum": 65535,
                                    "minimum": 1,
                                    "type": "integer"
                                },
                                "protocol": {
                                    "description": "The protocol used for the port mapping.",
                                    "enum": [
                                        "http",
                                        "tcp"
                                    ],
                                    "type": "string"
                                }
                            },
                            "required": [
                                "port",
                                "protocol"
                            ],
                            "type": "object"
                        }
                    },
                    "required": [
                        "portMapping"
                    ],
                    "type": "object"
                },
                "type": "array"
            },
            "Long": {
                "type": "integer"
            },
            "MeshData": {
                "description": "An object representing a service mesh returned by a describe operation.",
                "properties": {
                    "meshName": {
                        "description": "The name of the service mesh.",
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string"
                    },
                    "metadata": {
                        "description": "The associated metadata for the service mesh.",
                        "properties": {
                            "arn": {
                                "description": "<p>The full Amazon Resource Name (ARN) for the resource.</p>\n         <note>\n            <p>After you create a virtual node, set this value (either the full ARN or the\n            truncated resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>,\n            as the <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's\n            Envoy proxy container in your task definition or pod spec. This is then mapped to the\n               <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>\n            <p>If you require your Envoy stats or tracing to use a different name, you can override\n            the <code>node.cluster</code> value that is set by\n               <code>APPMESH_VIRTUAL_NODE_NAME</code> with the\n               <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>\n         </note>",
                                "type": "string"
                            },
                            "createdAt": {
                                "description": "The Unix epoch timestamp in seconds for when the resource was created.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "lastUpdatedAt": {
                                "description": "The Unix epoch timestamp in seconds for when the resource was last updated.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "uid": {
                                "description": "The unique identifier for the resource.",
                                "type": "string"
                            },
                            "version": {
                                "description": "The version of the resource. Resources are created at version 1, and this version is\n         incremented each time that they're updated.",
                                "type": "integer"
                            }
                        },
                        "required": [
                            "arn",
                            "createdAt",
                            "lastUpdatedAt",
                            "uid",
                            "version"
                        ],
                        "type": "object"
                    },
                    "status": {
                        "description": "The status of the service mesh.",
                        "properties": {
                            "status": {
                                "description": "The current mesh status.",
                                "enum": [
                                    "ACTIVE",
                                    "DELETED",
                                    "INACTIVE"
                                ],
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "meshName",
                    "metadata",
                    "status"
                ],
                "type": "object"
            },
            "MeshList": {
                "items": {
                    "description": "An object representing a service mesh returned by a list operation.",
                    "properties": {
                        "arn": {
                            "description": "The full Amazon Resource Name (ARN) of the service mesh.",
                            "type": "string"
                        },
                        "meshName": {
                            "description": "The name of the service mesh.",
                            "maxLength": 255,
                            "minLength": 1,
                            "type": "string"
                        }
                    },
                    "required": [
                        "arn",
                        "meshName"
                    ],
                    "type": "object"
                },
                "type": "array"
            },
            "MeshRef": {
                "description": "An object representing a service mesh returned by a list operation.",
                "properties": {
                    "arn": {
                        "description": "The full Amazon Resource Name (ARN) of the service mesh.",
                        "type": "string"
                    },
                    "meshName": {
                        "description": "The name of the service mesh.",
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "arn",
                    "meshName"
                ],
                "type": "object"
            },
            "MeshStatus": {
                "description": "An object representing the status of a service mesh.",
                "properties": {
                    "status": {
                        "description": "The current mesh status.",
                        "enum": [
                            "ACTIVE",
                            "DELETED",
                            "INACTIVE"
                        ],
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "MeshStatusCode": {
                "enum": [
                    "ACTIVE",
                    "DELETED",
                    "INACTIVE"
                ],
                "type": "string"
            },
            "NotFoundException": {},
            "PercentInt": {
                "maximum": 100,
                "minimum": 0,
                "type": "integer"
            },
            "PortMapping": {
                "description": "An object representing a virtual node or virtual router listener port mapping.",
                "properties": {
                    "port": {
                        "description": "The port used for the port mapping.",
                        "maximum": 65535,
                        "minimum": 1,
                        "type": "integer"
                    },
                    "protocol": {
                        "description": "The protocol used for the port mapping.",
                        "enum": [
                            "http",
                            "tcp"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "port",
                    "protocol"
                ],
                "type": "object"
            },
            "PortNumber": {
                "maximum": 65535,
                "minimum": 1,
                "type": "integer"
            },
            "PortProtocol": {
                "enum": [
                    "http",
                    "tcp"
                ],
                "type": "string"
            },
            "ResourceInUseException": {},
            "ResourceMetadata": {
                "description": "An object representing metadata for a resource.",
                "properties": {
                    "arn": {
                        "description": "<p>The full Amazon Resource Name (ARN) for the resource.</p>\n         <note>\n            <p>After you create a virtual node, set this value (either the full ARN or the\n            truncated resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>,\n            as the <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's\n            Envoy proxy container in your task definition or pod spec. This is then mapped to the\n               <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>\n            <p>If you require your Envoy stats or tracing to use a different name, you can override\n            the <code>node.cluster</code> value that is set by\n               <code>APPMESH_VIRTUAL_NODE_NAME</code> with the\n               <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>\n         </note>",
                        "type": "string"
                    },
                    "createdAt": {
                        "description": "The Unix epoch timestamp in seconds for when the resource was created.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "lastUpdatedAt": {
                        "description": "The Unix epoch timestamp in seconds for when the resource was last updated.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "uid": {
                        "description": "The unique identifier for the resource.",
                        "type": "string"
                    },
                    "version": {
                        "description": "The version of the resource. Resources are created at version 1, and this version is\n         incremented each time that they're updated.",
                        "type": "integer"
                    }
                },
                "required": [
                    "arn",
                    "createdAt",
                    "lastUpdatedAt",
                    "uid",
                    "version"
                ],
                "type": "object"
            },
            "ResourceName": {
                "maxLength": 255,
                "minLength": 1,
                "type": "string"
            },
            "RouteData": {
                "description": "An object representing a route returned by a describe operation.",
                "properties": {
                    "meshName": {
                        "description": "The name of the service mesh that the route resides in.",
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string"
                    },
                    "metadata": {
                        "description": "The associated metadata for the route.",
                        "properties": {
                            "arn": {
                                "description": "<p>The full Amazon Resource Name (ARN) for the resource.</p>\n         <note>\n            <p>After you create a virtual node, set this value (either the full ARN or the\n            truncated resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>,\n            as the <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's\n            Envoy proxy container in your task definition or pod spec. This is then mapped to the\n               <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>\n            <p>If you require your Envoy stats or tracing to use a different name, you can override\n            the <code>node.cluster</code> value that is set by\n               <code>APPMESH_VIRTUAL_NODE_NAME</code> with the\n               <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>\n         </note>",
                                "type": "string"
                            },
                            "createdAt": {
                                "description": "The Unix epoch timestamp in seconds for when the resource was created.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "lastUpdatedAt": {
                                "description": "The Unix epoch timestamp in seconds for when the resource was last updated.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "uid": {
                                "description": "The unique identifier for the resource.",
                                "type": "string"
                            },
                            "version": {
                                "description": "The version of the resource. Resources are created at version 1, and this version is\n         incremented each time that they're updated.",
                                "type": "integer"
                            }
                        },
                        "required": [
                            "arn",
                            "createdAt",
                            "lastUpdatedAt",
                            "uid",
                            "version"
                        ],
                        "type": "object"
                    },
                    "routeName": {
                        "description": "The name of the route.",
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string"
                    },
                    "spec": {
                        "description": "The specifications of the route.",
                        "properties": {
                            "httpRoute": {
                                "description": "The HTTP routing information for the route.",
                                "properties": {
                                    "action": {
                                        "description": "The action to take if a match is determined.",
                                        "properties": {
                                            "weightedTargets": {
                                                "description": "The targets that traffic is routed to when a request matches the route. You can specify\n         one or more targets and their relative weights to distribute traffic with.",
                                                "items": {
                                                    "description": "An object representing a target and its relative weight. Traffic is distributed across\n         targets according to their relative weight. For example, a weighted target with a relative\n         weight of 50 receives five times as much traffic as one with a relative weight of\n         10.",
                                                    "properties": {
                                                        "virtualNode": {
                                                            "description": "The virtual node to associate with the weighted target.",
                                                            "maxLength": 255,
                                                            "minLength": 1,
                                                            "type": "string"
                                                        },
                                                        "weight": {
                                                            "description": "The relative weight of the weighted target.",
                                                            "maximum": 100,
                                                            "minimum": 0,
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "required": [
                                                        "virtualNode",
                                                        "weight"
                                                    ],
                                                    "type": "object"
                                                },
                                                "type": "array"
                                            }
                                        },
                                        "required": [
                                            "weightedTargets"
                                        ],
                                        "type": "object"
                                    },
                                    "match": {
                                        "description": "The criteria for determining an HTTP request match.",
                                        "properties": {
                                            "prefix": {
                                                "description": "Specifies the path to match requests with. This parameter must always start with\n            <code>/</code>, which by itself matches all requests to the virtual router service name.\n         You can also match for path-based routing of requests. For example, if your virtual router\n         service name is <code>my-service.local</code> and you want the route to match requests to\n            <code>my-service.local/metrics</code>, your prefix should be\n         <code>/metrics</code>.",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "prefix"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "required": [
                                    "action",
                                    "match"
                                ],
                                "type": "object"
                            }
                        },
                        "type": "object"
                    },
                    "status": {
                        "description": "The status of the route.",
                        "properties": {
                            "status": {
                                "description": "The current status for the route.",
                                "enum": [
                                    "ACTIVE",
                                    "DELETED",
                                    "INACTIVE"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "status"
                        ],
                        "type": "object"
                    },
                    "virtualRouterName": {
                        "description": "The virtual router that the route is associated with.",
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "meshName",
                    "metadata",
                    "routeName",
                    "spec",
                    "status",
                    "virtualRouterName"
                ],
                "type": "object"
            },
            "RouteList": {
                "items": {
                    "description": "An object representing a route returned by a list operation.",
                    "properties": {
                        "arn": {
                            "description": "The full Amazon Resource Name (ARN) for the route.",
                            "type": "string"
                        },
                        "meshName": {
                            "description": "The name of the service mesh that the route resides in.",
                            "maxLength": 255,
                            "minLength": 1,
                            "type": "string"
                        },
                        "routeName": {
                            "description": "The name of the route.",
                            "maxLength": 255,
                            "minLength": 1,
                            "type": "string"
                        },
                        "virtualRouterName": {
                            "description": "The virtual router that the route is associated with.",
                            "maxLength": 255,
                            "minLength": 1,
                            "type": "string"
                        }
                    },
                    "required": [
                        "arn",
                        "meshName",
                        "routeName",
                        "virtualRouterName"
                    ],
                    "type": "object"
                },
                "type": "array"
            },
            "RouteRef": {
                "description": "An object representing a route returned by a list operation.",
                "properties": {
                    "arn": {
                        "description": "The full Amazon Resource Name (ARN) for the route.",
                        "type": "string"
                    },
                    "meshName": {
                        "description": "The name of the service mesh that the route resides in.",
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string"
                    },
                    "routeName": {
                        "description": "The name of the route.",
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string"
                    },
                    "virtualRouterName": {
                        "description": "The virtual router that the route is associated with.",
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "arn",
                    "meshName",
                    "routeName",
                    "virtualRouterName"
                ],
                "type": "object"
            },
            "RouteSpec": {
                "description": "An object representing the specification of a route.",
                "properties": {
                    "httpRoute": {
                        "description": "The HTTP routing information for the route.",
                        "properties": {
                            "action": {
                                "description": "The action to take if a match is determined.",
                                "properties": {
                                    "weightedTargets": {
                                        "description": "The targets that traffic is routed to when a request matches the route. You can specify\n         one or more targets and their relative weights to distribute traffic with.",
                                        "items": {
                                            "description": "An object representing a target and its relative weight. Traffic is distributed across\n         targets according to their relative weight. For example, a weighted target with a relative\n         weight of 50 receives five times as much traffic as one with a relative weight of\n         10.",
                                            "properties": {
                                                "virtualNode": {
                                                    "description": "The virtual node to associate with the weighted target.",
                                                    "maxLength": 255,
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "weight": {
                                                    "description": "The relative weight of the weighted target.",
                                                    "maximum": 100,
                                                    "minimum": 0,
                                                    "type": "integer"
                                                }
                                            },
                                            "required": [
                                                "virtualNode",
                                                "weight"
                                            ],
                                            "type": "object"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "weightedTargets"
                                ],
                                "type": "object"
                            },
                            "match": {
                                "description": "The criteria for determining an HTTP request match.",
                                "properties": {
                                    "prefix": {
                                        "description": "Specifies the path to match requests with. This parameter must always start with\n            <code>/</code>, which by itself matches all requests to the virtual router service name.\n         You can also match for path-based routing of requests. For example, if your virtual router\n         service name is <code>my-service.local</code> and you want the route to match requests to\n            <code>my-service.local/metrics</code>, your prefix should be\n         <code>/metrics</code>.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "prefix"
                                ],
                                "type": "object"
                            }
                        },
                        "required": [
                            "action",
                            "match"
                        ],
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "RouteStatus": {
                "description": "An object representing the current status of a route.",
                "properties": {
                    "status": {
                        "description": "The current status for the route.",
                        "enum": [
                            "ACTIVE",
                            "DELETED",
                            "INACTIVE"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "status"
                ],
                "type": "object"
            },
            "RouteStatusCode": {
                "enum": [
                    "ACTIVE",
                    "DELETED",
                    "INACTIVE"
                ],
                "type": "string"
            },
            "ServiceDiscovery": {
                "description": "An object representing the service discovery information for a virtual node.",
                "properties": {
                    "dns": {
                        "description": "Specifies the DNS information for the virtual node.",
                        "properties": {
                            "hostname": {
                                "description": "Specifies the DNS service discovery hostname for the virtual node. ",
                                "type": "string"
                            }
                        },
                        "required": [
                            "hostname"
                        ],
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "ServiceName": {
                "type": "string"
            },
            "ServiceUnavailableException": {},
            "String": {
                "type": "string"
            },
            "Timestamp": {
                "format": "date-time",
                "type": "string"
            },
            "TooManyRequestsException": {},
            "UpdateRouteInput": {
                "description": "",
                "properties": {
                    "clientToken": {
                        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the\nrequest. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                        "type": "string"
                    },
                    "spec": {
                        "description": "The new route specification to apply. This overwrites the existing data.",
                        "properties": {
                            "httpRoute": {
                                "description": "The HTTP routing information for the route.",
                                "properties": {
                                    "action": {
                                        "description": "The action to take if a match is determined.",
                                        "properties": {
                                            "weightedTargets": {
                                                "description": "The targets that traffic is routed to when a request matches the route. You can specify\n         one or more targets and their relative weights to distribute traffic with.",
                                                "items": {
                                                    "description": "An object representing a target and its relative weight. Traffic is distributed across\n         targets according to their relative weight. For example, a weighted target with a relative\n         weight of 50 receives five times as much traffic as one with a relative weight of\n         10.",
                                                    "properties": {
                                                        "virtualNode": {
                                                            "description": "The virtual node to associate with the weighted target.",
                                                            "maxLength": 255,
                                                            "minLength": 1,
                                                            "type": "string"
                                                        },
                                                        "weight": {
                                                            "description": "The relative weight of the weighted target.",
                                                            "maximum": 100,
                                                            "minimum": 0,
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "required": [
                                                        "virtualNode",
                                                        "weight"
                                                    ],
                                                    "type": "object"
                                                },
                                                "type": "array"
                                            }
                                        },
                                        "required": [
                                            "weightedTargets"
                                        ],
                                        "type": "object"
                                    },
                                    "match": {
                                        "description": "The criteria for determining an HTTP request match.",
                                        "properties": {
                                            "prefix": {
                                                "description": "Specifies the path to match requests with. This parameter must always start with\n            <code>/</code>, which by itself matches all requests to the virtual router service name.\n         You can also match for path-based routing of requests. For example, if your virtual router\n         service name is <code>my-service.local</code> and you want the route to match requests to\n            <code>my-service.local/metrics</code>, your prefix should be\n         <code>/metrics</code>.",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "prefix"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "required": [
                                    "action",
                                    "match"
                                ],
                                "type": "object"
                            }
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "spec"
                ],
                "type": "object"
            },
            "UpdateRouteOutput": {
                "description": "",
                "properties": {
                    "route": {
                        "description": "A full description of the route that was updated.",
                        "properties": {
                            "meshName": {
                                "description": "The name of the service mesh that the route resides in.",
                                "maxLength": 255,
                                "minLength": 1,
                                "type": "string"
                            },
                            "metadata": {
                                "description": "The associated metadata for the route.",
                                "properties": {
                                    "arn": {
                                        "description": "<p>The full Amazon Resource Name (ARN) for the resource.</p>\n         <note>\n            <p>After you create a virtual node, set this value (either the full ARN or the\n            truncated resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>,\n            as the <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's\n            Envoy proxy container in your task definition or pod spec. This is then mapped to the\n               <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>\n            <p>If you require your Envoy stats or tracing to use a different name, you can override\n            the <code>node.cluster</code> value that is set by\n               <code>APPMESH_VIRTUAL_NODE_NAME</code> with the\n               <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>\n         </note>",
                                        "type": "string"
                                    },
                                    "createdAt": {
                                        "description": "The Unix epoch timestamp in seconds for when the resource was created.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "lastUpdatedAt": {
                                        "description": "The Unix epoch timestamp in seconds for when the resource was last updated.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "uid": {
                                        "description": "The unique identifier for the resource.",
                                        "type": "string"
                                    },
                                    "version": {
                                        "description": "The version of the resource. Resources are created at version 1, and this version is\n         incremented each time that they're updated.",
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "arn",
                                    "createdAt",
                                    "lastUpdatedAt",
                                    "uid",
                                    "version"
                                ],
                                "type": "object"
                            },
                            "routeName": {
                                "description": "The name of the route.",
                                "maxLength": 255,
                                "minLength": 1,
                                "type": "string"
                            },
                            "spec": {
                                "description": "The specifications of the route.",
                                "properties": {
                                    "httpRoute": {
                                        "description": "The HTTP routing information for the route.",
                                        "properties": {
                                            "action": {
                                                "description": "The action to take if a match is determined.",
                                                "properties": {
                                                    "weightedTargets": {
                                                        "description": "The targets that traffic is routed to when a request matches the route. You can specify\n         one or more targets and their relative weights to distribute traffic with.",
                                                        "items": {
                                                            "description": "An object representing a target and its relative weight. Traffic is distributed across\n         targets according to their relative weight. For example, a weighted target with a relative\n         weight of 50 receives five times as much traffic as one with a relative weight of\n         10.",
                                                            "properties": {
                                                                "virtualNode": {
                                                                    "description": "The virtual node to associate with the weighted target.",
                                                                    "maxLength": 255,
                                                                    "minLength": 1,
                                                                    "type": "string"
                                                                },
                                                                "weight": {
                                                                    "description": "The relative weight of the weighted target.",
                                                                    "maximum": 100,
                                                                    "minimum": 0,
                                                                    "type": "integer"
                                                                }
                                                            },
                                                            "required": [
                                                                "virtualNode",
                                                                "weight"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    }
                                                },
                                                "required": [
                                                    "weightedTargets"
                                                ],
                                                "type": "object"
                                            },
                                            "match": {
                                                "description": "The criteria for determining an HTTP request match.",
                                                "properties": {
                                                    "prefix": {
                                                        "description": "Specifies the path to match requests with. This parameter must always start with\n            <code>/</code>, which by itself matches all requests to the virtual router service name.\n         You can also match for path-based routing of requests. For example, if your virtual router\n         service name is <code>my-service.local</code> and you want the route to match requests to\n            <code>my-service.local/metrics</code>, your prefix should be\n         <code>/metrics</code>.",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "prefix"
                                                ],
                                                "type": "object"
                                            }
                                        },
                                        "required": [
                                            "action",
                                            "match"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "status": {
                                "description": "The status of the route.",
                                "properties": {
                                    "status": {
                                        "description": "The current status for the route.",
                                        "enum": [
                                            "ACTIVE",
                                            "DELETED",
                                            "INACTIVE"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "status"
                                ],
                                "type": "object"
                            },
                            "virtualRouterName": {
                                "description": "The virtual router that the route is associated with.",
                                "maxLength": 255,
                                "minLength": 1,
                                "type": "string"
                            }
                        },
                        "required": [
                            "meshName",
                            "metadata",
                            "routeName",
                            "spec",
                            "status",
                            "virtualRouterName"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "route"
                ],
                "type": "object"
            },
            "UpdateVirtualNodeInput": {
                "description": "",
                "properties": {
                    "clientToken": {
                        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the\nrequest. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                        "type": "string"
                    },
                    "spec": {
                        "description": "The new virtual node specification to apply. This overwrites the existing data.",
                        "properties": {
                            "backends": {
                                "description": "The backends that the virtual node is expected to send outbound traffic to.",
                                "items": {
                                    "description": "An object representing the backends that a virtual node is expected to send outbound\n         traffic to. ",
                                    "properties": {
                                        "virtualService": {
                                            "description": "Specifies a virtual service to use as a backend for a virtual node. ",
                                            "properties": {
                                                "virtualServiceName": {
                                                    "description": "The name of the virtual service that is acting as a virtual node backend.",
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "virtualServiceName"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "listeners": {
                                "description": "The listeners that the virtual node is expected to receive inbound traffic from. Currently only one listener is supported per virtual node.",
                                "items": {
                                    "description": "An object representing a listener for a virtual node.",
                                    "properties": {
                                        "healthCheck": {
                                            "description": "The health check information for the listener.",
                                            "properties": {
                                                "healthyThreshold": {
                                                    "description": "The number of consecutive successful health checks that must occur before declaring\n         listener healthy.",
                                                    "maximum": 10,
                                                    "minimum": 2,
                                                    "type": "integer"
                                                },
                                                "intervalMillis": {
                                                    "description": "The time period in milliseconds between each health check execution.",
                                                    "maximum": 300000,
                                                    "minimum": 5000,
                                                    "type": "integer"
                                                },
                                                "path": {
                                                    "description": "The destination path for the health check request. This is required only if the\n         specified protocol is HTTP. If the protocol is TCP, this parameter is ignored.",
                                                    "type": "string"
                                                },
                                                "port": {
                                                    "description": "The destination port for the health check request. This port must match the port defined\n         in the <a>PortMapping</a> for the listener.",
                                                    "maximum": 65535,
                                                    "minimum": 1,
                                                    "type": "integer"
                                                },
                                                "protocol": {
                                                    "description": "The protocol for the health check request.",
                                                    "enum": [
                                                        "http",
                                                        "tcp"
                                                    ],
                                                    "type": "string"
                                                },
                                                "timeoutMillis": {
                                                    "description": "The amount of time to wait when receiving a response from the health check, in\n         milliseconds.",
                                                    "maximum": 60000,
                                                    "minimum": 2000,
                                                    "type": "integer"
                                                },
                                                "unhealthyThreshold": {
                                                    "description": "The number of consecutive failed health checks that must occur before declaring a\n         virtual node unhealthy. ",
                                                    "maximum": 10,
                                                    "minimum": 2,
                                                    "type": "integer"
                                                }
                                            },
                                            "required": [
                                                "healthyThreshold",
                                                "intervalMillis",
                                                "protocol",
                                                "timeoutMillis",
                                                "unhealthyThreshold"
                                            ],
                                            "type": "object"
                                        },
                                        "portMapping": {
                                            "description": "The port mapping information for the listener.",
                                            "properties": {
                                                "port": {
                                                    "description": "The port used for the port mapping.",
                                                    "maximum": 65535,
                                                    "minimum": 1,
                                                    "type": "integer"
                                                },
                                                "protocol": {
                                                    "description": "The protocol used for the port mapping.",
                                                    "enum": [
                                                        "http",
                                                        "tcp"
                                                    ],
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "port",
                                                "protocol"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "portMapping"
                                    ],
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "serviceDiscovery": {
                                "description": "The service discovery information for the virtual node.",
                                "properties": {
                                    "dns": {
                                        "description": "Specifies the DNS information for the virtual node.",
                                        "properties": {
                                            "hostname": {
                                                "description": "Specifies the DNS service discovery hostname for the virtual node. ",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "hostname"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "spec"
                ],
                "type": "object"
            },
            "UpdateVirtualNodeOutput": {
                "description": "",
                "properties": {
                    "virtualNode": {
                        "description": "A full description of the virtual node that was updated.",
                        "properties": {
                            "meshName": {
                                "description": "The name of the service mesh that the virtual node resides in.",
                                "maxLength": 255,
                                "minLength": 1,
                                "type": "string"
                            },
                            "metadata": {
                                "description": "The associated metadata for the virtual node.",
                                "properties": {
                                    "arn": {
                                        "description": "<p>The full Amazon Resource Name (ARN) for the resource.</p>\n         <note>\n            <p>After you create a virtual node, set this value (either the full ARN or the\n            truncated resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>,\n            as the <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's\n            Envoy proxy container in your task definition or pod spec. This is then mapped to the\n               <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>\n            <p>If you require your Envoy stats or tracing to use a different name, you can override\n            the <code>node.cluster</code> value that is set by\n               <code>APPMESH_VIRTUAL_NODE_NAME</code> with the\n               <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>\n         </note>",
                                        "type": "string"
                                    },
                                    "createdAt": {
                                        "description": "The Unix epoch timestamp in seconds for when the resource was created.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "lastUpdatedAt": {
                                        "description": "The Unix epoch timestamp in seconds for when the resource was last updated.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "uid": {
                                        "description": "The unique identifier for the resource.",
                                        "type": "string"
                                    },
                                    "version": {
                                        "description": "The version of the resource. Resources are created at version 1, and this version is\n         incremented each time that they're updated.",
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "arn",
                                    "createdAt",
                                    "lastUpdatedAt",
                                    "uid",
                                    "version"
                                ],
                                "type": "object"
                            },
                            "spec": {
                                "description": "The specifications of the virtual node.",
                                "properties": {
                                    "backends": {
                                        "description": "The backends that the virtual node is expected to send outbound traffic to.",
                                        "items": {
                                            "description": "An object representing the backends that a virtual node is expected to send outbound\n         traffic to. ",
                                            "properties": {
                                                "virtualService": {
                                                    "description": "Specifies a virtual service to use as a backend for a virtual node. ",
                                                    "properties": {
                                                        "virtualServiceName": {
                                                            "description": "The name of the virtual service that is acting as a virtual node backend.",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "virtualServiceName"
                                                    ],
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "listeners": {
                                        "description": "The listeners that the virtual node is expected to receive inbound traffic from. Currently only one listener is supported per virtual node.",
                                        "items": {
                                            "description": "An object representing a listener for a virtual node.",
                                            "properties": {
                                                "healthCheck": {
                                                    "description": "The health check information for the listener.",
                                                    "properties": {
                                                        "healthyThreshold": {
                                                            "description": "The number of consecutive successful health checks that must occur before declaring\n         listener healthy.",
                                                            "maximum": 10,
                                                            "minimum": 2,
                                                            "type": "integer"
                                                        },
                                                        "intervalMillis": {
                                                            "description": "The time period in milliseconds between each health check execution.",
                                                            "maximum": 300000,
                                                            "minimum": 5000,
                                                            "type": "integer"
                                                        },
                                                        "path": {
                                                            "description": "The destination path for the health check request. This is required only if the\n         specified protocol is HTTP. If the protocol is TCP, this parameter is ignored.",
                                                            "type": "string"
                                                        },
                                                        "port": {
                                                            "description": "The destination port for the health check request. This port must match the port defined\n         in the <a>PortMapping</a> for the listener.",
                                                            "maximum": 65535,
                                                            "minimum": 1,
                                                            "type": "integer"
                                                        },
                                                        "protocol": {
                                                            "description": "The protocol for the health check request.",
                                                            "enum": [
                                                                "http",
                                                                "tcp"
                                                            ],
                                                            "type": "string"
                                                        },
                                                        "timeoutMillis": {
                                                            "description": "The amount of time to wait when receiving a response from the health check, in\n         milliseconds.",
                                                            "maximum": 60000,
                                                            "minimum": 2000,
                                                            "type": "integer"
                                                        },
                                                        "unhealthyThreshold": {
                                                            "description": "The number of consecutive failed health checks that must occur before declaring a\n         virtual node unhealthy. ",
                                                            "maximum": 10,
                                                            "minimum": 2,
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "required": [
                                                        "healthyThreshold",
                                                        "intervalMillis",
                                                        "protocol",
                                                        "timeoutMillis",
                                                        "unhealthyThreshold"
                                                    ],
                                                    "type": "object"
                                                },
                                                "portMapping": {
                                                    "description": "The port mapping information for the listener.",
                                                    "properties": {
                                                        "port": {
                                                            "description": "The port used for the port mapping.",
                                                            "maximum": 65535,
                                                            "minimum": 1,
                                                            "type": "integer"
                                                        },
                                                        "protocol": {
                                                            "description": "The protocol used for the port mapping.",
                                                            "enum": [
                                                                "http",
                                                                "tcp"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "port",
                                                        "protocol"
                                                    ],
                                                    "type": "object"
                                                }
                                            },
                                            "required": [
                                                "portMapping"
                                            ],
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "serviceDiscovery": {
                                        "description": "The service discovery information for the virtual node.",
                                        "properties": {
                                            "dns": {
                                                "description": "Specifies the DNS information for the virtual node.",
                                                "properties": {
                                                    "hostname": {
                                                        "description": "Specifies the DNS service discovery hostname for the virtual node. ",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "hostname"
                                                ],
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "status": {
                                "description": "The current status for the virtual node.",
                                "properties": {
                                    "status": {
                                        "description": "The current status of the virtual node.",
                                        "enum": [
                                            "ACTIVE",
                                            "DELETED",
                                            "INACTIVE"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "status"
                                ],
                                "type": "object"
                            },
                            "virtualNodeName": {
                                "description": "The name of the virtual node.",
                                "maxLength": 255,
                                "minLength": 1,
                                "type": "string"
                            }
                        },
                        "required": [
                            "meshName",
                            "metadata",
                            "spec",
                            "status",
                            "virtualNodeName"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "virtualNode"
                ],
                "type": "object"
            },
            "UpdateVirtualRouterInput": {
                "description": "",
                "properties": {
                    "clientToken": {
                        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the\nrequest. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                        "type": "string"
                    },
                    "spec": {
                        "description": "The new virtual router specification to apply. This overwrites the existing data.",
                        "properties": {
                            "listeners": {
                                "description": "The listeners that the virtual router is expected to receive inbound traffic from. Currently only one listener is supported per virtual router.",
                                "items": {
                                    "description": "An object representing a virtual router listener.",
                                    "properties": {
                                        "portMapping": {
                                            "description": "An object representing a virtual node or virtual router listener port mapping.",
                                            "properties": {
                                                "port": {
                                                    "description": "The port used for the port mapping.",
                                                    "maximum": 65535,
                                                    "minimum": 1,
                                                    "type": "integer"
                                                },
                                                "protocol": {
                                                    "description": "The protocol used for the port mapping.",
                                                    "enum": [
                                                        "http",
                                                        "tcp"
                                                    ],
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "port",
                                                "protocol"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "portMapping"
                                    ],
                                    "type": "object"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "listeners"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "spec"
                ],
                "type": "object"
            },
            "UpdateVirtualRouterOutput": {
                "description": "",
                "properties": {
                    "virtualRouter": {
                        "description": "A full description of the virtual router that was updated.",
                        "properties": {
                            "meshName": {
                                "description": "The name of the service mesh that the virtual router resides in.",
                                "maxLength": 255,
                                "minLength": 1,
                                "type": "string"
                            },
                            "metadata": {
                                "description": "The associated metadata for the virtual router.",
                                "properties": {
                                    "arn": {
                                        "description": "<p>The full Amazon Resource Name (ARN) for the resource.</p>\n         <note>\n            <p>After you create a virtual node, set this value (either the full ARN or the\n            truncated resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>,\n            as the <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's\n            Envoy proxy container in your task definition or pod spec. This is then mapped to the\n               <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>\n            <p>If you require your Envoy stats or tracing to use a different name, you can override\n            the <code>node.cluster</code> value that is set by\n               <code>APPMESH_VIRTUAL_NODE_NAME</code> with the\n               <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>\n         </note>",
                                        "type": "string"
                                    },
                                    "createdAt": {
                                        "description": "The Unix epoch timestamp in seconds for when the resource was created.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "lastUpdatedAt": {
                                        "description": "The Unix epoch timestamp in seconds for when the resource was last updated.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "uid": {
                                        "description": "The unique identifier for the resource.",
                                        "type": "string"
                                    },
                                    "version": {
                                        "description": "The version of the resource. Resources are created at version 1, and this version is\n         incremented each time that they're updated.",
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "arn",
                                    "createdAt",
                                    "lastUpdatedAt",
                                    "uid",
                                    "version"
                                ],
                                "type": "object"
                            },
                            "spec": {
                                "description": "The specifications of the virtual router.",
                                "properties": {
                                    "listeners": {
                                        "description": "The listeners that the virtual router is expected to receive inbound traffic from. Currently only one listener is supported per virtual router.",
                                        "items": {
                                            "description": "An object representing a virtual router listener.",
                                            "properties": {
                                                "portMapping": {
                                                    "description": "An object representing a virtual node or virtual router listener port mapping.",
                                                    "properties": {
                                                        "port": {
                                                            "description": "The port used for the port mapping.",
                                                            "maximum": 65535,
                                                            "minimum": 1,
                                                            "type": "integer"
                                                        },
                                                        "protocol": {
                                                            "description": "The protocol used for the port mapping.",
                                                            "enum": [
                                                                "http",
                                                                "tcp"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "port",
                                                        "protocol"
                                                    ],
                                                    "type": "object"
                                                }
                                            },
                                            "required": [
                                                "portMapping"
                                            ],
                                            "type": "object"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "listeners"
                                ],
                                "type": "object"
                            },
                            "status": {
                                "description": "The current status of the virtual router.",
                                "properties": {
                                    "status": {
                                        "description": "The current status of the virtual router.",
                                        "enum": [
                                            "ACTIVE",
                                            "DELETED",
                                            "INACTIVE"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "status"
                                ],
                                "type": "object"
                            },
                            "virtualRouterName": {
                                "description": "The name of the virtual router.",
                                "maxLength": 255,
                                "minLength": 1,
                                "type": "string"
                            }
                        },
                        "required": [
                            "meshName",
                            "metadata",
                            "spec",
                            "status",
                            "virtualRouterName"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "virtualRouter"
                ],
                "type": "object"
            },
            "UpdateVirtualServiceInput": {
                "description": "",
                "properties": {
                    "clientToken": {
                        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the\nrequest. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
                        "type": "string"
                    },
                    "spec": {
                        "description": "The new virtual service specification to apply. This overwrites the existing\n         data.",
                        "properties": {
                            "provider": {
                                "description": "The App Mesh object that is acting as the provider for a virtual service. You can specify\n         a single virtual node or virtual router.",
                                "properties": {
                                    "virtualNode": {
                                        "description": "The virtual node associated with a virtual service.",
                                        "properties": {
                                            "virtualNodeName": {
                                                "description": "The name of the virtual node that is acting as a service provider.",
                                                "maxLength": 255,
                                                "minLength": 1,
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "virtualNodeName"
                                        ],
                                        "type": "object"
                                    },
                                    "virtualRouter": {
                                        "description": "The virtual router associated with a virtual service.",
                                        "properties": {
                                            "virtualRouterName": {
                                                "description": "The name of the virtual router that is acting as a service provider.",
                                                "maxLength": 255,
                                                "minLength": 1,
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "virtualRouterName"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "spec"
                ],
                "type": "object"
            },
            "UpdateVirtualServiceOutput": {
                "description": "",
                "properties": {
                    "virtualService": {
                        "description": "A full description of the virtual service that was updated.",
                        "properties": {
                            "meshName": {
                                "description": "The name of the service mesh that the virtual service resides in.",
                                "maxLength": 255,
                                "minLength": 1,
                                "type": "string"
                            },
                            "metadata": {
                                "description": "An object representing metadata for a resource.",
                                "properties": {
                                    "arn": {
                                        "description": "<p>The full Amazon Resource Name (ARN) for the resource.</p>\n         <note>\n            <p>After you create a virtual node, set this value (either the full ARN or the\n            truncated resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>,\n            as the <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's\n            Envoy proxy container in your task definition or pod spec. This is then mapped to the\n               <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>\n            <p>If you require your Envoy stats or tracing to use a different name, you can override\n            the <code>node.cluster</code> value that is set by\n               <code>APPMESH_VIRTUAL_NODE_NAME</code> with the\n               <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>\n         </note>",
                                        "type": "string"
                                    },
                                    "createdAt": {
                                        "description": "The Unix epoch timestamp in seconds for when the resource was created.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "lastUpdatedAt": {
                                        "description": "The Unix epoch timestamp in seconds for when the resource was last updated.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "uid": {
                                        "description": "The unique identifier for the resource.",
                                        "type": "string"
                                    },
                                    "version": {
                                        "description": "The version of the resource. Resources are created at version 1, and this version is\n         incremented each time that they're updated.",
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "arn",
                                    "createdAt",
                                    "lastUpdatedAt",
                                    "uid",
                                    "version"
                                ],
                                "type": "object"
                            },
                            "spec": {
                                "description": "The specifications of the virtual service.",
                                "properties": {
                                    "provider": {
                                        "description": "The App Mesh object that is acting as the provider for a virtual service. You can specify\n         a single virtual node or virtual router.",
                                        "properties": {
                                            "virtualNode": {
                                                "description": "The virtual node associated with a virtual service.",
                                                "properties": {
                                                    "virtualNodeName": {
                                                        "description": "The name of the virtual node that is acting as a service provider.",
                                                        "maxLength": 255,
                                                        "minLength": 1,
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "virtualNodeName"
                                                ],
                                                "type": "object"
                                            },
                                            "virtualRouter": {
                                                "description": "The virtual router associated with a virtual service.",
                                                "properties": {
                                                    "virtualRouterName": {
                                                        "description": "The name of the virtual router that is acting as a service provider.",
                                                        "maxLength": 255,
                                                        "minLength": 1,
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "virtualRouterName"
                                                ],
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            },
                            "status": {
                                "description": "The current status of the virtual service.",
                                "properties": {
                                    "status": {
                                        "description": "The current status of the virtual service.",
                                        "enum": [
                                            "ACTIVE",
                                            "DELETED",
                                            "INACTIVE"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "status"
                                ],
                                "type": "object"
                            },
                            "virtualServiceName": {
                                "description": "The name of the virtual service.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "meshName",
                            "metadata",
                            "spec",
                            "status",
                            "virtualServiceName"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "virtualService"
                ],
                "type": "object"
            },
            "VirtualNodeData": {
                "description": "An object representing a virtual node returned by a describe operation.",
                "properties": {
                    "meshName": {
                        "description": "The name of the service mesh that the virtual node resides in.",
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string"
                    },
                    "metadata": {
                        "description": "The associated metadata for the virtual node.",
                        "properties": {
                            "arn": {
                                "description": "<p>The full Amazon Resource Name (ARN) for the resource.</p>\n         <note>\n            <p>After you create a virtual node, set this value (either the full ARN or the\n            truncated resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>,\n            as the <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's\n            Envoy proxy container in your task definition or pod spec. This is then mapped to the\n               <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>\n            <p>If you require your Envoy stats or tracing to use a different name, you can override\n            the <code>node.cluster</code> value that is set by\n               <code>APPMESH_VIRTUAL_NODE_NAME</code> with the\n               <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>\n         </note>",
                                "type": "string"
                            },
                            "createdAt": {
                                "description": "The Unix epoch timestamp in seconds for when the resource was created.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "lastUpdatedAt": {
                                "description": "The Unix epoch timestamp in seconds for when the resource was last updated.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "uid": {
                                "description": "The unique identifier for the resource.",
                                "type": "string"
                            },
                            "version": {
                                "description": "The version of the resource. Resources are created at version 1, and this version is\n         incremented each time that they're updated.",
                                "type": "integer"
                            }
                        },
                        "required": [
                            "arn",
                            "createdAt",
                            "lastUpdatedAt",
                            "uid",
                            "version"
                        ],
                        "type": "object"
                    },
                    "spec": {
                        "description": "The specifications of the virtual node.",
                        "properties": {
                            "backends": {
                                "description": "The backends that the virtual node is expected to send outbound traffic to.",
                                "items": {
                                    "description": "An object representing the backends that a virtual node is expected to send outbound\n         traffic to. ",
                                    "properties": {
                                        "virtualService": {
                                            "description": "Specifies a virtual service to use as a backend for a virtual node. ",
                                            "properties": {
                                                "virtualServiceName": {
                                                    "description": "The name of the virtual service that is acting as a virtual node backend.",
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "virtualServiceName"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "listeners": {
                                "description": "The listeners that the virtual node is expected to receive inbound traffic from. Currently only one listener is supported per virtual node.",
                                "items": {
                                    "description": "An object representing a listener for a virtual node.",
                                    "properties": {
                                        "healthCheck": {
                                            "description": "The health check information for the listener.",
                                            "properties": {
                                                "healthyThreshold": {
                                                    "description": "The number of consecutive successful health checks that must occur before declaring\n         listener healthy.",
                                                    "maximum": 10,
                                                    "minimum": 2,
                                                    "type": "integer"
                                                },
                                                "intervalMillis": {
                                                    "description": "The time period in milliseconds between each health check execution.",
                                                    "maximum": 300000,
                                                    "minimum": 5000,
                                                    "type": "integer"
                                                },
                                                "path": {
                                                    "description": "The destination path for the health check request. This is required only if the\n         specified protocol is HTTP. If the protocol is TCP, this parameter is ignored.",
                                                    "type": "string"
                                                },
                                                "port": {
                                                    "description": "The destination port for the health check request. This port must match the port defined\n         in the <a>PortMapping</a> for the listener.",
                                                    "maximum": 65535,
                                                    "minimum": 1,
                                                    "type": "integer"
                                                },
                                                "protocol": {
                                                    "description": "The protocol for the health check request.",
                                                    "enum": [
                                                        "http",
                                                        "tcp"
                                                    ],
                                                    "type": "string"
                                                },
                                                "timeoutMillis": {
                                                    "description": "The amount of time to wait when receiving a response from the health check, in\n         milliseconds.",
                                                    "maximum": 60000,
                                                    "minimum": 2000,
                                                    "type": "integer"
                                                },
                                                "unhealthyThreshold": {
                                                    "description": "The number of consecutive failed health checks that must occur before declaring a\n         virtual node unhealthy. ",
                                                    "maximum": 10,
                                                    "minimum": 2,
                                                    "type": "integer"
                                                }
                                            },
                                            "required": [
                                                "healthyThreshold",
                                                "intervalMillis",
                                                "protocol",
                                                "timeoutMillis",
                                                "unhealthyThreshold"
                                            ],
                                            "type": "object"
                                        },
                                        "portMapping": {
                                            "description": "The port mapping information for the listener.",
                                            "properties": {
                                                "port": {
                                                    "description": "The port used for the port mapping.",
                                                    "maximum": 65535,
                                                    "minimum": 1,
                                                    "type": "integer"
                                                },
                                                "protocol": {
                                                    "description": "The protocol used for the port mapping.",
                                                    "enum": [
                                                        "http",
                                                        "tcp"
                                                    ],
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "port",
                                                "protocol"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "portMapping"
                                    ],
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "serviceDiscovery": {
                                "description": "The service discovery information for the virtual node.",
                                "properties": {
                                    "dns": {
                                        "description": "Specifies the DNS information for the virtual node.",
                                        "properties": {
                                            "hostname": {
                                                "description": "Specifies the DNS service discovery hostname for the virtual node. ",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "hostname"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "type": "object"
                    },
                    "status": {
                        "description": "The current status for the virtual node.",
                        "properties": {
                            "status": {
                                "description": "The current status of the virtual node.",
                                "enum": [
                                    "ACTIVE",
                                    "DELETED",
                                    "INACTIVE"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "status"
                        ],
                        "type": "object"
                    },
                    "virtualNodeName": {
                        "description": "The name of the virtual node.",
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "meshName",
                    "metadata",
                    "spec",
                    "status",
                    "virtualNodeName"
                ],
                "type": "object"
            },
            "VirtualNodeList": {
                "items": {
                    "description": "An object representing a virtual node returned by a list operation.",
                    "properties": {
                        "arn": {
                            "description": "The full Amazon Resource Name (ARN) for the virtual node.",
                            "type": "string"
                        },
                        "meshName": {
                            "description": "The name of the service mesh that the virtual node resides in.",
                            "maxLength": 255,
                            "minLength": 1,
                            "type": "string"
                        },
                        "virtualNodeName": {
                            "description": "The name of the virtual node.",
                            "maxLength": 255,
                            "minLength": 1,
                            "type": "string"
                        }
                    },
                    "required": [
                        "arn",
                        "meshName",
                        "virtualNodeName"
                    ],
                    "type": "object"
                },
                "type": "array"
            },
            "VirtualNodeRef": {
                "description": "An object representing a virtual node returned by a list operation.",
                "properties": {
                    "arn": {
                        "description": "The full Amazon Resource Name (ARN) for the virtual node.",
                        "type": "string"
                    },
                    "meshName": {
                        "description": "The name of the service mesh that the virtual node resides in.",
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string"
                    },
                    "virtualNodeName": {
                        "description": "The name of the virtual node.",
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "arn",
                    "meshName",
                    "virtualNodeName"
                ],
                "type": "object"
            },
            "VirtualNodeServiceProvider": {
                "description": "An object representing a virtual node service provider.",
                "properties": {
                    "virtualNodeName": {
                        "description": "The name of the virtual node that is acting as a service provider.",
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "virtualNodeName"
                ],
                "type": "object"
            },
            "VirtualNodeSpec": {
                "description": "An object representing the specification of a virtual node.",
                "properties": {
                    "backends": {
                        "description": "The backends that the virtual node is expected to send outbound traffic to.",
                        "items": {
                            "description": "An object representing the backends that a virtual node is expected to send outbound\n         traffic to. ",
                            "properties": {
                                "virtualService": {
                                    "description": "Specifies a virtual service to use as a backend for a virtual node. ",
                                    "properties": {
                                        "virtualServiceName": {
                                            "description": "The name of the virtual service that is acting as a virtual node backend.",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "virtualServiceName"
                                    ],
                                    "type": "object"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "listeners": {
                        "description": "The listeners that the virtual node is expected to receive inbound traffic from. Currently only one listener is supported per virtual node.",
                        "items": {
                            "description": "An object representing a listener for a virtual node.",
                            "properties": {
                                "healthCheck": {
                                    "description": "The health check information for the listener.",
                                    "properties": {
                                        "healthyThreshold": {
                                            "description": "The number of consecutive successful health checks that must occur before declaring\n         listener healthy.",
                                            "maximum": 10,
                                            "minimum": 2,
                                            "type": "integer"
                                        },
                                        "intervalMillis": {
                                            "description": "The time period in milliseconds between each health check execution.",
                                            "maximum": 300000,
                                            "minimum": 5000,
                                            "type": "integer"
                                        },
                                        "path": {
                                            "description": "The destination path for the health check request. This is required only if the\n         specified protocol is HTTP. If the protocol is TCP, this parameter is ignored.",
                                            "type": "string"
                                        },
                                        "port": {
                                            "description": "The destination port for the health check request. This port must match the port defined\n         in the <a>PortMapping</a> for the listener.",
                                            "maximum": 65535,
                                            "minimum": 1,
                                            "type": "integer"
                                        },
                                        "protocol": {
                                            "description": "The protocol for the health check request.",
                                            "enum": [
                                                "http",
                                                "tcp"
                                            ],
                                            "type": "string"
                                        },
                                        "timeoutMillis": {
                                            "description": "The amount of time to wait when receiving a response from the health check, in\n         milliseconds.",
                                            "maximum": 60000,
                                            "minimum": 2000,
                                            "type": "integer"
                                        },
                                        "unhealthyThreshold": {
                                            "description": "The number of consecutive failed health checks that must occur before declaring a\n         virtual node unhealthy. ",
                                            "maximum": 10,
                                            "minimum": 2,
                                            "type": "integer"
                                        }
                                    },
                                    "required": [
                                        "healthyThreshold",
                                        "intervalMillis",
                                        "protocol",
                                        "timeoutMillis",
                                        "unhealthyThreshold"
                                    ],
                                    "type": "object"
                                },
                                "portMapping": {
                                    "description": "The port mapping information for the listener.",
                                    "properties": {
                                        "port": {
                                            "description": "The port used for the port mapping.",
                                            "maximum": 65535,
                                            "minimum": 1,
                                            "type": "integer"
                                        },
                                        "protocol": {
                                            "description": "The protocol used for the port mapping.",
                                            "enum": [
                                                "http",
                                                "tcp"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "port",
                                        "protocol"
                                    ],
                                    "type": "object"
                                }
                            },
                            "required": [
                                "portMapping"
                            ],
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "serviceDiscovery": {
                        "description": "The service discovery information for the virtual node.",
                        "properties": {
                            "dns": {
                                "description": "Specifies the DNS information for the virtual node.",
                                "properties": {
                                    "hostname": {
                                        "description": "Specifies the DNS service discovery hostname for the virtual node. ",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "hostname"
                                ],
                                "type": "object"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "VirtualNodeStatus": {
                "description": "An object representing the current status of the virtual node.",
                "properties": {
                    "status": {
                        "description": "The current status of the virtual node.",
                        "enum": [
                            "ACTIVE",
                            "DELETED",
                            "INACTIVE"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "status"
                ],
                "type": "object"
            },
            "VirtualNodeStatusCode": {
                "enum": [
                    "ACTIVE",
                    "DELETED",
                    "INACTIVE"
                ],
                "type": "string"
            },
            "VirtualRouterData": {
                "description": "An object representing a virtual router returned by a describe operation.",
                "properties": {
                    "meshName": {
                        "description": "The name of the service mesh that the virtual router resides in.",
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string"
                    },
                    "metadata": {
                        "description": "The associated metadata for the virtual router.",
                        "properties": {
                            "arn": {
                                "description": "<p>The full Amazon Resource Name (ARN) for the resource.</p>\n         <note>\n            <p>After you create a virtual node, set this value (either the full ARN or the\n            truncated resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>,\n            as the <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's\n            Envoy proxy container in your task definition or pod spec. This is then mapped to the\n               <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>\n            <p>If you require your Envoy stats or tracing to use a different name, you can override\n            the <code>node.cluster</code> value that is set by\n               <code>APPMESH_VIRTUAL_NODE_NAME</code> with the\n               <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>\n         </note>",
                                "type": "string"
                            },
                            "createdAt": {
                                "description": "The Unix epoch timestamp in seconds for when the resource was created.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "lastUpdatedAt": {
                                "description": "The Unix epoch timestamp in seconds for when the resource was last updated.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "uid": {
                                "description": "The unique identifier for the resource.",
                                "type": "string"
                            },
                            "version": {
                                "description": "The version of the resource. Resources are created at version 1, and this version is\n         incremented each time that they're updated.",
                                "type": "integer"
                            }
                        },
                        "required": [
                            "arn",
                            "createdAt",
                            "lastUpdatedAt",
                            "uid",
                            "version"
                        ],
                        "type": "object"
                    },
                    "spec": {
                        "description": "The specifications of the virtual router.",
                        "properties": {
                            "listeners": {
                                "description": "The listeners that the virtual router is expected to receive inbound traffic from. Currently only one listener is supported per virtual router.",
                                "items": {
                                    "description": "An object representing a virtual router listener.",
                                    "properties": {
                                        "portMapping": {
                                            "description": "An object representing a virtual node or virtual router listener port mapping.",
                                            "properties": {
                                                "port": {
                                                    "description": "The port used for the port mapping.",
                                                    "maximum": 65535,
                                                    "minimum": 1,
                                                    "type": "integer"
                                                },
                                                "protocol": {
                                                    "description": "The protocol used for the port mapping.",
                                                    "enum": [
                                                        "http",
                                                        "tcp"
                                                    ],
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "port",
                                                "protocol"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "portMapping"
                                    ],
                                    "type": "object"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "listeners"
                        ],
                        "type": "object"
                    },
                    "status": {
                        "description": "The current status of the virtual router.",
                        "properties": {
                            "status": {
                                "description": "The current status of the virtual router.",
                                "enum": [
                                    "ACTIVE",
                                    "DELETED",
                                    "INACTIVE"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "status"
                        ],
                        "type": "object"
                    },
                    "virtualRouterName": {
                        "description": "The name of the virtual router.",
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "meshName",
                    "metadata",
                    "spec",
                    "status",
                    "virtualRouterName"
                ],
                "type": "object"
            },
            "VirtualRouterList": {
                "items": {
                    "description": "An object representing a virtual router returned by a list operation.",
                    "properties": {
                        "arn": {
                            "description": "The full Amazon Resource Name (ARN) for the virtual router.",
                            "type": "string"
                        },
                        "meshName": {
                            "description": "The name of the service mesh that the virtual router resides in.",
                            "maxLength": 255,
                            "minLength": 1,
                            "type": "string"
                        },
                        "virtualRouterName": {
                            "description": "The name of the virtual router.",
                            "maxLength": 255,
                            "minLength": 1,
                            "type": "string"
                        }
                    },
                    "required": [
                        "arn",
                        "meshName",
                        "virtualRouterName"
                    ],
                    "type": "object"
                },
                "type": "array"
            },
            "VirtualRouterListener": {
                "description": "An object representing a virtual router listener.",
                "properties": {
                    "portMapping": {
                        "description": "An object representing a virtual node or virtual router listener port mapping.",
                        "properties": {
                            "port": {
                                "description": "The port used for the port mapping.",
                                "maximum": 65535,
                                "minimum": 1,
                                "type": "integer"
                            },
                            "protocol": {
                                "description": "The protocol used for the port mapping.",
                                "enum": [
                                    "http",
                                    "tcp"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "port",
                            "protocol"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "portMapping"
                ],
                "type": "object"
            },
            "VirtualRouterListeners": {
                "items": {
                    "description": "An object representing a virtual router listener.",
                    "properties": {
                        "portMapping": {
                            "description": "An object representing a virtual node or virtual router listener port mapping.",
                            "properties": {
                                "port": {
                                    "description": "The port used for the port mapping.",
                                    "maximum": 65535,
                                    "minimum": 1,
                                    "type": "integer"
                                },
                                "protocol": {
                                    "description": "The protocol used for the port mapping.",
                                    "enum": [
                                        "http",
                                        "tcp"
                                    ],
                                    "type": "string"
                                }
                            },
                            "required": [
                                "port",
                                "protocol"
                            ],
                            "type": "object"
                        }
                    },
                    "required": [
                        "portMapping"
                    ],
                    "type": "object"
                },
                "type": "array"
            },
            "VirtualRouterRef": {
                "description": "An object representing a virtual router returned by a list operation.",
                "properties": {
                    "arn": {
                        "description": "The full Amazon Resource Name (ARN) for the virtual router.",
                        "type": "string"
                    },
                    "meshName": {
                        "description": "The name of the service mesh that the virtual router resides in.",
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string"
                    },
                    "virtualRouterName": {
                        "description": "The name of the virtual router.",
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "arn",
                    "meshName",
                    "virtualRouterName"
                ],
                "type": "object"
            },
            "VirtualRouterServiceProvider": {
                "description": "An object representing a virtual node service provider.",
                "properties": {
                    "virtualRouterName": {
                        "description": "The name of the virtual router that is acting as a service provider.",
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "virtualRouterName"
                ],
                "type": "object"
            },
            "VirtualRouterSpec": {
                "description": "An object representing the specification of a virtual router.",
                "properties": {
                    "listeners": {
                        "description": "The listeners that the virtual router is expected to receive inbound traffic from. Currently only one listener is supported per virtual router.",
                        "items": {
                            "description": "An object representing a virtual router listener.",
                            "properties": {
                                "portMapping": {
                                    "description": "An object representing a virtual node or virtual router listener port mapping.",
                                    "properties": {
                                        "port": {
                                            "description": "The port used for the port mapping.",
                                            "maximum": 65535,
                                            "minimum": 1,
                                            "type": "integer"
                                        },
                                        "protocol": {
                                            "description": "The protocol used for the port mapping.",
                                            "enum": [
                                                "http",
                                                "tcp"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "port",
                                        "protocol"
                                    ],
                                    "type": "object"
                                }
                            },
                            "required": [
                                "portMapping"
                            ],
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "listeners"
                ],
                "type": "object"
            },
            "VirtualRouterStatus": {
                "description": "An object representing the status of a virtual router. ",
                "properties": {
                    "status": {
                        "description": "The current status of the virtual router.",
                        "enum": [
                            "ACTIVE",
                            "DELETED",
                            "INACTIVE"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "status"
                ],
                "type": "object"
            },
            "VirtualRouterStatusCode": {
                "enum": [
                    "ACTIVE",
                    "DELETED",
                    "INACTIVE"
                ],
                "type": "string"
            },
            "VirtualServiceBackend": {
                "description": "An object representing a virtual service backend for a virtual node.",
                "properties": {
                    "virtualServiceName": {
                        "description": "The name of the virtual service that is acting as a virtual node backend.",
                        "type": "string"
                    }
                },
                "required": [
                    "virtualServiceName"
                ],
                "type": "object"
            },
            "VirtualServiceData": {
                "description": "An object representing a virtual service returned by a describe operation.",
                "properties": {
                    "meshName": {
                        "description": "The name of the service mesh that the virtual service resides in.",
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string"
                    },
                    "metadata": {
                        "description": "An object representing metadata for a resource.",
                        "properties": {
                            "arn": {
                                "description": "<p>The full Amazon Resource Name (ARN) for the resource.</p>\n         <note>\n            <p>After you create a virtual node, set this value (either the full ARN or the\n            truncated resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>,\n            as the <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's\n            Envoy proxy container in your task definition or pod spec. This is then mapped to the\n               <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>\n            <p>If you require your Envoy stats or tracing to use a different name, you can override\n            the <code>node.cluster</code> value that is set by\n               <code>APPMESH_VIRTUAL_NODE_NAME</code> with the\n               <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>\n         </note>",
                                "type": "string"
                            },
                            "createdAt": {
                                "description": "The Unix epoch timestamp in seconds for when the resource was created.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "lastUpdatedAt": {
                                "description": "The Unix epoch timestamp in seconds for when the resource was last updated.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "uid": {
                                "description": "The unique identifier for the resource.",
                                "type": "string"
                            },
                            "version": {
                                "description": "The version of the resource. Resources are created at version 1, and this version is\n         incremented each time that they're updated.",
                                "type": "integer"
                            }
                        },
                        "required": [
                            "arn",
                            "createdAt",
                            "lastUpdatedAt",
                            "uid",
                            "version"
                        ],
                        "type": "object"
                    },
                    "spec": {
                        "description": "The specifications of the virtual service.",
                        "properties": {
                            "provider": {
                                "description": "The App Mesh object that is acting as the provider for a virtual service. You can specify\n         a single virtual node or virtual router.",
                                "properties": {
                                    "virtualNode": {
                                        "description": "The virtual node associated with a virtual service.",
                                        "properties": {
                                            "virtualNodeName": {
                                                "description": "The name of the virtual node that is acting as a service provider.",
                                                "maxLength": 255,
                                                "minLength": 1,
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "virtualNodeName"
                                        ],
                                        "type": "object"
                                    },
                                    "virtualRouter": {
                                        "description": "The virtual router associated with a virtual service.",
                                        "properties": {
                                            "virtualRouterName": {
                                                "description": "The name of the virtual router that is acting as a service provider.",
                                                "maxLength": 255,
                                                "minLength": 1,
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "virtualRouterName"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "type": "object"
                    },
                    "status": {
                        "description": "The current status of the virtual service.",
                        "properties": {
                            "status": {
                                "description": "The current status of the virtual service.",
                                "enum": [
                                    "ACTIVE",
                                    "DELETED",
                                    "INACTIVE"
                                ],
                                "type": "string"
                            }
                        },
                        "required": [
                            "status"
                        ],
                        "type": "object"
                    },
                    "virtualServiceName": {
                        "description": "The name of the virtual service.",
                        "type": "string"
                    }
                },
                "required": [
                    "meshName",
                    "metadata",
                    "spec",
                    "status",
                    "virtualServiceName"
                ],
                "type": "object"
            },
            "VirtualServiceList": {
                "items": {
                    "description": "An object representing a virtual service returned by a list operation.",
                    "properties": {
                        "arn": {
                            "description": "The full Amazon Resource Name (ARN) for the virtual service.",
                            "type": "string"
                        },
                        "meshName": {
                            "description": "The name of the service mesh that the virtual service resides in.",
                            "maxLength": 255,
                            "minLength": 1,
                            "type": "string"
                        },
                        "virtualServiceName": {
                            "description": "The name of the virtual service.",
                            "type": "string"
                        }
                    },
                    "required": [
                        "arn",
                        "meshName",
                        "virtualServiceName"
                    ],
                    "type": "object"
                },
                "type": "array"
            },
            "VirtualServiceProvider": {
                "description": "An object representing the provider for a virtual service.",
                "properties": {
                    "virtualNode": {
                        "description": "The virtual node associated with a virtual service.",
                        "properties": {
                            "virtualNodeName": {
                                "description": "The name of the virtual node that is acting as a service provider.",
                                "maxLength": 255,
                                "minLength": 1,
                                "type": "string"
                            }
                        },
                        "required": [
                            "virtualNodeName"
                        ],
                        "type": "object"
                    },
                    "virtualRouter": {
                        "description": "The virtual router associated with a virtual service.",
                        "properties": {
                            "virtualRouterName": {
                                "description": "The name of the virtual router that is acting as a service provider.",
                                "maxLength": 255,
                                "minLength": 1,
                                "type": "string"
                            }
                        },
                        "required": [
                            "virtualRouterName"
                        ],
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "VirtualServiceRef": {
                "description": "An object representing a virtual service returned by a list operation.",
                "properties": {
                    "arn": {
                        "description": "The full Amazon Resource Name (ARN) for the virtual service.",
                        "type": "string"
                    },
                    "meshName": {
                        "description": "The name of the service mesh that the virtual service resides in.",
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string"
                    },
                    "virtualServiceName": {
                        "description": "The name of the virtual service.",
                        "type": "string"
                    }
                },
                "required": [
                    "arn",
                    "meshName",
                    "virtualServiceName"
                ],
                "type": "object"
            },
            "VirtualServiceSpec": {
                "description": "An object representing the specification of a virtual service.",
                "properties": {
                    "provider": {
                        "description": "The App Mesh object that is acting as the provider for a virtual service. You can specify\n         a single virtual node or virtual router.",
                        "properties": {
                            "virtualNode": {
                                "description": "The virtual node associated with a virtual service.",
                                "properties": {
                                    "virtualNodeName": {
                                        "description": "The name of the virtual node that is acting as a service provider.",
                                        "maxLength": 255,
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "virtualNodeName"
                                ],
                                "type": "object"
                            },
                            "virtualRouter": {
                                "description": "The virtual router associated with a virtual service.",
                                "properties": {
                                    "virtualRouterName": {
                                        "description": "The name of the virtual router that is acting as a service provider.",
                                        "maxLength": 255,
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "virtualRouterName"
                                ],
                                "type": "object"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "VirtualServiceStatus": {
                "description": "An object representing the status of a virtual service.",
                "properties": {
                    "status": {
                        "description": "The current status of the virtual service.",
                        "enum": [
                            "ACTIVE",
                            "DELETED",
                            "INACTIVE"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "status"
                ],
                "type": "object"
            },
            "VirtualServiceStatusCode": {
                "enum": [
                    "ACTIVE",
                    "DELETED",
                    "INACTIVE"
                ],
                "type": "string"
            },
            "WeightedTarget": {
                "description": "An object representing a target and its relative weight. Traffic is distributed across\n         targets according to their relative weight. For example, a weighted target with a relative\n         weight of 50 receives five times as much traffic as one with a relative weight of\n         10.",
                "properties": {
                    "virtualNode": {
                        "description": "The virtual node to associate with the weighted target.",
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string"
                    },
                    "weight": {
                        "description": "The relative weight of the weighted target.",
                        "maximum": 100,
                        "minimum": 0,
                        "type": "integer"
                    }
                },
                "required": [
                    "virtualNode",
                    "weight"
                ],
                "type": "object"
            },
            "WeightedTargets": {
                "items": {
                    "description": "An object representing a target and its relative weight. Traffic is distributed across\n         targets according to their relative weight. For example, a weighted target with a relative\n         weight of 50 receives five times as much traffic as one with a relative weight of\n         10.",
                    "properties": {
                        "virtualNode": {
                            "description": "The virtual node to associate with the weighted target.",
                            "maxLength": 255,
                            "minLength": 1,
                            "type": "string"
                        },
                        "weight": {
                            "description": "The relative weight of the weighted target.",
                            "maximum": 100,
                            "minimum": 0,
                            "type": "integer"
                        }
                    },
                    "required": [
                        "virtualNode",
                        "weight"
                    ],
                    "type": "object"
                },
                "type": "array"
            }
        },
        "parameters": {
            "Action": {
                "in": "query",
                "name": "Action",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "Version": {
                "in": "query",
                "name": "Version",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-Algorithm": {
                "in": "header",
                "name": "X-Amz-Algorithm",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-Content-Sha256": {
                "in": "header",
                "name": "X-Amz-Content-Sha256",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-Credential": {
                "in": "header",
                "name": "X-Amz-Credential",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-Date": {
                "in": "header",
                "name": "X-Amz-Date",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-Security-Token": {
                "in": "header",
                "name": "X-Amz-Security-Token",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-Signature": {
                "in": "header",
                "name": "X-Amz-Signature",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "X-Amz-SignedHeaders": {
                "in": "header",
                "name": "X-Amz-SignedHeaders",
                "required": false,
                "schema": {
                    "type": "string"
                }
            }
        },
        "requestBodies": {
            "ListMeshesBody": {
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "",
                            "properties": {},
                            "type": "object"
                        }
                    }
                },
                "required": true
            }
        },
        "securitySchemes": {
            "hmac": {
                "description": "Amazon Signature authorization v4",
                "in": "header",
                "name": "Authorization",
                "type": "apiKey",
                "x-amazon-apigateway-authtype": "awsSigv4"
            }
        }
    }
}