{
    "title": "AWS App Mesh",
    "description": "<p>AWS App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and\n         control containerized microservices. App Mesh standardizes how your microservices\n         communicate, giving you end-to-end visibility and helping to ensure high-availability for\n         your applications.</p>\n         <p>App Mesh gives you consistent visibility and network traffic controls for every\n         microservice in an application. You can use App Mesh with Amazon ECS\n         (using the Amazon EC2 launch type), Amazon EKS, and Kubernetes on AWS.</p>\n         <note>\n            <p>App Mesh supports containerized microservice applications that use service discovery\n            naming for their components. To use App Mesh, you must have a containerized application\n            running on Amazon EC2 instances, hosted in either Amazon ECS, Amazon EKS, or Kubernetes on AWS. For\n            more information about service discovery on Amazon ECS, see <a href=\"http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the\n               <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and\n               <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS\n               for Services and Pods</a> in the Kubernetes documentation.</p>\n         </note>",
    "docsUrl": "https://aws.amazon.com/appmesh/",
    "url": "https://api.apis.guru/v2/specs/amazonaws.com/appmesh/2019-01-25/swagger.json",
    "envVars": {},
    "credentials": {
        "fields": {
            "server": {
                "label": "Server",
                "viewClass": "SelectView",
                "model": [
                    "https://appmesh.amazonaws.com/",
                    "http://appmesh.amazonaws.com/",
                    "--- Custom URL"
                ],
                "required": true
            },
            "otherServer": {
                "label": "Custom Server URL",
                "viewClass": "TextFieldView"
            },
            "hmac": {
                "label": "Authorization (hmac)",
                "viewClass": "TextFieldView",
                "note": "Amazon Signature authorization v4"
            }
        }
    },
    "triggers": {
        "startFlow": {
            "main": "./lib/triggers/startFlow.js",
            "type": "polling",
            "title": "Start Flow",
            "fields": {}
        }
    },
    "actions": {
        "ListMeshes": {
            "main": "./lib/actions/ListMeshes.js",
            "title": "Returns a list of existing service meshes.",
            "description": "Returns a list of existing service meshes.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListMeshes.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateMesh": {
            "main": "./lib/actions/CreateMesh.js",
            "title": "<p>Creates a new service mesh. A service mesh is a logical boundary for network traffic\n         between the services that reside within it.</p>\n         <p>After you create your service mesh, you can create virtual services, virtual nodes,\n         virtual routers, and routes to distribute traffic between the applications in your\n         mesh.</p>",
            "description": "<p>Creates a new service mesh. A service mesh is a logical boundary for network traffic\n         between the services that reside within it.</p>\n         <p>After you create your service mesh, you can create virtual services, virtual nodes,\n         virtual routers, and routes to distribute traffic between the applications in your\n         mesh.</p>",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateMesh.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteMesh": {
            "main": "./lib/actions/DeleteMesh.js",
            "title": "<p>Deletes an existing service mesh.</p>\n         <p>You must delete all resources (virtual services, routes, virtual routers, virtual nodes)\n         in the service mesh before you can delete the mesh itself.</p>",
            "description": "<p>Deletes an existing service mesh.</p>\n         <p>You must delete all resources (virtual services, routes, virtual routers, virtual nodes)\n         in the service mesh before you can delete the mesh itself.</p>",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteMesh.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeMesh": {
            "main": "./lib/actions/DescribeMesh.js",
            "title": "Describes an existing service mesh.",
            "description": "Describes an existing service mesh.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeMesh.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListVirtualNodes": {
            "main": "./lib/actions/ListVirtualNodes.js",
            "title": "Returns a list of existing virtual nodes.",
            "description": "Returns a list of existing virtual nodes.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListVirtualNodes.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateVirtualNode": {
            "main": "./lib/actions/CreateVirtualNode.js",
            "title": "<p>Creates a new virtual node within a service mesh.</p>\n         <p>A virtual node acts as logical pointer to a particular task group, such as an Amazon ECS\n         service or a Kubernetes deployment. When you create a virtual node, you must specify the\n         DNS service discovery hostname for your task group.</p>\n         <p>Any inbound traffic that your virtual node expects should be specified as a\n            <code>listener</code>. Any outbound traffic that your virtual node expects to reach\n         should be specified as a <code>backend</code>.</p>\n         <p>The response metadata for your new virtual node contains the <code>arn</code> that is\n         associated with the virtual node. Set this value (either the full ARN or the truncated\n         resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>, as the\n            <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's Envoy\n         proxy container in your task definition or pod spec. This is then mapped to the\n            <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>\n         <note>\n            <p>If you require your Envoy stats or tracing to use a different name, you can override\n            the <code>node.cluster</code> value that is set by\n               <code>APPMESH_VIRTUAL_NODE_NAME</code> with the\n               <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>\n         </note>",
            "description": "<p>Creates a new virtual node within a service mesh.</p>\n         <p>A virtual node acts as logical pointer to a particular task group, such as an Amazon ECS\n         service or a Kubernetes deployment. When you create a virtual node, you must specify the\n         DNS service discovery hostname for your task group.</p>\n         <p>Any inbound traffic that your virtual node expects should be specified as a\n            <code>listener</code>. Any outbound traffic that your virtual node expects to reach\n         should be specified as a <code>backend</code>.</p>\n         <p>The response metadata for your new virtual node contains the <code>arn</code> that is\n         associated with the virtual node. Set this value (either the full ARN or the truncated\n         resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>, as the\n            <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's Envoy\n         proxy container in your task definition or pod spec. This is then mapped to the\n            <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>\n         <note>\n            <p>If you require your Envoy stats or tracing to use a different name, you can override\n            the <code>node.cluster</code> value that is set by\n               <code>APPMESH_VIRTUAL_NODE_NAME</code> with the\n               <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>\n         </note>",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateVirtualNode.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteVirtualNode": {
            "main": "./lib/actions/DeleteVirtualNode.js",
            "title": "<p>Deletes an existing virtual node.</p>\n         <p>You must delete any virtual services that list a virtual node as a service provider\n         before you can delete the virtual node itself.</p>",
            "description": "<p>Deletes an existing virtual node.</p>\n         <p>You must delete any virtual services that list a virtual node as a service provider\n         before you can delete the virtual node itself.</p>",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteVirtualNode.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeVirtualNode": {
            "main": "./lib/actions/DescribeVirtualNode.js",
            "title": "Describes an existing virtual node.",
            "description": "Describes an existing virtual node.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeVirtualNode.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateVirtualNode": {
            "main": "./lib/actions/UpdateVirtualNode.js",
            "title": "Updates an existing virtual node in a specified service mesh.",
            "description": "Updates an existing virtual node in a specified service mesh.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateVirtualNode.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListRoutes": {
            "main": "./lib/actions/ListRoutes.js",
            "title": "Returns a list of existing routes in a service mesh.",
            "description": "Returns a list of existing routes in a service mesh.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListRoutes.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateRoute": {
            "main": "./lib/actions/CreateRoute.js",
            "title": "<p>Creates a new route that is associated with a virtual router.</p>\n         <p>You can use the <code>prefix</code> parameter in your route specification for path-based\n         routing of requests. For example, if your virtual router service name is\n            <code>my-service.local</code>, and you want the route to match requests to\n            <code>my-service.local/metrics</code>, then your prefix should be\n         <code>/metrics</code>.</p>\n         <p>If your route matches a request, you can distribute traffic to one or more target\n         virtual nodes with relative weighting.</p>",
            "description": "<p>Creates a new route that is associated with a virtual router.</p>\n         <p>You can use the <code>prefix</code> parameter in your route specification for path-based\n         routing of requests. For example, if your virtual router service name is\n            <code>my-service.local</code>, and you want the route to match requests to\n            <code>my-service.local/metrics</code>, then your prefix should be\n         <code>/metrics</code>.</p>\n         <p>If your route matches a request, you can distribute traffic to one or more target\n         virtual nodes with relative weighting.</p>",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateRoute.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteRoute": {
            "main": "./lib/actions/DeleteRoute.js",
            "title": "Deletes an existing route.",
            "description": "Deletes an existing route.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteRoute.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeRoute": {
            "main": "./lib/actions/DescribeRoute.js",
            "title": "Describes an existing route.",
            "description": "Describes an existing route.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeRoute.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateRoute": {
            "main": "./lib/actions/UpdateRoute.js",
            "title": "Updates an existing route for a specified service mesh and virtual router.",
            "description": "Updates an existing route for a specified service mesh and virtual router.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateRoute.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListVirtualRouters": {
            "main": "./lib/actions/ListVirtualRouters.js",
            "title": "Returns a list of existing virtual routers in a service mesh.",
            "description": "Returns a list of existing virtual routers in a service mesh.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListVirtualRouters.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateVirtualRouter": {
            "main": "./lib/actions/CreateVirtualRouter.js",
            "title": "<p>Creates a new virtual router within a service mesh.</p>\n         <p>Any inbound traffic that your virtual router expects should be specified as a\n            <code>listener</code>. </p>\n         <p>Virtual routers handle traffic for one or more service names within your mesh. After you\n         create your virtual router, create and associate routes for your virtual router that direct\n         incoming requests to different virtual nodes.</p>",
            "description": "<p>Creates a new virtual router within a service mesh.</p>\n         <p>Any inbound traffic that your virtual router expects should be specified as a\n            <code>listener</code>. </p>\n         <p>Virtual routers handle traffic for one or more service names within your mesh. After you\n         create your virtual router, create and associate routes for your virtual router that direct\n         incoming requests to different virtual nodes.</p>",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateVirtualRouter.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteVirtualRouter": {
            "main": "./lib/actions/DeleteVirtualRouter.js",
            "title": "<p>Deletes an existing virtual router.</p>\n         <p>You must delete any routes associated with the virtual router before you can delete the\n         router itself.</p>",
            "description": "<p>Deletes an existing virtual router.</p>\n         <p>You must delete any routes associated with the virtual router before you can delete the\n         router itself.</p>",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteVirtualRouter.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeVirtualRouter": {
            "main": "./lib/actions/DescribeVirtualRouter.js",
            "title": "Describes an existing virtual router.",
            "description": "Describes an existing virtual router.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeVirtualRouter.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateVirtualRouter": {
            "main": "./lib/actions/UpdateVirtualRouter.js",
            "title": "Updates an existing virtual router in a specified service mesh.",
            "description": "Updates an existing virtual router in a specified service mesh.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateVirtualRouter.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListVirtualServices": {
            "main": "./lib/actions/ListVirtualServices.js",
            "title": "Returns a list of existing virtual services in a service mesh.",
            "description": "Returns a list of existing virtual services in a service mesh.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListVirtualServices.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateVirtualService": {
            "main": "./lib/actions/CreateVirtualService.js",
            "title": "<p>Creates a virtual service within a service mesh.</p>\n         <p>A virtual service is an abstraction of a real service that is either provided by a\n         virtual node directly, or indirectly by means of a virtual router. Dependent services call\n         your virtual service by its <code>virtualServiceName</code>, and those requests are routed\n         to the virtual node or virtual router that is specified as the provider for the virtual\n         service.</p>",
            "description": "<p>Creates a virtual service within a service mesh.</p>\n         <p>A virtual service is an abstraction of a real service that is either provided by a\n         virtual node directly, or indirectly by means of a virtual router. Dependent services call\n         your virtual service by its <code>virtualServiceName</code>, and those requests are routed\n         to the virtual node or virtual router that is specified as the provider for the virtual\n         service.</p>",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateVirtualService.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteVirtualService": {
            "main": "./lib/actions/DeleteVirtualService.js",
            "title": "Deletes an existing virtual service.",
            "description": "Deletes an existing virtual service.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteVirtualService.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeVirtualService": {
            "main": "./lib/actions/DescribeVirtualService.js",
            "title": "Describes an existing virtual service.",
            "description": "Describes an existing virtual service.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeVirtualService.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateVirtualService": {
            "main": "./lib/actions/UpdateVirtualService.js",
            "title": "Updates an existing virtual service in a specified service mesh.",
            "description": "Updates an existing virtual service in a specified service mesh.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateVirtualService.in.json",
                "out": {
                    "type": "object"
                }
            }
        }
    }
}