{
    "title": "AWS App Mesh",
    "description": "AWS App Mesh is a service mesh based on the Envoy proxy that makes it easy to\nmonitor and control containerized microservices. App Mesh standardizes how your\nmicroservices communicate, giving you end-to-end visibility and helping to\nensure high-availability for your applications.\n\nApp Mesh gives you consistent visibility and network traffic controls for every\nmicroservice in an application. You can use App Mesh with Amazon ECS (using the\nAmazon EC2 launch type), Amazon EKS, and Kubernetes on AWS.\n\nApp Mesh supports containerized microservice applications that use service\ndiscovery naming for their components. To use App Mesh, you must have a\ncontainerized application running on Amazon EC2 instances, hosted in either\nAmazon ECS, Amazon EKS, or Kubernetes on AWS. For more information about service\ndiscovery on Amazon ECS, see Service Discovery\n[http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html] \nin the Amazon Elastic Container Service Developer Guide. Kubernetes kube-dns and \ncoredns are supported. For more information, see DNS for Services and Pods\n[https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/] in\nthe Kubernetes documentation.",
    "docsUrl": "https://aws.amazon.com/appmesh/",
    "url": "https://api.apis.guru/v2/specs/amazonaws.com/appmesh/2019-01-25/swagger.json",
    "envVars": {},
    "credentials": {
        "fields": {
            "server": {
                "label": "Server",
                "viewClass": "SelectView",
                "model": [
                    "https://appmesh.amazonaws.com/",
                    "http://appmesh.amazonaws.com/",
                    "--- Custom URL"
                ],
                "required": true
            },
            "otherServer": {
                "label": "Custom Server URL",
                "viewClass": "TextFieldView"
            },
            "auth_hmac": {
                "label": "Authorization (hmac)",
                "viewClass": "TextFieldView",
                "note": "Amazon Signature authorization v4"
            }
        }
    },
    "triggers": {
        "startFlow": {
            "main": "./lib/triggers/startFlow.js",
            "type": "polling",
            "title": "Start Flow",
            "fields": {}
        }
    },
    "actions": {
        "ListMeshes": {
            "main": "./lib/actions/ListMeshes.js",
            "title": "ListMeshes",
            "description": "Returns a list of existing service meshes.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListMeshes.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateMesh": {
            "main": "./lib/actions/CreateMesh.js",
            "title": "CreateMesh",
            "description": "Creates a new service mesh. A service mesh is a logical boundary for network\ntraffic between the services that reside within it.\n\nAfter you create your service mesh, you can create virtual services, virtual\nnodes, virtual routers, and routes to distribute traffic between the\napplications in your mesh.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateMesh.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteMesh": {
            "main": "./lib/actions/DeleteMesh.js",
            "title": "DeleteMesh",
            "description": "Deletes an existing service mesh.\n\nYou must delete all resources (virtual services, routes, virtual routers,\nvirtual nodes) in the service mesh before you can delete the mesh itself.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteMesh.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeMesh": {
            "main": "./lib/actions/DescribeMesh.js",
            "title": "DescribeMesh",
            "description": "Describes an existing service mesh.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeMesh.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListVirtualNodes": {
            "main": "./lib/actions/ListVirtualNodes.js",
            "title": "ListVirtualNodes",
            "description": "Returns a list of existing virtual nodes.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListVirtualNodes.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateVirtualNode": {
            "main": "./lib/actions/CreateVirtualNode.js",
            "title": "CreateVirtualNode",
            "description": "Creates a new virtual node within a service mesh.\n\nA virtual node acts as logical pointer to a particular task group, such as an\nAmazon ECS service or a Kubernetes deployment. When you create a virtual node,\nyou must specify the DNS service discovery hostname for your task group.\n\nAny inbound traffic that your virtual node expects should be specified as a \nlistener. Any outbound traffic that your virtual node expects to reach should be\nspecified as a backend.\n\nThe response metadata for your new virtual node contains the arn that is\nassociated with the virtual node. Set this value (either the full ARN or the\ntruncated resource name, for example, mesh/default/virtualNode/simpleapp, as the \nAPPMESH_VIRTUAL_NODE_NAME environment variable for your task group's Envoy proxy\ncontainer in your task definition or pod spec. This is then mapped to the \nnode.id and node.cluster Envoy parameters.\n\nIf you require your Envoy stats or tracing to use a different name, you can\noverride the node.cluster value that is set by APPMESH_VIRTUAL_NODE_NAME with\nthe APPMESH_VIRTUAL_NODE_CLUSTER environment variable.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateVirtualNode.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteVirtualNode": {
            "main": "./lib/actions/DeleteVirtualNode.js",
            "title": "DeleteVirtualNode",
            "description": "Deletes an existing virtual node.\n\nYou must delete any virtual services that list a virtual node as a service\nprovider before you can delete the virtual node itself.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteVirtualNode.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeVirtualNode": {
            "main": "./lib/actions/DescribeVirtualNode.js",
            "title": "DescribeVirtualNode",
            "description": "Describes an existing virtual node.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeVirtualNode.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateVirtualNode": {
            "main": "./lib/actions/UpdateVirtualNode.js",
            "title": "UpdateVirtualNode",
            "description": "Updates an existing virtual node in a specified service mesh.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateVirtualNode.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListRoutes": {
            "main": "./lib/actions/ListRoutes.js",
            "title": "ListRoutes",
            "description": "Returns a list of existing routes in a service mesh.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListRoutes.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateRoute": {
            "main": "./lib/actions/CreateRoute.js",
            "title": "CreateRoute",
            "description": "Creates a new route that is associated with a virtual router.\n\nYou can use the prefix parameter in your route specification for path-based\nrouting of requests. For example, if your virtual router service name is \nmy-service.local, and you want the route to match requests to \nmy-service.local/metrics, then your prefix should be /metrics.\n\nIf your route matches a request, you can distribute traffic to one or more\ntarget virtual nodes with relative weighting.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateRoute.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteRoute": {
            "main": "./lib/actions/DeleteRoute.js",
            "title": "DeleteRoute",
            "description": "Deletes an existing route.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteRoute.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeRoute": {
            "main": "./lib/actions/DescribeRoute.js",
            "title": "DescribeRoute",
            "description": "Describes an existing route.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeRoute.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateRoute": {
            "main": "./lib/actions/UpdateRoute.js",
            "title": "UpdateRoute",
            "description": "Updates an existing route for a specified service mesh and virtual router.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateRoute.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListVirtualRouters": {
            "main": "./lib/actions/ListVirtualRouters.js",
            "title": "ListVirtualRouters",
            "description": "Returns a list of existing virtual routers in a service mesh.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListVirtualRouters.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateVirtualRouter": {
            "main": "./lib/actions/CreateVirtualRouter.js",
            "title": "CreateVirtualRouter",
            "description": "Creates a new virtual router within a service mesh.\n\nAny inbound traffic that your virtual router expects should be specified as a \nlistener. \n\nVirtual routers handle traffic for one or more service names within your mesh.\nAfter you create your virtual router, create and associate routes for your\nvirtual router that direct incoming requests to different virtual nodes.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateVirtualRouter.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteVirtualRouter": {
            "main": "./lib/actions/DeleteVirtualRouter.js",
            "title": "DeleteVirtualRouter",
            "description": "Deletes an existing virtual router.\n\nYou must delete any routes associated with the virtual router before you can\ndelete the router itself.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteVirtualRouter.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeVirtualRouter": {
            "main": "./lib/actions/DescribeVirtualRouter.js",
            "title": "DescribeVirtualRouter",
            "description": "Describes an existing virtual router.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeVirtualRouter.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateVirtualRouter": {
            "main": "./lib/actions/UpdateVirtualRouter.js",
            "title": "UpdateVirtualRouter",
            "description": "Updates an existing virtual router in a specified service mesh.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateVirtualRouter.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "ListVirtualServices": {
            "main": "./lib/actions/ListVirtualServices.js",
            "title": "ListVirtualServices",
            "description": "Returns a list of existing virtual services in a service mesh.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/ListVirtualServices.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "CreateVirtualService": {
            "main": "./lib/actions/CreateVirtualService.js",
            "title": "CreateVirtualService",
            "description": "Creates a virtual service within a service mesh.\n\nA virtual service is an abstraction of a real service that is either provided by\na virtual node directly, or indirectly by means of a virtual router. Dependent\nservices call your virtual service by its virtualServiceName, and those requests\nare routed to the virtual node or virtual router that is specified as the\nprovider for the virtual service.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/CreateVirtualService.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DeleteVirtualService": {
            "main": "./lib/actions/DeleteVirtualService.js",
            "title": "DeleteVirtualService",
            "description": "Deletes an existing virtual service.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DeleteVirtualService.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "DescribeVirtualService": {
            "main": "./lib/actions/DescribeVirtualService.js",
            "title": "DescribeVirtualService",
            "description": "Describes an existing virtual service.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/DescribeVirtualService.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "UpdateVirtualService": {
            "main": "./lib/actions/UpdateVirtualService.js",
            "title": "UpdateVirtualService",
            "description": "Updates an existing virtual service in a specified service mesh.",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/UpdateVirtualService.in.json",
                "out": {
                    "type": "object"
                }
            }
        }
    }
}